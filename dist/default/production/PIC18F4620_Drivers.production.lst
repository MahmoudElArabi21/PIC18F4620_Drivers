

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Aug 08 05:34:15 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    46                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    47   000000                     
    48                           ; Version 2.40
    49                           ; Generated 17/11/2021 GMT
    50                           ; 
    51                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution. Publication is not required when
    65                           ;        this file is used in an embedded application.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4620 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83   000000                     
    84                           	psect	idataCOMRAM
    85   001B42                     __pidataCOMRAM:
    86                           	callstack 0
    87                           
    88                           ;initializer for _lat_regs
    89   001B42  89                 	db	137
    90   001B43  0F                 	db	15
    91   001B44  8A                 	db	138
    92   001B45  0F                 	db	15
    93   001B46  8B                 	db	139
    94   001B47  0F                 	db	15
    95   001B48  8C                 	db	140
    96   001B49  0F                 	db	15
    97   001B4A  8D                 	db	141
    98   001B4B  0F                 	db	15
    99                           
   100                           ;initializer for _port_regs
   101   001B4C  80                 	db	128
   102   001B4D  0F                 	db	15
   103   001B4E  81                 	db	129
   104   001B4F  0F                 	db	15
   105   001B50  82                 	db	130
   106   001B51  0F                 	db	15
   107   001B52  83                 	db	131
   108   001B53  0F                 	db	15
   109   001B54  84                 	db	132
   110   001B55  0F                 	db	15
   111                           
   112                           ;initializer for _tris_regs
   113   001B56  92                 	db	146
   114   001B57  0F                 	db	15
   115   001B58  93                 	db	147
   116   001B59  0F                 	db	15
   117   001B5A  94                 	db	148
   118   001B5B  0F                 	db	15
   119   001B5C  95                 	db	149
   120   001B5D  0F                 	db	15
   121   001B5E  96                 	db	150
   122   001B5F  0F                 	db	15
   123                           
   124                           ;initializer for _RB7_Flag
   125   001B60  01                 	db	1
   126                           
   127                           ;initializer for _RB6_Flag
   128   001B61  01                 	db	1
   129                           
   130                           ;initializer for _RB5_Flag
   131   001B62  01                 	db	1
   132                           
   133                           ;initializer for _RB4_Flag
   134   001B63  01                 	db	1
   135                           
   136                           ;initializer for _int2_obj
   137   001B64  76                 	db	low _Int2_APP_ISR
   138   001B65  1D                 	db	high _Int2_APP_ISR
   139   001B66  51                 	db	81
   140   001B67  01                 	db	1
   141   001B68  02                 	db	2
   142   001B69  01                 	db	1
   143                           
   144                           ;initializer for _int1_obj
   145   001B6A  5A                 	db	low _Int1_APP_ISR
   146   001B6B  1D                 	db	high _Int1_APP_ISR
   147   001B6C  49                 	db	73
   148   001B6D  00                 	db	0
   149   001B6E  01                 	db	1
   150   001B6F  01                 	db	1
   151                           
   152                           ;initializer for _int0_obj
   153   001B70  68                 	db	low _Int0_APP_ISR
   154   001B71  1D                 	db	high _Int0_APP_ISR
   155   001B72  41                 	db	65
   156   001B73  01                 	db	1
   157   001B74  00                 	db	0
   158   001B75  01                 	db	1
   159                           
   160                           ;initializer for _led3
   161   001B76  12                 	db	18
   162                           
   163                           ;initializer for _led2
   164   001B77  0A                 	db	10
   165                           
   166                           ;initializer for _led1
   167   001B78  02                 	db	2
   168                           
   169                           	psect	smallconst
   170   001000                     __psmallconst:
   171                           	callstack 0
   172   001000  00                 	db	0
   173   001001  37                 	db	55
   174   001002  38                 	db	56
   175   001003  39                 	db	57
   176   001004  2F                 	db	47
   177   001005  34                 	db	52
   178   001006  35                 	db	53
   179   001007  36                 	db	54
   180   001008  2A                 	db	42
   181   001009  31                 	db	49
   182   00100A  32                 	db	50
   183   00100B  33                 	db	51
   184   00100C  2D                 	db	45
   185   00100D  23                 	db	35
   186   00100E  30                 	db	48
   187   00100F  3D                 	db	61
   188   001010  2B                 	db	43
   189   001011                     __end_of_btn_values:
   190                           	callstack 0
   191   000000                     _INTCON2bits	set	4081
   192   000000                     _PORTBbits	set	3969
   193   000000                     _LATA	set	3977
   194   000000                     _PORTE	set	3972
   195   000000                     _PORTD	set	3971
   196   000000                     _PORTC	set	3970
   197   000000                     _PORTB	set	3969
   198   000000                     _PORTA	set	3968
   199   000000                     _TRISA	set	3986
   200   000000                     _INTCON3bits	set	4080
   201   000000                     _INTCONbits	set	4082
   202   000000                     _TRISE	set	3990
   203   000000                     _TRISD	set	3989
   204   000000                     _TRISC	set	3988
   205   000000                     _TRISB	set	3987
   206   000000                     _LATE	set	3981
   207   000000                     _LATD	set	3980
   208   000000                     _LATC	set	3979
   209   000000                     _LATB	set	3978
   210   001011                     STR_1:
   211   001011  25                 	db	37
   212   001012  69                 	db	105	;'i'
   213   001013  00                 	db	0
   214   001014  00                 	db	0	; dummy byte at the end
   215   000000                     
   216                           ; #config settings
   217                           
   218                           	psect	cinit
   219   001B7A                     __pcinit:
   220                           	callstack 0
   221   001B7A                     start_initialization:
   222                           	callstack 0
   223   001B7A                     __initialization:
   224                           	callstack 0
   225                           
   226                           ; Initialize objects allocated to COMRAM (55 bytes)
   227                           ; load TBLPTR registers with __pidataCOMRAM
   228   001B7A  0E42               	movlw	low __pidataCOMRAM
   229   001B7C  6EF6               	movwf	tblptrl,c
   230   001B7E  0E1B               	movlw	high __pidataCOMRAM
   231   001B80  6EF7               	movwf	tblptrh,c
   232   001B82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   233   001B84  6EF8               	movwf	tblptru,c
   234   001B86  EE00  F001         	lfsr	0,__pdataCOMRAM
   235   001B8A  EE10 F037          	lfsr	1,55
   236   001B8E                     copy_data0:
   237   001B8E  0009               	tblrd		*+
   238   001B90  CFF5 FFEE          	movff	tablat,postinc0
   239   001B94  50E5               	movf	postdec1,w,c
   240   001B96  50E1               	movf	fsr1l,w,c
   241   001B98  E1FA               	bnz	copy_data0
   242                           
   243                           ; Clear objects allocated to COMRAM (35 bytes)
   244   001B9A  EE00  F038         	lfsr	0,__pbssCOMRAM
   245   001B9E  0E23               	movlw	35
   246   001BA0                     clear_0:
   247   001BA0  6AEE               	clrf	postinc0,c
   248   001BA2  06E8               	decf	wreg,f,c
   249   001BA4  E1FD               	bnz	clear_0
   250   001BA6                     end_of_initialization:
   251                           	callstack 0
   252   001BA6                     __end_of__initialization:
   253                           	callstack 0
   254   001BA6  906D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   255   001BA8  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   256   001BAA  0100               	movlb	0
   257   001BAC  EF4B  F00D         	goto	_main	;jump to C main() function
   258                           
   259                           	psect	bssCOMRAM
   260   000038                     __pbssCOMRAM:
   261                           	callstack 0
   262   000038                     	ds	6
   263   00003E                     _RB7_InterruptHandler_LOW:
   264                           	callstack 0
   265   00003E                     	ds	2
   266   000040                     _RB7_InterruptHandler_HIGH:
   267                           	callstack 0
   268   000040                     	ds	2
   269   000042                     _RB6_InterruptHandler_LOW:
   270                           	callstack 0
   271   000042                     	ds	2
   272   000044                     _RB6_InterruptHandler_HIGH:
   273                           	callstack 0
   274   000044                     	ds	2
   275   000046                     _RB5_InterruptHandler_LOW:
   276                           	callstack 0
   277   000046                     	ds	2
   278   000048                     _RB5_InterruptHandler_HIGH:
   279                           	callstack 0
   280   000048                     	ds	2
   281   00004A                     _RB4_InterruptHandler_LOW:
   282                           	callstack 0
   283   00004A                     	ds	2
   284   00004C                     _RB4_InterruptHandler_HIGH:
   285                           	callstack 0
   286   00004C                     	ds	2
   287   00004E                     _INT2_InterruptHandler:
   288                           	callstack 0
   289   00004E                     	ds	2
   290   000050                     _INT1_InterruptHandler:
   291                           	callstack 0
   292   000050                     	ds	2
   293   000052                     _INT0_InterruptHandler:
   294                           	callstack 0
   295   000052                     	ds	2
   296   000054                     relay_turn_off@F3049:
   297                           	callstack 0
   298   000054                     	ds	1
   299   000055                     relay_turn_on@F3044:
   300                           	callstack 0
   301   000055                     	ds	1
   302   000056                     relay_initialize@F3039:
   303                           	callstack 0
   304   000056                     	ds	1
   305   000057                     led_toggle@F3060:
   306                           	callstack 0
   307   000057                     	ds	1
   308   000058                     led_turn_off@F3055:
   309                           	callstack 0
   310   000058                     	ds	1
   311   000059                     led_turn_on@F3050:
   312                           	callstack 0
   313   000059                     	ds	1
   314   00005A                     led_init@F3045:
   315                           	callstack 0
   316   00005A                     	ds	1
   317                           
   318                           	psect	dataCOMRAM
   319   000001                     __pdataCOMRAM:
   320                           	callstack 0
   321   000001                     _lat_regs:
   322                           	callstack 0
   323   000001                     	ds	10
   324   00000B                     _port_regs:
   325                           	callstack 0
   326   00000B                     	ds	10
   327   000015                     _tris_regs:
   328                           	callstack 0
   329   000015                     	ds	10
   330   00001F                     _RB7_Flag:
   331                           	callstack 0
   332   00001F                     	ds	1
   333   000020                     _RB6_Flag:
   334                           	callstack 0
   335   000020                     	ds	1
   336   000021                     _RB5_Flag:
   337                           	callstack 0
   338   000021                     	ds	1
   339   000022                     _RB4_Flag:
   340                           	callstack 0
   341   000022                     	ds	1
   342   000023                     _int2_obj:
   343                           	callstack 0
   344   000023                     	ds	6
   345   000029                     _int1_obj:
   346                           	callstack 0
   347   000029                     	ds	6
   348   00002F                     _int0_obj:
   349                           	callstack 0
   350   00002F                     	ds	6
   351   000035                     _led3:
   352                           	callstack 0
   353   000035                     	ds	1
   354   000036                     _led2:
   355                           	callstack 0
   356   000036                     	ds	1
   357   000037                     _led1:
   358                           	callstack 0
   359   000037                     	ds	1
   360                           
   361                           	psect	cstackBANK0
   362   000080                     __pcstackBANK0:
   363                           	callstack 0
   364   000080                     gpio_pin_direction_init@my_pin:
   365                           	callstack 0
   366   000080                     gpio_pin_logic_write@my_pin:
   367                           	callstack 0
   368   000080                     Interrupt_INTx_Enable@int_obj:
   369                           	callstack 0
   370   000080                     Interrupt_INTx_Disable@int_obj:
   371                           	callstack 0
   372   000080                     Interrupt_INTx_Edge_Init@int_obj:
   373                           	callstack 0
   374   000080                     Interrupt_INTx_Clear_Flag@int_obj:
   375                           	callstack 0
   376   000080                     INT0_SetInterruptHandler@InterruptHandler:
   377                           	callstack 0
   378   000080                     INT1_SetInterruptHandler@InterruptHandler:
   379                           	callstack 0
   380   000080                     INT2_SetInterruptHandler@InterruptHandler:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x0
   384   000080                     	ds	2
   385   000082                     ??_gpio_pin_direction_init:
   386   000082                     ??_Interrupt_INTx_Disable:
   387   000082                     ??_Interrupt_INTx_Clear_Flag:
   388   000082                     ??_Interrupt_INTx_Edge_Init:
   389   000082                     ??_Interrupt_INTx_Enable:
   390   000082                     gpio_pin_logic_write@logic:
   391                           	callstack 0
   392   000082                     INT0_SetInterruptHandler@ret:
   393                           	callstack 0
   394   000082                     INT1_SetInterruptHandler@ret:
   395                           	callstack 0
   396   000082                     INT2_SetInterruptHandler@ret:
   397                           	callstack 0
   398                           
   399                           ; 1 bytes @ 0x2
   400   000082                     	ds	1
   401   000083                     ??_gpio_pin_logic_write:
   402   000083                     Interrupt_INTx_SetInterruptHandler@int_obj:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x3
   406   000083                     	ds	1
   407   000084                     Interrupt_INTx_Enable@ret:
   408                           	callstack 0
   409   000084                     Interrupt_INTx_Disable@ret:
   410                           	callstack 0
   411   000084                     Interrupt_INTx_Edge_Init@ret:
   412                           	callstack 0
   413   000084                     Interrupt_INTx_Clear_Flag@ret:
   414                           	callstack 0
   415                           
   416                           ; 1 bytes @ 0x4
   417   000084                     	ds	1
   418   000085                     ??_Interrupt_INTx_SetInterruptHandler:
   419                           
   420                           ; 1 bytes @ 0x5
   421   000085                     	ds	2
   422   000087                     Interrupt_INTx_SetInterruptHandler@ret:
   423                           	callstack 0
   424                           
   425                           ; 1 bytes @ 0x7
   426   000087                     	ds	1
   427   000088                     gpio_pin_direction_init@ret:
   428                           	callstack 0
   429                           
   430                           ; 1 bytes @ 0x8
   431   000088                     	ds	1
   432   000089                     gpio_pin_logic_write@ret:
   433                           	callstack 0
   434   000089                     Interrupt_INTx_Pin_Init@int_obj:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x9
   438   000089                     	ds	1
   439   00008A                     gpio_pin_initialize@my_pin:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0xA
   443   00008A                     	ds	1
   444   00008B                     Interrupt_INTx_Pin_Init@ret:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0xB
   448   00008B                     	ds	1
   449   00008C                     gpio_pin_initialize@ret:
   450                           	callstack 0
   451   00008C                     Interrupt_INTx_Init@int_obj:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0xC
   455   00008C                     	ds	1
   456   00008D                     led_init@my_led:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0xD
   460   00008D                     	ds	1
   461   00008E                     Interrupt_INTx_Init@ret:
   462                           	callstack 0
   463                           
   464                           ; 1 bytes @ 0xE
   465   00008E                     	ds	1
   466   00008F                     ??_led_init:
   467                           
   468                           ; 1 bytes @ 0xF
   469   00008F                     	ds	1
   470   000090                     led_init@my_pin:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0x10
   474   000090                     	ds	1
   475                           
   476                           	psect	cstackCOMRAM
   477   00005B                     __pcstackCOMRAM:
   478                           	callstack 0
   479   00005B                     RB4_ISR@RB4_Source:
   480                           	callstack 0
   481   00005B                     RB5_ISR@RB5_Source:
   482                           	callstack 0
   483   00005B                     RB6_ISR@RB6_Source:
   484                           	callstack 0
   485   00005B                     RB7_ISR@RB7_Source:
   486                           	callstack 0
   487   00005B                     gpio_pin_logic_toggle@my_pin:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x0
   491   00005B                     	ds	2
   492   00005D                     ??_gpio_pin_logic_toggle:
   493                           
   494                           ; 1 bytes @ 0x2
   495   00005D                     	ds	5
   496   000062                     gpio_pin_logic_toggle@ret:
   497                           	callstack 0
   498                           
   499                           ; 1 bytes @ 0x7
   500   000062                     	ds	1
   501   000063                     led_toggle@my_led:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x8
   505   000063                     	ds	2
   506   000065                     ??_led_toggle:
   507                           
   508                           ; 1 bytes @ 0xA
   509   000065                     	ds	1
   510   000066                     led_toggle@my_pin:
   511                           	callstack 0
   512                           
   513                           ; 1 bytes @ 0xB
   514   000066                     	ds	1
   515   000067                     ??_InterruptManager:
   516                           
   517                           ; 1 bytes @ 0xC
   518   000067                     	ds	6
   519   00006D                     
   520                           ; 1 bytes @ 0x12
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 55 in file "app.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  2  465[None  ] int 
   533 ;; Registers used:
   534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;Total ram usage:        0 bytes
   545 ;; Hardware stack levels required when called: 8
   546 ;; This function calls:
   547 ;;		_Interrupt_INTx_Init
   548 ;;		_led_init
   549 ;; This function is called by:
   550 ;;		Startup code after reset
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           	psect	text0
   555   001A96                     __ptext0:
   556                           	callstack 0
   557   001A96                     _main:
   558                           	callstack 23
   559   001A96                     
   560                           ;app.c: 56:     Interrupt_INTx_Init(&int0_obj);
   561   001A96  0E2F               	movlw	low _int0_obj
   562   001A98  0100               	movlb	0	; () banked
   563   001A9A  6F8C               	movwf	Interrupt_INTx_Init@int_obj& (0+255),b
   564   001A9C  0E00               	movlw	high _int0_obj
   565   001A9E  6F8D               	movwf	(Interrupt_INTx_Init@int_obj+1)& (0+255),b
   566   001AA0  EC5F  F00C         	call	_Interrupt_INTx_Init	;wreg free
   567                           
   568                           ;app.c: 57:     Interrupt_INTx_Init(&int1_obj);
   569   001AA4  0E29               	movlw	low _int1_obj
   570   001AA6  0100               	movlb	0	; () banked
   571   001AA8  6F8C               	movwf	Interrupt_INTx_Init@int_obj& (0+255),b
   572   001AAA  0E00               	movlw	high _int1_obj
   573   001AAC  6F8D               	movwf	(Interrupt_INTx_Init@int_obj+1)& (0+255),b
   574   001AAE  EC5F  F00C         	call	_Interrupt_INTx_Init	;wreg free
   575                           
   576                           ;app.c: 58:     Interrupt_INTx_Init(&int2_obj);
   577   001AB2  0E23               	movlw	low _int2_obj
   578   001AB4  0100               	movlb	0	; () banked
   579   001AB6  6F8C               	movwf	Interrupt_INTx_Init@int_obj& (0+255),b
   580   001AB8  0E00               	movlw	high _int2_obj
   581   001ABA  6F8D               	movwf	(Interrupt_INTx_Init@int_obj+1)& (0+255),b
   582   001ABC  EC5F  F00C         	call	_Interrupt_INTx_Init	;wreg free
   583                           
   584                           ;app.c: 59:     led_init(&led1);
   585   001AC0  0E37               	movlw	low _led1
   586   001AC2  0100               	movlb	0	; () banked
   587   001AC4  6F8D               	movwf	led_init@my_led& (0+255),b
   588   001AC6  0E00               	movlw	high _led1
   589   001AC8  6F8E               	movwf	(led_init@my_led+1)& (0+255),b
   590   001ACA  EC22  F00C         	call	_led_init	;wreg free
   591                           
   592                           ;app.c: 60:     led_init(&led2);
   593   001ACE  0E36               	movlw	low _led2
   594   001AD0  0100               	movlb	0	; () banked
   595   001AD2  6F8D               	movwf	led_init@my_led& (0+255),b
   596   001AD4  0E00               	movlw	high _led2
   597   001AD6  6F8E               	movwf	(led_init@my_led+1)& (0+255),b
   598   001AD8  EC22  F00C         	call	_led_init	;wreg free
   599                           
   600                           ;app.c: 61:     led_init(&led3);
   601   001ADC  0E35               	movlw	low _led3
   602   001ADE  0100               	movlb	0	; () banked
   603   001AE0  6F8D               	movwf	led_init@my_led& (0+255),b
   604   001AE2  0E00               	movlw	high _led3
   605   001AE4  6F8E               	movwf	(led_init@my_led+1)& (0+255),b
   606   001AE6  EC22  F00C         	call	_led_init	;wreg free
   607   001AEA                     l466:
   608   001AEA  EF75  F00D         	goto	l466
   609   001AEE  EF07  F000         	goto	start
   610   001AF2                     __end_of_main:
   611                           	callstack 0
   612                           
   613 ;; *************** function _led_init *****************
   614 ;; Defined at:
   615 ;;		line 4 in file "ECU_L/LED/led.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  my_led          2   13[BANK0 ] PTR const struct .
   618 ;;		 -> led3(1), led2(1), led1(1), 
   619 ;; Auto vars:     Size  Location     Type
   620 ;;  my_pin          1   16[BANK0 ] struct .
   621 ;;  ret             1    0        unsigned char 
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      unsigned char 
   624 ;; Registers used:
   625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   634 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   635 ;;Total ram usage:        4 bytes
   636 ;; Hardware stack levels used: 1
   637 ;; Hardware stack levels required when called: 7
   638 ;; This function calls:
   639 ;;		_gpio_pin_initialize
   640 ;; This function is called by:
   641 ;;		_main
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text1
   646   001844                     __ptext1:
   647                           	callstack 0
   648   001844                     _led_init:
   649                           	callstack 23
   650   001844                     
   651                           ;ECU_L/LED/led.c: 6:     pin_config_t my_pin = {my_led->led_port, my_led->led_pin, gpio_
      +                          output, my_led->led_status};
   652   001844  C05A  F090         	movff	led_init@F3045,led_init@my_pin
   653   001848  C08D  FFD9         	movff	led_init@my_led,fsr2l
   654   00184C  C08E  FFDA         	movff	led_init@my_led+1,fsr2h
   655   001850  50DF               	movf	223,w,c
   656   001852  0B07               	andlw	7
   657   001854  0100               	movlb	0	; () banked
   658   001856  6F8F               	movwf	??_led_init& (0+255),b
   659   001858  5190               	movf	led_init@my_pin& (0+255),w,b
   660   00185A  198F               	xorwf	??_led_init& (0+255),w,b
   661   00185C  0BF8               	andlw	-8
   662   00185E  198F               	xorwf	??_led_init& (0+255),w,b
   663   001860  6F90               	movwf	led_init@my_pin& (0+255),b
   664   001862                     
   665                           ; BSR set to: 0
   666   001862  C08D  FFD9         	movff	led_init@my_led,fsr2l
   667   001866  C08E  FFDA         	movff	led_init@my_led+1,fsr2h
   668   00186A  30DF               	rrcf	223,w,c
   669   00186C  32E8               	rrcf	wreg,f,c
   670   00186E  32E8               	rrcf	wreg,f,c
   671   001870  0B07               	andlw	7
   672   001872  6F8F               	movwf	??_led_init& (0+255),b
   673   001874  478F               	rlncf	??_led_init& (0+255),f,b
   674   001876  478F               	rlncf	??_led_init& (0+255),f,b
   675   001878  478F               	rlncf	??_led_init& (0+255),f,b
   676   00187A  5190               	movf	led_init@my_pin& (0+255),w,b
   677   00187C  198F               	xorwf	??_led_init& (0+255),w,b
   678   00187E  0BC7               	andlw	-57
   679   001880  198F               	xorwf	??_led_init& (0+255),w,b
   680   001882  6F90               	movwf	led_init@my_pin& (0+255),b
   681   001884                     
   682                           ; BSR set to: 0
   683   001884  9D90               	bcf	led_init@my_pin& (0+255),6,b
   684   001886                     
   685                           ; BSR set to: 0
   686   001886  C08D  FFD9         	movff	led_init@my_led,fsr2l
   687   00188A  C08E  FFDA         	movff	led_init@my_led+1,fsr2h
   688   00188E  ACDF               	btfss	indf2,6,c
   689   001890  D002               	bra	u3185
   690   001892  8F90               	bsf	led_init@my_pin& (0+255),7,b
   691   001894  D002               	bra	u3187
   692   001896                     u3185:
   693   001896  0100               	movlb	0	; () banked
   694   001898  9F90               	bcf	led_init@my_pin& (0+255),7,b
   695   00189A                     u3187:
   696   00189A                     
   697                           ; BSR set to: 0
   698                           ;ECU_L/LED/led.c: 7:     if(my_led == ((void*)0)){
   699   00189A  518D               	movf	led_init@my_led& (0+255),w,b
   700   00189C  118E               	iorwf	(led_init@my_led+1)& (0+255),w,b
   701   00189E  A4D8               	btfss	status,2,c
   702   0018A0  EF54  F00C         	goto	u3191
   703   0018A4  EF56  F00C         	goto	u3190
   704   0018A8                     u3191:
   705   0018A8  EF58  F00C         	goto	l4180
   706   0018AC                     u3190:
   707   0018AC                     
   708                           ; BSR set to: 0
   709                           ;ECU_L/LED/led.c: 9:     }
   710   0018AC  EF5E  F00C         	goto	l273
   711   0018B0                     l4180:
   712                           
   713                           ; BSR set to: 0
   714   0018B0  0E90               	movlw	low led_init@my_pin
   715   0018B2  6F8A               	movwf	gpio_pin_initialize@my_pin& (0+255),b
   716   0018B4  0E00               	movlw	high led_init@my_pin
   717   0018B6  6F8B               	movwf	(gpio_pin_initialize@my_pin+1)& (0+255),b
   718   0018B8  EC79  F00D         	call	_gpio_pin_initialize	;wreg free
   719   0018BC                     l273:
   720   0018BC  0012               	return		;funcret
   721   0018BE                     __end_of_led_init:
   722                           	callstack 0
   723                           
   724 ;; *************** function _gpio_pin_initialize *****************
   725 ;; Defined at:
   726 ;;		line 79 in file "MCAL/GPIO/gpio.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  my_pin          2   10[BANK0 ] PTR const struct .
   729 ;;		 -> relay_initialize@rel_pin(1), led_init@my_pin(1), 
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  ret             1   12[BANK0 ] unsigned char 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      unsigned char 
   734 ;; Registers used:
   735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   744 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   745 ;;Total ram usage:        3 bytes
   746 ;; Hardware stack levels used: 1
   747 ;; Hardware stack levels required when called: 6
   748 ;; This function calls:
   749 ;;		_gpio_pin_direction_init
   750 ;;		_gpio_pin_logic_write
   751 ;; This function is called by:
   752 ;;		_led_init
   753 ;;		_seven_segement_intialize
   754 ;;		_button_inittialze
   755 ;;		_dc_motor_initialize
   756 ;;		_keypad_initialize
   757 ;;		_relay_initialize
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           	psect	text2
   762   001AF2                     __ptext2:
   763                           	callstack 0
   764   001AF2                     _gpio_pin_initialize:
   765                           	callstack 23
   766   001AF2                     
   767                           ;MCAL/GPIO/gpio.c: 81:     if (((void*)0) == my_pin){
   768   001AF2  0100               	movlb	0	; () banked
   769   001AF4  518A               	movf	gpio_pin_initialize@my_pin& (0+255),w,b
   770   001AF6  118B               	iorwf	(gpio_pin_initialize@my_pin+1)& (0+255),w,b
   771   001AF8  A4D8               	btfss	status,2,c
   772   001AFA  EF81  F00D         	goto	u2931
   773   001AFE  EF83  F00D         	goto	u2930
   774   001B02                     u2931:
   775   001B02  EF87  F00D         	goto	l3872
   776   001B06                     u2930:
   777   001B06                     
   778                           ; BSR set to: 0
   779                           ;MCAL/GPIO/gpio.c: 82:         ret = (Std_ReturnType)0x00;
   780   001B06  0E00               	movlw	0
   781   001B08  6F8C               	movwf	gpio_pin_initialize@ret& (0+255),b
   782                           
   783                           ;MCAL/GPIO/gpio.c: 83:     }
   784   001B0A  EF9F  F00D         	goto	l3874
   785   001B0E                     l3872:
   786                           
   787                           ; BSR set to: 0
   788                           ;MCAL/GPIO/gpio.c: 85:         ret = gpio_pin_direction_init(my_pin);
   789   001B0E  C08A  F080         	movff	gpio_pin_initialize@my_pin,gpio_pin_direction_init@my_pin
   790   001B12  C08B  F081         	movff	gpio_pin_initialize@my_pin+1,gpio_pin_direction_init@my_pin+1
   791   001B16  EC66  F009         	call	_gpio_pin_direction_init	;wreg free
   792   001B1A  0100               	movlb	0	; () banked
   793   001B1C  6F8C               	movwf	gpio_pin_initialize@ret& (0+255),b
   794                           
   795                           ;MCAL/GPIO/gpio.c: 86:         ret = gpio_pin_logic_write(my_pin, my_pin->logic);
   796   001B1E  C08A  F080         	movff	gpio_pin_initialize@my_pin,gpio_pin_logic_write@my_pin
   797   001B22  C08B  F081         	movff	gpio_pin_initialize@my_pin+1,gpio_pin_logic_write@my_pin+1
   798   001B26  C08A  FFD9         	movff	gpio_pin_initialize@my_pin,fsr2l
   799   001B2A  C08B  FFDA         	movff	gpio_pin_initialize@my_pin+1,fsr2h
   800   001B2E  0E00               	movlw	0
   801   001B30  BEDF               	btfsc	indf2,7,c
   802   001B32  0E01               	movlw	1
   803   001B34  6F82               	movwf	gpio_pin_logic_write@logic& (0+255),b
   804   001B36  EC0B  F00A         	call	_gpio_pin_logic_write	;wreg free
   805   001B3A  0100               	movlb	0	; () banked
   806   001B3C  6F8C               	movwf	gpio_pin_initialize@ret& (0+255),b
   807   001B3E                     l3874:
   808                           
   809                           ; BSR set to: 0
   810                           ;MCAL/GPIO/gpio.c: 88:     return ret;
   811   001B3E  518C               	movf	gpio_pin_initialize@ret& (0+255),w,b
   812   001B40                     
   813                           ; BSR set to: 0
   814   001B40  0012               	return		;funcret
   815   001B42                     __end_of_gpio_pin_initialize:
   816                           	callstack 0
   817                           
   818 ;; *************** function _gpio_pin_logic_write *****************
   819 ;; Defined at:
   820 ;;		line 41 in file "MCAL/GPIO/gpio.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  my_pin          2    0[BANK0 ] PTR const struct .
   823 ;;		 -> relay_turn_off@rel_pin(1), relay_turn_on@rel_pin(1), relay_initialize@rel_pin(1), led_turn_off@my_pin(1), 
   824 ;;		 -> led_turn_on@my_pin(1), led_init@my_pin(1), 
   825 ;;  logic           1    2[BANK0 ] unsigned char 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  ret             1    9[BANK0 ] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      unsigned char 
   830 ;; Registers used:
   831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   837 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;Total ram usage:       10 bytes
   842 ;; Hardware stack levels used: 1
   843 ;; Hardware stack levels required when called: 5
   844 ;; This function calls:
   845 ;;		Nothing
   846 ;; This function is called by:
   847 ;;		_gpio_pin_initialize
   848 ;;		_seven_segement_write_number
   849 ;;		_dc_motor_move_right
   850 ;;		_dc_motor_move_left
   851 ;;		_dc_motor_stop
   852 ;;		_keypad_get_value
   853 ;;		_lcd_4bit_send_command
   854 ;;		_lcd_4bit_send_char_data
   855 ;;		_lcd_8bit_send_command
   856 ;;		_lcd_8bit_send_char_data
   857 ;;		_lcd_send_4bits
   858 ;;		_lcd_4bit_send_enable_signal
   859 ;;		_lcd_8bit_send_enable_signal
   860 ;;		_led_turn_on
   861 ;;		_led_turn_off
   862 ;;		_relay_turn_on
   863 ;;		_relay_turn_off
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           	psect	text3
   868   001416                     __ptext3:
   869                           	callstack 0
   870   001416                     _gpio_pin_logic_write:
   871                           	callstack 23
   872   001416                     
   873                           ;MCAL/GPIO/gpio.c: 42:     Std_ReturnType ret = (Std_ReturnType)0x01;
   874   001416  0E01               	movlw	1
   875   001418  0100               	movlb	0	; () banked
   876   00141A  6F89               	movwf	gpio_pin_logic_write@ret& (0+255),b
   877   00141C                     
   878                           ; BSR set to: 0
   879                           ;MCAL/GPIO/gpio.c: 43:     if ((((void*)0) == my_pin) || (my_pin->pin) > 7){
   880   00141C  5180               	movf	gpio_pin_logic_write@my_pin& (0+255),w,b
   881   00141E  1181               	iorwf	(gpio_pin_logic_write@my_pin+1)& (0+255),w,b
   882   001420  B4D8               	btfsc	status,2,c
   883   001422  EF15  F00A         	goto	u2801
   884   001426  EF17  F00A         	goto	u2800
   885   00142A                     u2801:
   886   00142A  EF28  F00A         	goto	l3788
   887   00142E                     u2800:
   888   00142E                     
   889                           ; BSR set to: 0
   890   00142E  C080  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   891   001432  C081  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   892   001436  30DF               	rrcf	223,w,c
   893   001438  32E8               	rrcf	wreg,f,c
   894   00143A  32E8               	rrcf	wreg,f,c
   895   00143C  0B07               	andlw	7
   896   00143E  6F83               	movwf	??_gpio_pin_logic_write& (0+255),b
   897   001440  0E07               	movlw	7
   898   001442  6583               	cpfsgt	??_gpio_pin_logic_write& (0+255),b
   899   001444  EF26  F00A         	goto	u2811
   900   001448  EF28  F00A         	goto	u2810
   901   00144C                     u2811:
   902   00144C  EF8D  F00A         	goto	l3796
   903   001450                     u2810:
   904   001450                     l3788:
   905                           
   906                           ; BSR set to: 0
   907                           ;MCAL/GPIO/gpio.c: 44:         ret = (Std_ReturnType)0x00;
   908   001450  0E00               	movlw	0
   909   001452  6F89               	movwf	gpio_pin_logic_write@ret& (0+255),b
   910                           
   911                           ;MCAL/GPIO/gpio.c: 45:     }
   912   001454  EFA2  F00A         	goto	l3798
   913   001458                     l3790:
   914                           
   915                           ; BSR set to: 0
   916                           ;MCAL/GPIO/gpio.c: 49:                 (*lat_regs[my_pin->port] &= ~(1<<my_pin->pin));
   917   001458  C080  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   918   00145C  C081  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   919   001460  30DF               	rrcf	223,w,c
   920   001462  32E8               	rrcf	wreg,f,c
   921   001464  32E8               	rrcf	wreg,f,c
   922   001466  0B07               	andlw	7
   923   001468  6F83               	movwf	??_gpio_pin_logic_write& (0+255),b
   924   00146A  0E01               	movlw	1
   925   00146C  6F84               	movwf	(??_gpio_pin_logic_write+1)& (0+255),b
   926   00146E  2B83               	incf	??_gpio_pin_logic_write& (0+255),f,b
   927   001470  EF3C  F00A         	goto	u2824
   928   001474                     u2825:
   929   001474  90D8               	bcf	status,0,c
   930   001476  3784               	rlcf	(??_gpio_pin_logic_write+1)& (0+255),f,b
   931   001478                     u2824:
   932   001478  2F83               	decfsz	??_gpio_pin_logic_write& (0+255),f,b
   933   00147A  EF3A  F00A         	goto	u2825
   934   00147E  0100               	movlb	0	; () banked
   935   001480  5184               	movf	(??_gpio_pin_logic_write+1)& (0+255),w,b
   936   001482  0AFF               	xorlw	255
   937   001484  6F85               	movwf	(??_gpio_pin_logic_write+2)& (0+255),b
   938   001486  C080  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   939   00148A  C081  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   940   00148E  50DF               	movf	223,w,c
   941   001490  0B07               	andlw	7
   942   001492  6F86               	movwf	(??_gpio_pin_logic_write+3)& (0+255),b
   943   001494  5186               	movf	(??_gpio_pin_logic_write+3)& (0+255),w,b
   944   001496  0D02               	mullw	2
   945   001498  0E01               	movlw	low _lat_regs
   946   00149A  24F3               	addwf	243,w,c
   947   00149C  6ED9               	movwf	fsr2l,c
   948   00149E  0E00               	movlw	high _lat_regs
   949   0014A0  20F4               	addwfc	prodh,w,c
   950   0014A2  6EDA               	movwf	fsr2h,c
   951   0014A4  CFDE F087          	movff	postinc2,??_gpio_pin_logic_write+4
   952   0014A8  CFDD F088          	movff	postdec2,??_gpio_pin_logic_write+5
   953   0014AC  C087  FFD9         	movff	??_gpio_pin_logic_write+4,fsr2l
   954   0014B0  C088  FFDA         	movff	??_gpio_pin_logic_write+5,fsr2h
   955   0014B4  5185               	movf	(??_gpio_pin_logic_write+2)& (0+255),w,b
   956   0014B6  16DF               	andwf	indf2,f,c
   957                           
   958                           ;MCAL/GPIO/gpio.c: 50:                 break;
   959   0014B8  EFA2  F00A         	goto	l3798
   960   0014BC                     l3792:
   961                           
   962                           ; BSR set to: 0
   963                           ;MCAL/GPIO/gpio.c: 52:                 (*lat_regs[my_pin->port] |=(1<<my_pin->pin));
   964   0014BC  C080  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   965   0014C0  C081  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   966   0014C4  30DF               	rrcf	223,w,c
   967   0014C6  32E8               	rrcf	wreg,f,c
   968   0014C8  32E8               	rrcf	wreg,f,c
   969   0014CA  0B07               	andlw	7
   970   0014CC  6F83               	movwf	??_gpio_pin_logic_write& (0+255),b
   971   0014CE  0E01               	movlw	1
   972   0014D0  6F84               	movwf	(??_gpio_pin_logic_write+1)& (0+255),b
   973   0014D2  2B83               	incf	??_gpio_pin_logic_write& (0+255),f,b
   974   0014D4  EF6E  F00A         	goto	u2834
   975   0014D8                     u2835:
   976   0014D8  90D8               	bcf	status,0,c
   977   0014DA  3784               	rlcf	(??_gpio_pin_logic_write+1)& (0+255),f,b
   978   0014DC                     u2834:
   979   0014DC  2F83               	decfsz	??_gpio_pin_logic_write& (0+255),f,b
   980   0014DE  EF6C  F00A         	goto	u2835
   981   0014E2  C080  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   982   0014E6  C081  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   983   0014EA  50DF               	movf	223,w,c
   984   0014EC  0B07               	andlw	7
   985   0014EE  0100               	movlb	0	; () banked
   986   0014F0  6F85               	movwf	(??_gpio_pin_logic_write+2)& (0+255),b
   987   0014F2  5185               	movf	(??_gpio_pin_logic_write+2)& (0+255),w,b
   988   0014F4  0D02               	mullw	2
   989   0014F6  0E01               	movlw	low _lat_regs
   990   0014F8  24F3               	addwf	243,w,c
   991   0014FA  6ED9               	movwf	fsr2l,c
   992   0014FC  0E00               	movlw	high _lat_regs
   993   0014FE  20F4               	addwfc	prodh,w,c
   994   001500  6EDA               	movwf	fsr2h,c
   995   001502  CFDE F086          	movff	postinc2,??_gpio_pin_logic_write+3
   996   001506  CFDD F087          	movff	postdec2,??_gpio_pin_logic_write+4
   997   00150A  C086  FFD9         	movff	??_gpio_pin_logic_write+3,fsr2l
   998   00150E  C087  FFDA         	movff	??_gpio_pin_logic_write+4,fsr2h
   999   001512  5184               	movf	(??_gpio_pin_logic_write+1)& (0+255),w,b
  1000   001514  12DF               	iorwf	indf2,f,c
  1001                           
  1002                           ;MCAL/GPIO/gpio.c: 53:                 break;
  1003   001516  EFA2  F00A         	goto	l3798
  1004   00151A                     l3796:
  1005                           
  1006                           ; BSR set to: 0
  1007   00151A  5182               	movf	gpio_pin_logic_write@logic& (0+255),w,b
  1008   00151C  6F83               	movwf	??_gpio_pin_logic_write& (0+255),b
  1009   00151E  6B84               	clrf	(??_gpio_pin_logic_write+1)& (0+255),b
  1010                           
  1011                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1012                           ; Switch size 1, requested type "simple"
  1013                           ; Number of cases is 1, Range of values is 0 to 0
  1014                           ; switch strategies available:
  1015                           ; Name         Instructions Cycles
  1016                           ; simple_byte            4     3 (average)
  1017                           ;	Chosen strategy is simple_byte
  1018   001520  5184               	movf	(??_gpio_pin_logic_write+1)& (0+255),w,b
  1019   001522  0A00               	xorlw	0	; case 0
  1020   001524  B4D8               	btfsc	status,2,c
  1021   001526  EF97  F00A         	goto	l4858
  1022   00152A  EF28  F00A         	goto	l3788
  1023   00152E                     l4858:
  1024                           
  1025                           ; BSR set to: 0
  1026                           ; Switch size 1, requested type "simple"
  1027                           ; Number of cases is 2, Range of values is 0 to 1
  1028                           ; switch strategies available:
  1029                           ; Name         Instructions Cycles
  1030                           ; simple_byte            7     4 (average)
  1031                           ;	Chosen strategy is simple_byte
  1032   00152E  5183               	movf	??_gpio_pin_logic_write& (0+255),w,b
  1033   001530  0A00               	xorlw	0	; case 0
  1034   001532  B4D8               	btfsc	status,2,c
  1035   001534  EF2C  F00A         	goto	l3790
  1036   001538  0A01               	xorlw	1	; case 1
  1037   00153A  B4D8               	btfsc	status,2,c
  1038   00153C  EF5E  F00A         	goto	l3792
  1039   001540  EF28  F00A         	goto	l3788
  1040   001544                     l3798:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;MCAL/GPIO/gpio.c: 57:     return ret;
  1044   001544  5189               	movf	gpio_pin_logic_write@ret& (0+255),w,b
  1045   001546                     
  1046                           ; BSR set to: 0
  1047   001546  0012               	return		;funcret
  1048   001548                     __end_of_gpio_pin_logic_write:
  1049                           	callstack 0
  1050                           
  1051 ;; *************** function _Interrupt_INTx_Init *****************
  1052 ;; Defined at:
  1053 ;;		line 29 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;  int_obj         2   12[BANK0 ] PTR const struct .
  1056 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  ret             1   14[BANK0 ] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      unsigned char 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1068 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;Total ram usage:        3 bytes
  1073 ;; Hardware stack levels used: 1
  1074 ;; Hardware stack levels required when called: 7
  1075 ;; This function calls:
  1076 ;;		_Interrupt_INTx_Clear_Flag
  1077 ;;		_Interrupt_INTx_Disable
  1078 ;;		_Interrupt_INTx_Edge_Init
  1079 ;;		_Interrupt_INTx_Enable
  1080 ;;		_Interrupt_INTx_Pin_Init
  1081 ;;		_Interrupt_INTx_SetInterruptHandler
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text4
  1088   0018BE                     __ptext4:
  1089                           	callstack 0
  1090   0018BE                     _Interrupt_INTx_Init:
  1091                           	callstack 23
  1092   0018BE                     
  1093                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 31:     if(((void*)0) == int_obj){
  1094   0018BE  0100               	movlb	0	; () banked
  1095   0018C0  518C               	movf	Interrupt_INTx_Init@int_obj& (0+255),w,b
  1096   0018C2  118D               	iorwf	(Interrupt_INTx_Init@int_obj+1)& (0+255),w,b
  1097   0018C4  A4D8               	btfss	status,2,c
  1098   0018C6  EF67  F00C         	goto	u3201
  1099   0018CA  EF69  F00C         	goto	u3200
  1100   0018CE                     u3201:
  1101   0018CE  EF6B  F00C         	goto	l4190
  1102   0018D2                     u3200:
  1103   0018D2                     
  1104                           ; BSR set to: 0
  1105                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 33:     }
  1106   0018D2  EF9B  F00C         	goto	l516
  1107   0018D6                     l4190:
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 35:         ret = Interrupt_INTx_Disable(int
      +                          _obj);
  1111   0018D6  C08C  F080         	movff	Interrupt_INTx_Init@int_obj,Interrupt_INTx_Disable@int_obj
  1112   0018DA  C08D  F081         	movff	Interrupt_INTx_Init@int_obj+1,Interrupt_INTx_Disable@int_obj+1
  1113   0018DE  ECD7  F00C         	call	_Interrupt_INTx_Disable	;wreg free
  1114   0018E2  0100               	movlb	0	; () banked
  1115   0018E4  6F8E               	movwf	Interrupt_INTx_Init@ret& (0+255),b
  1116                           
  1117                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 36:         ret |= Interrupt_INTx_Clear_Flag
      +                          (int_obj);
  1118   0018E6  C08C  F080         	movff	Interrupt_INTx_Init@int_obj,Interrupt_INTx_Clear_Flag@int_obj
  1119   0018EA  C08D  F081         	movff	Interrupt_INTx_Init@int_obj+1,Interrupt_INTx_Clear_Flag@int_obj+1
  1120   0018EE  EC11  F00D         	call	_Interrupt_INTx_Clear_Flag	;wreg free
  1121   0018F2  0100               	movlb	0	; () banked
  1122   0018F4  138E               	iorwf	Interrupt_INTx_Init@ret& (0+255),f,b
  1123                           
  1124                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 37:         ret |= Interrupt_INTx_Edge_Init(
      +                          int_obj);
  1125   0018F6  C08C  F080         	movff	Interrupt_INTx_Init@int_obj,Interrupt_INTx_Edge_Init@int_obj
  1126   0018FA  C08D  F081         	movff	Interrupt_INTx_Init@int_obj+1,Interrupt_INTx_Edge_Init@int_obj+1
  1127   0018FE  ECA4  F00A         	call	_Interrupt_INTx_Edge_Init	;wreg free
  1128   001902  0100               	movlb	0	; () banked
  1129   001904  138E               	iorwf	Interrupt_INTx_Init@ret& (0+255),f,b
  1130   001906                     
  1131                           ; BSR set to: 0
  1132                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 41:         ret |= Interrupt_INTx_Pin_Init(i
      +                          nt_obj);
  1133   001906  C08C  F089         	movff	Interrupt_INTx_Init@int_obj,Interrupt_INTx_Pin_Init@int_obj
  1134   00190A  C08D  F08A         	movff	Interrupt_INTx_Init@int_obj+1,Interrupt_INTx_Pin_Init@int_obj+1
  1135   00190E  ECD8  F00D         	call	_Interrupt_INTx_Pin_Init	;wreg free
  1136   001912  0100               	movlb	0	; () banked
  1137   001914  138E               	iorwf	Interrupt_INTx_Init@ret& (0+255),f,b
  1138   001916                     
  1139                           ; BSR set to: 0
  1140                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 42:         ret |= Interrupt_INTx_SetInterru
      +                          ptHandler(int_obj);
  1141   001916  C08C  F083         	movff	Interrupt_INTx_Init@int_obj,Interrupt_INTx_SetInterruptHandler@int_obj
  1142   00191A  C08D  F084         	movff	Interrupt_INTx_Init@int_obj+1,Interrupt_INTx_SetInterruptHandler@int_obj+1
  1143   00191E  EC3B  F00B         	call	_Interrupt_INTx_SetInterruptHandler	;wreg free
  1144   001922  0100               	movlb	0	; () banked
  1145   001924  138E               	iorwf	Interrupt_INTx_Init@ret& (0+255),f,b
  1146   001926                     
  1147                           ; BSR set to: 0
  1148                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 43:         ret |= Interrupt_INTx_Enable(int
      +                          _obj);
  1149   001926  C08C  F080         	movff	Interrupt_INTx_Init@int_obj,Interrupt_INTx_Enable@int_obj
  1150   00192A  C08D  F081         	movff	Interrupt_INTx_Init@int_obj+1,Interrupt_INTx_Enable@int_obj+1
  1151   00192E  ECE2  F00B         	call	_Interrupt_INTx_Enable	;wreg free
  1152   001932  0100               	movlb	0	; () banked
  1153   001934  138E               	iorwf	Interrupt_INTx_Init@ret& (0+255),f,b
  1154   001936                     l516:
  1155                           
  1156                           ; BSR set to: 0
  1157   001936  0012               	return		;funcret
  1158   001938                     __end_of_Interrupt_INTx_Init:
  1159                           	callstack 0
  1160                           
  1161 ;; *************** function _Interrupt_INTx_SetInterruptHandler *****************
  1162 ;; Defined at:
  1163 ;;		line 292 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  int_obj         2    3[BANK0 ] PTR const struct .
  1166 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  ret             1    7[BANK0 ] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      unsigned char 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1178 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;Total ram usage:        5 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; Hardware stack levels required when called: 6
  1185 ;; This function calls:
  1186 ;;		_INT0_SetInterruptHandler
  1187 ;;		_INT1_SetInterruptHandler
  1188 ;;		_INT2_SetInterruptHandler
  1189 ;; This function is called by:
  1190 ;;		_Interrupt_INTx_Init
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text5
  1195   001676                     __ptext5:
  1196                           	callstack 0
  1197   001676                     _Interrupt_INTx_SetInterruptHandler:
  1198                           	callstack 23
  1199   001676                     
  1200                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 294:     if(((void*)0) == int_obj){
  1201   001676  0100               	movlb	0	; () banked
  1202   001678  5183               	movf	Interrupt_INTx_SetInterruptHandler@int_obj& (0+255),w,b
  1203   00167A  1184               	iorwf	(Interrupt_INTx_SetInterruptHandler@int_obj+1)& (0+255),w,b
  1204   00167C  A4D8               	btfss	status,2,c
  1205   00167E  EF43  F00B         	goto	u3081
  1206   001682  EF45  F00B         	goto	u3080
  1207   001686                     u3081:
  1208   001686  EF73  F00B         	goto	l4056
  1209   00168A                     u3080:
  1210   00168A                     l4046:
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 295:         ret = (Std_ReturnType)0x00;
  1214   00168A  0E00               	movlw	0
  1215   00168C  6F87               	movwf	Interrupt_INTx_SetInterruptHandler@ret& (0+255),b
  1216                           
  1217                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 296:     }
  1218   00168E  EF92  F00B         	goto	l4058
  1219   001692                     l4048:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 301:                 ret = INT0_SetInterrupt
      +                          Handler(int_obj->EXT_InterruptHandler);
  1223   001692  C083  FFD9         	movff	Interrupt_INTx_SetInterruptHandler@int_obj,fsr2l
  1224   001696  C084  FFDA         	movff	Interrupt_INTx_SetInterruptHandler@int_obj+1,fsr2h
  1225   00169A  CFDE F080          	movff	postinc2,INT0_SetInterruptHandler@InterruptHandler
  1226   00169E  CFDD F081          	movff	postdec2,INT0_SetInterruptHandler@InterruptHandler+1
  1227   0016A2  EC63  F00E         	call	_INT0_SetInterruptHandler	;wreg free
  1228   0016A6  0100               	movlb	0	; () banked
  1229   0016A8  6F87               	movwf	Interrupt_INTx_SetInterruptHandler@ret& (0+255),b
  1230                           
  1231                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 302:                 break;
  1232   0016AA  EF92  F00B         	goto	l4058
  1233   0016AE                     l4050:
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 305:                 ret = INT1_SetInterrupt
      +                          Handler(int_obj->EXT_InterruptHandler);
  1237   0016AE  C083  FFD9         	movff	Interrupt_INTx_SetInterruptHandler@int_obj,fsr2l
  1238   0016B2  C084  FFDA         	movff	Interrupt_INTx_SetInterruptHandler@int_obj+1,fsr2h
  1239   0016B6  CFDE F080          	movff	postinc2,INT1_SetInterruptHandler@InterruptHandler
  1240   0016BA  CFDD F081          	movff	postdec2,INT1_SetInterruptHandler@InterruptHandler+1
  1241   0016BE  EC4D  F00E         	call	_INT1_SetInterruptHandler	;wreg free
  1242   0016C2  0100               	movlb	0	; () banked
  1243   0016C4  6F87               	movwf	Interrupt_INTx_SetInterruptHandler@ret& (0+255),b
  1244                           
  1245                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 306:                 break;
  1246   0016C6  EF92  F00B         	goto	l4058
  1247   0016CA                     l4052:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 309:                 ret = INT2_SetInterrupt
      +                          Handler(int_obj->EXT_InterruptHandler);
  1251   0016CA  C083  FFD9         	movff	Interrupt_INTx_SetInterruptHandler@int_obj,fsr2l
  1252   0016CE  C084  FFDA         	movff	Interrupt_INTx_SetInterruptHandler@int_obj+1,fsr2h
  1253   0016D2  CFDE F080          	movff	postinc2,INT2_SetInterruptHandler@InterruptHandler
  1254   0016D6  CFDD F081          	movff	postdec2,INT2_SetInterruptHandler@InterruptHandler+1
  1255   0016DA  EC37  F00E         	call	_INT2_SetInterruptHandler	;wreg free
  1256   0016DE  0100               	movlb	0	; () banked
  1257   0016E0  6F87               	movwf	Interrupt_INTx_SetInterruptHandler@ret& (0+255),b
  1258                           
  1259                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 310:                 break;
  1260   0016E2  EF92  F00B         	goto	l4058
  1261   0016E6                     l4056:
  1262                           
  1263                           ; BSR set to: 0
  1264   0016E6  EE20 F004          	lfsr	2,4
  1265   0016EA  5183               	movf	Interrupt_INTx_SetInterruptHandler@int_obj& (0+255),w,b
  1266   0016EC  26D9               	addwf	fsr2l,f,c
  1267   0016EE  5184               	movf	(Interrupt_INTx_SetInterruptHandler@int_obj+1)& (0+255),w,b
  1268   0016F0  22DA               	addwfc	fsr2h,f,c
  1269   0016F2  50DF               	movf	indf2,w,c
  1270   0016F4  6F85               	movwf	??_Interrupt_INTx_SetInterruptHandler& (0+255),b
  1271   0016F6  6B86               	clrf	(??_Interrupt_INTx_SetInterruptHandler+1)& (0+255),b
  1272                           
  1273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1274                           ; Switch size 1, requested type "simple"
  1275                           ; Number of cases is 1, Range of values is 0 to 0
  1276                           ; switch strategies available:
  1277                           ; Name         Instructions Cycles
  1278                           ; simple_byte            4     3 (average)
  1279                           ;	Chosen strategy is simple_byte
  1280   0016F8  5186               	movf	(??_Interrupt_INTx_SetInterruptHandler+1)& (0+255),w,b
  1281   0016FA  0A00               	xorlw	0	; case 0
  1282   0016FC  B4D8               	btfsc	status,2,c
  1283   0016FE  EF83  F00B         	goto	l4860
  1284   001702  EF45  F00B         	goto	l4046
  1285   001706                     l4860:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ; Switch size 1, requested type "simple"
  1289                           ; Number of cases is 3, Range of values is 0 to 2
  1290                           ; switch strategies available:
  1291                           ; Name         Instructions Cycles
  1292                           ; simple_byte           10     6 (average)
  1293                           ;	Chosen strategy is simple_byte
  1294   001706  5185               	movf	??_Interrupt_INTx_SetInterruptHandler& (0+255),w,b
  1295   001708  0A00               	xorlw	0	; case 0
  1296   00170A  B4D8               	btfsc	status,2,c
  1297   00170C  EF49  F00B         	goto	l4048
  1298   001710  0A01               	xorlw	1	; case 1
  1299   001712  B4D8               	btfsc	status,2,c
  1300   001714  EF57  F00B         	goto	l4050
  1301   001718  0A03               	xorlw	3	; case 2
  1302   00171A  B4D8               	btfsc	status,2,c
  1303   00171C  EF65  F00B         	goto	l4052
  1304   001720  EF45  F00B         	goto	l4046
  1305   001724                     l4058:
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 314:     return ret;
  1309   001724  5187               	movf	Interrupt_INTx_SetInterruptHandler@ret& (0+255),w,b
  1310   001726                     
  1311                           ; BSR set to: 0
  1312   001726  0012               	return		;funcret
  1313   001728                     __end_of_Interrupt_INTx_SetInterruptHandler:
  1314                           	callstack 0
  1315                           
  1316 ;; *************** function _INT2_SetInterruptHandler *****************
  1317 ;; Defined at:
  1318 ;;		line 281 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  1321 ;;		 -> Int2_APP_ISR(1), Int1_APP_ISR(1), Int0_APP_ISR(1), 
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;  ret             1    2[BANK0 ] unsigned char 
  1324 ;; Return value:  Size  Location     Type
  1325 ;;                  1    wreg      unsigned char 
  1326 ;; Registers used:
  1327 ;;		wreg, status,2, status,0
  1328 ;; Tracked objects:
  1329 ;;		On entry : 0/0
  1330 ;;		On exit  : 0/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1337 ;;Total ram usage:        3 bytes
  1338 ;; Hardware stack levels used: 1
  1339 ;; Hardware stack levels required when called: 5
  1340 ;; This function calls:
  1341 ;;		Nothing
  1342 ;; This function is called by:
  1343 ;;		_Interrupt_INTx_SetInterruptHandler
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           	psect	text6
  1348   001C6E                     __ptext6:
  1349                           	callstack 0
  1350   001C6E                     _INT2_SetInterruptHandler:
  1351                           	callstack 23
  1352   001C6E                     
  1353                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 282:     Std_ReturnType ret = (Std_ReturnTyp
      +                          e)0x01;
  1354   001C6E  0E01               	movlw	1
  1355   001C70  0100               	movlb	0	; () banked
  1356   001C72  6F82               	movwf	INT2_SetInterruptHandler@ret& (0+255),b
  1357   001C74                     
  1358                           ; BSR set to: 0
  1359                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 283:     if(((void*)0) == InterruptHandler){
  1360   001C74  5180               	movf	INT2_SetInterruptHandler@InterruptHandler& (0+255),w,b
  1361   001C76  1181               	iorwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),w,b
  1362   001C78  A4D8               	btfss	status,2,c
  1363   001C7A  EF41  F00E         	goto	u2921
  1364   001C7E  EF43  F00E         	goto	u2920
  1365   001C82                     u2921:
  1366   001C82  EF47  F00E         	goto	l3860
  1367   001C86                     u2920:
  1368   001C86                     
  1369                           ; BSR set to: 0
  1370                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 284:         ret = (Std_ReturnType)0x00;
  1371   001C86  0E00               	movlw	0
  1372   001C88  6F82               	movwf	INT2_SetInterruptHandler@ret& (0+255),b
  1373                           
  1374                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 285:     }
  1375   001C8A  EF4B  F00E         	goto	l3862
  1376   001C8E                     l3860:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 288:         INT2_InterruptHandler = Interru
      +                          ptHandler;
  1380   001C8E  C080  F04E         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  1381   001C92  C081  F04F         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  1382   001C96                     l3862:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 290:     return ret;
  1386   001C96  5182               	movf	INT2_SetInterruptHandler@ret& (0+255),w,b
  1387   001C98                     
  1388                           ; BSR set to: 0
  1389   001C98  0012               	return		;funcret
  1390   001C9A                     __end_of_INT2_SetInterruptHandler:
  1391                           	callstack 0
  1392                           
  1393 ;; *************** function _INT1_SetInterruptHandler *****************
  1394 ;; Defined at:
  1395 ;;		line 270 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  1398 ;;		 -> Int2_APP_ISR(1), Int1_APP_ISR(1), Int0_APP_ISR(1), 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  ret             1    2[BANK0 ] unsigned char 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      unsigned char 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1410 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;Total ram usage:        3 bytes
  1415 ;; Hardware stack levels used: 1
  1416 ;; Hardware stack levels required when called: 5
  1417 ;; This function calls:
  1418 ;;		Nothing
  1419 ;; This function is called by:
  1420 ;;		_Interrupt_INTx_SetInterruptHandler
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text7
  1425   001C9A                     __ptext7:
  1426                           	callstack 0
  1427   001C9A                     _INT1_SetInterruptHandler:
  1428                           	callstack 23
  1429   001C9A                     
  1430                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 271:     Std_ReturnType ret = (Std_ReturnTyp
      +                          e)0x01;
  1431   001C9A  0E01               	movlw	1
  1432   001C9C  0100               	movlb	0	; () banked
  1433   001C9E  6F82               	movwf	INT1_SetInterruptHandler@ret& (0+255),b
  1434   001CA0                     
  1435                           ; BSR set to: 0
  1436                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 272:     if(((void*)0) == InterruptHandler){
  1437   001CA0  5180               	movf	INT1_SetInterruptHandler@InterruptHandler& (0+255),w,b
  1438   001CA2  1181               	iorwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),w,b
  1439   001CA4  A4D8               	btfss	status,2,c
  1440   001CA6  EF57  F00E         	goto	u2911
  1441   001CAA  EF59  F00E         	goto	u2910
  1442   001CAE                     u2911:
  1443   001CAE  EF5D  F00E         	goto	l3848
  1444   001CB2                     u2910:
  1445   001CB2                     
  1446                           ; BSR set to: 0
  1447                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 273:         ret = (Std_ReturnType)0x00;
  1448   001CB2  0E00               	movlw	0
  1449   001CB4  6F82               	movwf	INT1_SetInterruptHandler@ret& (0+255),b
  1450                           
  1451                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 274:     }
  1452   001CB6  EF61  F00E         	goto	l3850
  1453   001CBA                     l3848:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 277:         INT1_InterruptHandler = Interru
      +                          ptHandler;
  1457   001CBA  C080  F050         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  1458   001CBE  C081  F051         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  1459   001CC2                     l3850:
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 279:     return ret;
  1463   001CC2  5182               	movf	INT1_SetInterruptHandler@ret& (0+255),w,b
  1464   001CC4                     
  1465                           ; BSR set to: 0
  1466   001CC4  0012               	return		;funcret
  1467   001CC6                     __end_of_INT1_SetInterruptHandler:
  1468                           	callstack 0
  1469                           
  1470 ;; *************** function _INT0_SetInterruptHandler *****************
  1471 ;; Defined at:
  1472 ;;		line 259 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  1475 ;;		 -> Int2_APP_ISR(1), Int1_APP_ISR(1), Int0_APP_ISR(1), 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  ret             1    2[BANK0 ] unsigned char 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      unsigned char 
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1487 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;Total ram usage:        3 bytes
  1492 ;; Hardware stack levels used: 1
  1493 ;; Hardware stack levels required when called: 5
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_Interrupt_INTx_SetInterruptHandler
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text8
  1502   001CC6                     __ptext8:
  1503                           	callstack 0
  1504   001CC6                     _INT0_SetInterruptHandler:
  1505                           	callstack 23
  1506   001CC6                     
  1507                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 260:     Std_ReturnType ret = (Std_ReturnTyp
      +                          e)0x01;
  1508   001CC6  0E01               	movlw	1
  1509   001CC8  0100               	movlb	0	; () banked
  1510   001CCA  6F82               	movwf	INT0_SetInterruptHandler@ret& (0+255),b
  1511   001CCC                     
  1512                           ; BSR set to: 0
  1513                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 261:     if(((void*)0) == InterruptHandler){
  1514   001CCC  5180               	movf	INT0_SetInterruptHandler@InterruptHandler& (0+255),w,b
  1515   001CCE  1181               	iorwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),w,b
  1516   001CD0  A4D8               	btfss	status,2,c
  1517   001CD2  EF6D  F00E         	goto	u2901
  1518   001CD6  EF6F  F00E         	goto	u2900
  1519   001CDA                     u2901:
  1520   001CDA  EF73  F00E         	goto	l3836
  1521   001CDE                     u2900:
  1522   001CDE                     
  1523                           ; BSR set to: 0
  1524                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 262:         ret = (Std_ReturnType)0x00;
  1525   001CDE  0E00               	movlw	0
  1526   001CE0  6F82               	movwf	INT0_SetInterruptHandler@ret& (0+255),b
  1527                           
  1528                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 263:     }
  1529   001CE2  EF77  F00E         	goto	l3838
  1530   001CE6                     l3836:
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 266:         INT0_InterruptHandler = Interru
      +                          ptHandler;
  1534   001CE6  C080  F052         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  1535   001CEA  C081  F053         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  1536   001CEE                     l3838:
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 268:     return ret;
  1540   001CEE  5182               	movf	INT0_SetInterruptHandler@ret& (0+255),w,b
  1541   001CF0                     
  1542                           ; BSR set to: 0
  1543   001CF0  0012               	return		;funcret
  1544   001CF2                     __end_of_INT0_SetInterruptHandler:
  1545                           	callstack 0
  1546                           
  1547 ;; *************** function _Interrupt_INTx_Pin_Init *****************
  1548 ;; Defined at:
  1549 ;;		line 226 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  int_obj         2    9[BANK0 ] PTR const struct .
  1552 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), 
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;  ret             1   11[BANK0 ] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      unsigned char 
  1557 ;; Registers used:
  1558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;Total ram usage:        3 bytes
  1569 ;; Hardware stack levels used: 1
  1570 ;; Hardware stack levels required when called: 6
  1571 ;; This function calls:
  1572 ;;		_gpio_pin_direction_init
  1573 ;; This function is called by:
  1574 ;;		_Interrupt_INTx_Init
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text9
  1579   001BB0                     __ptext9:
  1580                           	callstack 0
  1581   001BB0                     _Interrupt_INTx_Pin_Init:
  1582                           	callstack 23
  1583   001BB0                     
  1584                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 228:     if(((void*)0) == int_obj){
  1585   001BB0  0100               	movlb	0	; () banked
  1586   001BB2  5189               	movf	Interrupt_INTx_Pin_Init@int_obj& (0+255),w,b
  1587   001BB4  118A               	iorwf	(Interrupt_INTx_Pin_Init@int_obj+1)& (0+255),w,b
  1588   001BB6  A4D8               	btfss	status,2,c
  1589   001BB8  EFE0  F00D         	goto	u3071
  1590   001BBC  EFE2  F00D         	goto	u3070
  1591   001BC0                     u3071:
  1592   001BC0  EFE6  F00D         	goto	l4036
  1593   001BC4                     u3070:
  1594   001BC4                     
  1595                           ; BSR set to: 0
  1596                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 229:         ret = (Std_ReturnType)0x00;
  1597   001BC4  0E00               	movlw	0
  1598   001BC6  6F8B               	movwf	Interrupt_INTx_Pin_Init@ret& (0+255),b
  1599                           
  1600                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 230:     }
  1601   001BC8  EFF0  F00D         	goto	l4038
  1602   001BCC                     l4036:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 233:         ret = gpio_pin_direction_init(&
      +                          (int_obj->mcu_pin));
  1606   001BCC  0E02               	movlw	2
  1607   001BCE  2589               	addwf	Interrupt_INTx_Pin_Init@int_obj& (0+255),w,b
  1608   001BD0  6F80               	movwf	gpio_pin_direction_init@my_pin& (0+255),b
  1609   001BD2  0E00               	movlw	0
  1610   001BD4  218A               	addwfc	(Interrupt_INTx_Pin_Init@int_obj+1)& (0+255),w,b
  1611   001BD6  6F81               	movwf	(gpio_pin_direction_init@my_pin+1)& (0+255),b
  1612   001BD8  EC66  F009         	call	_gpio_pin_direction_init	;wreg free
  1613   001BDC  0100               	movlb	0	; () banked
  1614   001BDE  6F8B               	movwf	Interrupt_INTx_Pin_Init@ret& (0+255),b
  1615   001BE0                     l4038:
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 235:     return ret;
  1619   001BE0  518B               	movf	Interrupt_INTx_Pin_Init@ret& (0+255),w,b
  1620   001BE2                     
  1621                           ; BSR set to: 0
  1622   001BE2  0012               	return		;funcret
  1623   001BE4                     __end_of_Interrupt_INTx_Pin_Init:
  1624                           	callstack 0
  1625                           
  1626 ;; *************** function _gpio_pin_direction_init *****************
  1627 ;; Defined at:
  1628 ;;		line 13 in file "MCAL/GPIO/gpio.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  my_pin          2    0[BANK0 ] PTR const struct .
  1631 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), relay_initialize@rel_pin(1), 
  1632 ;;		 -> led_init@my_pin(1), 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  ret             1    8[BANK0 ] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      unsigned char 
  1637 ;; Registers used:
  1638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;Total ram usage:        9 bytes
  1649 ;; Hardware stack levels used: 1
  1650 ;; Hardware stack levels required when called: 5
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_gpio_pin_initialize
  1655 ;;		_Interrupt_INTx_Pin_Init
  1656 ;;		_keypad_initialize
  1657 ;;		_lcd_4bit_intialize
  1658 ;;		_lcd_8bit_intialize
  1659 ;;		_Interrupt_RBx_Init
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text10
  1664   0012CC                     __ptext10:
  1665                           	callstack 0
  1666   0012CC                     _gpio_pin_direction_init:
  1667                           	callstack 23
  1668   0012CC                     
  1669                           ;MCAL/GPIO/gpio.c: 14:     Std_ReturnType ret = (Std_ReturnType)0x01;
  1670   0012CC  0E01               	movlw	1
  1671   0012CE  0100               	movlb	0	; () banked
  1672   0012D0  6F88               	movwf	gpio_pin_direction_init@ret& (0+255),b
  1673   0012D2                     
  1674                           ; BSR set to: 0
  1675                           ;MCAL/GPIO/gpio.c: 15:     if(((void*)0) == my_pin || my_pin->pin > 7){
  1676   0012D2  5180               	movf	gpio_pin_direction_init@my_pin& (0+255),w,b
  1677   0012D4  1181               	iorwf	(gpio_pin_direction_init@my_pin+1)& (0+255),w,b
  1678   0012D6  B4D8               	btfsc	status,2,c
  1679   0012D8  EF70  F009         	goto	u2841
  1680   0012DC  EF72  F009         	goto	u2840
  1681   0012E0                     u2841:
  1682   0012E0  EF83  F009         	goto	l3812
  1683   0012E4                     u2840:
  1684   0012E4                     
  1685                           ; BSR set to: 0
  1686   0012E4  C080  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1687   0012E8  C081  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1688   0012EC  30DF               	rrcf	223,w,c
  1689   0012EE  32E8               	rrcf	wreg,f,c
  1690   0012F0  32E8               	rrcf	wreg,f,c
  1691   0012F2  0B07               	andlw	7
  1692   0012F4  6F82               	movwf	??_gpio_pin_direction_init& (0+255),b
  1693   0012F6  0E07               	movlw	7
  1694   0012F8  6582               	cpfsgt	??_gpio_pin_direction_init& (0+255),b
  1695   0012FA  EF81  F009         	goto	u2851
  1696   0012FE  EF83  F009         	goto	u2850
  1697   001302                     u2851:
  1698   001302  EFE8  F009         	goto	l3820
  1699   001306                     u2850:
  1700   001306                     l3812:
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;MCAL/GPIO/gpio.c: 16:         ret = (Std_ReturnType)0x00;
  1704   001306  0E00               	movlw	0
  1705   001308  6F88               	movwf	gpio_pin_direction_init@ret& (0+255),b
  1706                           
  1707                           ;MCAL/GPIO/gpio.c: 17:     }
  1708   00130A  EF09  F00A         	goto	l3822
  1709   00130E                     l3814:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;MCAL/GPIO/gpio.c: 21:                 (*tris_regs[my_pin->port] &= ~(1<<my_pin->pin));
  1713   00130E  C080  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1714   001312  C081  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1715   001316  30DF               	rrcf	223,w,c
  1716   001318  32E8               	rrcf	wreg,f,c
  1717   00131A  32E8               	rrcf	wreg,f,c
  1718   00131C  0B07               	andlw	7
  1719   00131E  6F82               	movwf	??_gpio_pin_direction_init& (0+255),b
  1720   001320  0E01               	movlw	1
  1721   001322  6F83               	movwf	(??_gpio_pin_direction_init+1)& (0+255),b
  1722   001324  2B82               	incf	??_gpio_pin_direction_init& (0+255),f,b
  1723   001326  EF97  F009         	goto	u2864
  1724   00132A                     u2865:
  1725   00132A  90D8               	bcf	status,0,c
  1726   00132C  3783               	rlcf	(??_gpio_pin_direction_init+1)& (0+255),f,b
  1727   00132E                     u2864:
  1728   00132E  2F82               	decfsz	??_gpio_pin_direction_init& (0+255),f,b
  1729   001330  EF95  F009         	goto	u2865
  1730   001334  0100               	movlb	0	; () banked
  1731   001336  5183               	movf	(??_gpio_pin_direction_init+1)& (0+255),w,b
  1732   001338  0AFF               	xorlw	255
  1733   00133A  6F84               	movwf	(??_gpio_pin_direction_init+2)& (0+255),b
  1734   00133C  C080  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1735   001340  C081  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1736   001344  50DF               	movf	223,w,c
  1737   001346  0B07               	andlw	7
  1738   001348  6F85               	movwf	(??_gpio_pin_direction_init+3)& (0+255),b
  1739   00134A  5185               	movf	(??_gpio_pin_direction_init+3)& (0+255),w,b
  1740   00134C  0D02               	mullw	2
  1741   00134E  0E15               	movlw	low _tris_regs
  1742   001350  24F3               	addwf	243,w,c
  1743   001352  6ED9               	movwf	fsr2l,c
  1744   001354  0E00               	movlw	high _tris_regs
  1745   001356  20F4               	addwfc	prodh,w,c
  1746   001358  6EDA               	movwf	fsr2h,c
  1747   00135A  CFDE F086          	movff	postinc2,??_gpio_pin_direction_init+4
  1748   00135E  CFDD F087          	movff	postdec2,??_gpio_pin_direction_init+5
  1749   001362  C086  FFD9         	movff	??_gpio_pin_direction_init+4,fsr2l
  1750   001366  C087  FFDA         	movff	??_gpio_pin_direction_init+5,fsr2h
  1751   00136A  5184               	movf	(??_gpio_pin_direction_init+2)& (0+255),w,b
  1752   00136C  16DF               	andwf	indf2,f,c
  1753                           
  1754                           ;MCAL/GPIO/gpio.c: 22:                 break;
  1755   00136E  EF09  F00A         	goto	l3822
  1756   001372                     l3816:
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;MCAL/GPIO/gpio.c: 24:                 (*tris_regs[my_pin->port] |=(1<<my_pin->pin));
  1760   001372  C080  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1761   001376  C081  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1762   00137A  30DF               	rrcf	223,w,c
  1763   00137C  32E8               	rrcf	wreg,f,c
  1764   00137E  32E8               	rrcf	wreg,f,c
  1765   001380  0B07               	andlw	7
  1766   001382  6F82               	movwf	??_gpio_pin_direction_init& (0+255),b
  1767   001384  0E01               	movlw	1
  1768   001386  6F83               	movwf	(??_gpio_pin_direction_init+1)& (0+255),b
  1769   001388  2B82               	incf	??_gpio_pin_direction_init& (0+255),f,b
  1770   00138A  EFC9  F009         	goto	u2874
  1771   00138E                     u2875:
  1772   00138E  90D8               	bcf	status,0,c
  1773   001390  3783               	rlcf	(??_gpio_pin_direction_init+1)& (0+255),f,b
  1774   001392                     u2874:
  1775   001392  2F82               	decfsz	??_gpio_pin_direction_init& (0+255),f,b
  1776   001394  EFC7  F009         	goto	u2875
  1777   001398  C080  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1778   00139C  C081  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1779   0013A0  50DF               	movf	223,w,c
  1780   0013A2  0B07               	andlw	7
  1781   0013A4  0100               	movlb	0	; () banked
  1782   0013A6  6F84               	movwf	(??_gpio_pin_direction_init+2)& (0+255),b
  1783   0013A8  5184               	movf	(??_gpio_pin_direction_init+2)& (0+255),w,b
  1784   0013AA  0D02               	mullw	2
  1785   0013AC  0E15               	movlw	low _tris_regs
  1786   0013AE  24F3               	addwf	243,w,c
  1787   0013B0  6ED9               	movwf	fsr2l,c
  1788   0013B2  0E00               	movlw	high _tris_regs
  1789   0013B4  20F4               	addwfc	prodh,w,c
  1790   0013B6  6EDA               	movwf	fsr2h,c
  1791   0013B8  CFDE F085          	movff	postinc2,??_gpio_pin_direction_init+3
  1792   0013BC  CFDD F086          	movff	postdec2,??_gpio_pin_direction_init+4
  1793   0013C0  C085  FFD9         	movff	??_gpio_pin_direction_init+3,fsr2l
  1794   0013C4  C086  FFDA         	movff	??_gpio_pin_direction_init+4,fsr2h
  1795   0013C8  5183               	movf	(??_gpio_pin_direction_init+1)& (0+255),w,b
  1796   0013CA  12DF               	iorwf	indf2,f,c
  1797                           
  1798                           ;MCAL/GPIO/gpio.c: 25:                 break;
  1799   0013CC  EF09  F00A         	goto	l3822
  1800   0013D0                     l3820:
  1801                           
  1802                           ; BSR set to: 0
  1803   0013D0  C080  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1804   0013D4  C081  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1805   0013D8  BCDF               	btfsc	indf2,6,c
  1806   0013DA  EFF1  F009         	goto	u2881
  1807   0013DE  EFF4  F009         	goto	u2880
  1808   0013E2                     u2881:
  1809   0013E2  0E01               	movlw	1
  1810   0013E4  EFF5  F009         	goto	u2890
  1811   0013E8                     u2880:
  1812   0013E8  0E00               	movlw	0
  1813   0013EA                     u2890:
  1814   0013EA  6F82               	movwf	??_gpio_pin_direction_init& (0+255),b
  1815   0013EC  6B83               	clrf	(??_gpio_pin_direction_init+1)& (0+255),b
  1816                           
  1817                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1818                           ; Switch size 1, requested type "simple"
  1819                           ; Number of cases is 1, Range of values is 0 to 0
  1820                           ; switch strategies available:
  1821                           ; Name         Instructions Cycles
  1822                           ; simple_byte            4     3 (average)
  1823                           ;	Chosen strategy is simple_byte
  1824   0013EE  5183               	movf	(??_gpio_pin_direction_init+1)& (0+255),w,b
  1825   0013F0  0A00               	xorlw	0	; case 0
  1826   0013F2  B4D8               	btfsc	status,2,c
  1827   0013F4  EFFE  F009         	goto	l4862
  1828   0013F8  EF83  F009         	goto	l3812
  1829   0013FC                     l4862:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ; Switch size 1, requested type "simple"
  1833                           ; Number of cases is 2, Range of values is 0 to 1
  1834                           ; switch strategies available:
  1835                           ; Name         Instructions Cycles
  1836                           ; simple_byte            7     4 (average)
  1837                           ;	Chosen strategy is simple_byte
  1838   0013FC  5182               	movf	??_gpio_pin_direction_init& (0+255),w,b
  1839   0013FE  0A00               	xorlw	0	; case 0
  1840   001400  B4D8               	btfsc	status,2,c
  1841   001402  EF87  F009         	goto	l3814
  1842   001406  0A01               	xorlw	1	; case 1
  1843   001408  B4D8               	btfsc	status,2,c
  1844   00140A  EFB9  F009         	goto	l3816
  1845   00140E  EF83  F009         	goto	l3812
  1846   001412                     l3822:
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;MCAL/GPIO/gpio.c: 29:     return ret;
  1850   001412  5188               	movf	gpio_pin_direction_init@ret& (0+255),w,b
  1851   001414                     
  1852                           ; BSR set to: 0
  1853   001414  0012               	return		;funcret
  1854   001416                     __end_of_gpio_pin_direction_init:
  1855                           	callstack 0
  1856                           
  1857 ;; *************** function _Interrupt_INTx_Enable *****************
  1858 ;; Defined at:
  1859 ;;		line 100 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  int_obj         2    0[BANK0 ] PTR const struct .
  1862 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;  ret             1    4[BANK0 ] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      unsigned char 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1874 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;Total ram usage:        5 bytes
  1879 ;; Hardware stack levels used: 1
  1880 ;; Hardware stack levels required when called: 5
  1881 ;; This function calls:
  1882 ;;		Nothing
  1883 ;; This function is called by:
  1884 ;;		_Interrupt_INTx_Init
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text11
  1889   0017C4                     __ptext11:
  1890                           	callstack 0
  1891   0017C4                     _Interrupt_INTx_Enable:
  1892                           	callstack 24
  1893   0017C4                     
  1894                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 101:     Std_ReturnType ret = (Std_ReturnTyp
      +                          e)0x01;
  1895   0017C4  0E01               	movlw	1
  1896   0017C6  0100               	movlb	0	; () banked
  1897   0017C8  6F84               	movwf	Interrupt_INTx_Enable@ret& (0+255),b
  1898   0017CA                     
  1899                           ; BSR set to: 0
  1900                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 102:     if(((void*)0) == int_obj){
  1901   0017CA  5180               	movf	Interrupt_INTx_Enable@int_obj& (0+255),w,b
  1902   0017CC  1181               	iorwf	(Interrupt_INTx_Enable@int_obj+1)& (0+255),w,b
  1903   0017CE  A4D8               	btfss	status,2,c
  1904   0017D0  EFEC  F00B         	goto	u3091
  1905   0017D4  EFEE  F00B         	goto	u3090
  1906   0017D8                     u3091:
  1907   0017D8  EF01  F00C         	goto	l4074
  1908   0017DC                     u3090:
  1909   0017DC                     l4070:
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 103:         ret = (Std_ReturnType)0x00;
  1913   0017DC  0E00               	movlw	0
  1914   0017DE  6F84               	movwf	Interrupt_INTx_Enable@ret& (0+255),b
  1915                           
  1916                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 104:     }
  1917   0017E0  EF20  F00C         	goto	l4076
  1918   0017E4                     l534:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 111:                 (INTCONbits.GIE = 1);
  1922   0017E4  8EF2               	bsf	242,7,c	;volatile
  1923                           
  1924                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 112:                 (INTCONbits.PEIE = 1);
  1925   0017E6  8CF2               	bsf	242,6,c	;volatile
  1926                           
  1927                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 114:                 (INTCONbits.INT0IE = 1)
      +                          ;
  1928   0017E8  88F2               	bsf	242,4,c	;volatile
  1929                           
  1930                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 115:                 break;
  1931   0017EA  EF20  F00C         	goto	l4076
  1932   0017EE                     l536:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 127:                 (INTCONbits.GIE = 1);
  1936   0017EE  8EF2               	bsf	242,7,c	;volatile
  1937                           
  1938                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 128:                 (INTCONbits.PEIE = 1);
  1939   0017F0  8CF2               	bsf	242,6,c	;volatile
  1940                           
  1941                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 130:                 (INTCON3bits.INT1IE = 1
      +                          );
  1942   0017F2  86F0               	bsf	240,3,c	;volatile
  1943                           
  1944                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 131:                 break;
  1945   0017F4  EF20  F00C         	goto	l4076
  1946   0017F8                     l537:
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 143:                 (INTCONbits.GIE = 1);
  1950   0017F8  8EF2               	bsf	242,7,c	;volatile
  1951                           
  1952                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 144:                 (INTCONbits.PEIE = 1);
  1953   0017FA  8CF2               	bsf	242,6,c	;volatile
  1954                           
  1955                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 146:                 (INTCON3bits.INT2IE = 1
      +                          );
  1956   0017FC  88F0               	bsf	240,4,c	;volatile
  1957                           
  1958                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 147:                 break;
  1959   0017FE  EF20  F00C         	goto	l4076
  1960   001802                     l4074:
  1961                           
  1962                           ; BSR set to: 0
  1963   001802  EE20 F004          	lfsr	2,4
  1964   001806  5180               	movf	Interrupt_INTx_Enable@int_obj& (0+255),w,b
  1965   001808  26D9               	addwf	fsr2l,f,c
  1966   00180A  5181               	movf	(Interrupt_INTx_Enable@int_obj+1)& (0+255),w,b
  1967   00180C  22DA               	addwfc	fsr2h,f,c
  1968   00180E  50DF               	movf	indf2,w,c
  1969   001810  6F82               	movwf	??_Interrupt_INTx_Enable& (0+255),b
  1970   001812  6B83               	clrf	(??_Interrupt_INTx_Enable+1)& (0+255),b
  1971                           
  1972                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1973                           ; Switch size 1, requested type "simple"
  1974                           ; Number of cases is 1, Range of values is 0 to 0
  1975                           ; switch strategies available:
  1976                           ; Name         Instructions Cycles
  1977                           ; simple_byte            4     3 (average)
  1978                           ;	Chosen strategy is simple_byte
  1979   001814  5183               	movf	(??_Interrupt_INTx_Enable+1)& (0+255),w,b
  1980   001816  0A00               	xorlw	0	; case 0
  1981   001818  B4D8               	btfsc	status,2,c
  1982   00181A  EF11  F00C         	goto	l4864
  1983   00181E  EFEE  F00B         	goto	l4070
  1984   001822                     l4864:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ; Switch size 1, requested type "simple"
  1988                           ; Number of cases is 3, Range of values is 0 to 2
  1989                           ; switch strategies available:
  1990                           ; Name         Instructions Cycles
  1991                           ; simple_byte           10     6 (average)
  1992                           ;	Chosen strategy is simple_byte
  1993   001822  5182               	movf	??_Interrupt_INTx_Enable& (0+255),w,b
  1994   001824  0A00               	xorlw	0	; case 0
  1995   001826  B4D8               	btfsc	status,2,c
  1996   001828  EFF2  F00B         	goto	l534
  1997   00182C  0A01               	xorlw	1	; case 1
  1998   00182E  B4D8               	btfsc	status,2,c
  1999   001830  EFF7  F00B         	goto	l536
  2000   001834  0A03               	xorlw	3	; case 2
  2001   001836  B4D8               	btfsc	status,2,c
  2002   001838  EFFC  F00B         	goto	l537
  2003   00183C  EFEE  F00B         	goto	l4070
  2004   001840                     l4076:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 151:     return ret;
  2008   001840  5184               	movf	Interrupt_INTx_Enable@ret& (0+255),w,b
  2009   001842                     
  2010                           ; BSR set to: 0
  2011   001842  0012               	return		;funcret
  2012   001844                     __end_of_Interrupt_INTx_Enable:
  2013                           	callstack 0
  2014                           
  2015 ;; *************** function _Interrupt_INTx_Edge_Init *****************
  2016 ;; Defined at:
  2017 ;;		line 199 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  int_obj         2    0[BANK0 ] PTR const struct .
  2020 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  ret             1    4[BANK0 ] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      unsigned char 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;Total ram usage:        5 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 5
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_Interrupt_INTx_Init
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text12
  2047   001548                     __ptext12:
  2048                           	callstack 0
  2049   001548                     _Interrupt_INTx_Edge_Init:
  2050                           	callstack 24
  2051   001548                     
  2052                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 200:     Std_ReturnType ret = (Std_ReturnTyp
      +                          e)0x01;
  2053   001548  0E01               	movlw	1
  2054   00154A  0100               	movlb	0	; () banked
  2055   00154C  6F84               	movwf	Interrupt_INTx_Edge_Init@ret& (0+255),b
  2056   00154E                     
  2057                           ; BSR set to: 0
  2058                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 201:     if(((void*)0) == int_obj){
  2059   00154E  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2060   001550  1181               	iorwf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2061   001552  A4D8               	btfss	status,2,c
  2062   001554  EFAE  F00A         	goto	u3001
  2063   001558  EFB0  F00A         	goto	u3000
  2064   00155C                     u3001:
  2065   00155C  EF1A  F00B         	goto	l4020
  2066   001560                     u3000:
  2067   001560                     l3992:
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 202:         ret = (Std_ReturnType)0x00;
  2071   001560  0E00               	movlw	0
  2072   001562  6F84               	movwf	Interrupt_INTx_Edge_Init@ret& (0+255),b
  2073                           
  2074                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 203:     }
  2075   001564  EF39  F00B         	goto	l4022
  2076   001568                     l3994:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 207:                 if(INTERRUPT_FALLING_ED
      +                          GE == int_obj->edge){ (INTCON2bits.INTEDG0 = 0); }
  2080   001568  EE20 F003          	lfsr	2,3
  2081   00156C  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2082   00156E  26D9               	addwf	fsr2l,f,c
  2083   001570  5181               	movf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2084   001572  22DA               	addwfc	fsr2h,f,c
  2085   001574  50DF               	movf	indf2,w,c
  2086   001576  A4D8               	btfss	status,2,c
  2087   001578  EFC0  F00A         	goto	u3011
  2088   00157C  EFC2  F00A         	goto	u3010
  2089   001580                     u3011:
  2090   001580  EFC5  F00A         	goto	l3998
  2091   001584                     u3010:
  2092   001584                     
  2093                           ; BSR set to: 0
  2094   001584  9CF1               	bcf	241,6,c	;volatile
  2095   001586  EF39  F00B         	goto	l4022
  2096   00158A                     l3998:
  2097                           
  2098                           ; BSR set to: 0
  2099   00158A  EE20 F003          	lfsr	2,3
  2100   00158E  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2101   001590  26D9               	addwf	fsr2l,f,c
  2102   001592  5181               	movf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2103   001594  22DA               	addwfc	fsr2h,f,c
  2104   001596  04DE               	decf	postinc2,w,c
  2105   001598  A4D8               	btfss	status,2,c
  2106   00159A  EFD1  F00A         	goto	u3021
  2107   00159E  EFD3  F00A         	goto	u3020
  2108   0015A2                     u3021:
  2109   0015A2  EF39  F00B         	goto	l561
  2110   0015A6                     u3020:
  2111   0015A6                     
  2112                           ; BSR set to: 0
  2113   0015A6  8CF1               	bsf	241,6,c	;volatile
  2114   0015A8  EF39  F00B         	goto	l4022
  2115   0015AC                     l4002:
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 212:                 if(INTERRUPT_FALLING_ED
      +                          GE == int_obj->edge){ (INTCON2bits.INTEDG1 = 0); }
  2119   0015AC  EE20 F003          	lfsr	2,3
  2120   0015B0  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2121   0015B2  26D9               	addwf	fsr2l,f,c
  2122   0015B4  5181               	movf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2123   0015B6  22DA               	addwfc	fsr2h,f,c
  2124   0015B8  50DF               	movf	indf2,w,c
  2125   0015BA  A4D8               	btfss	status,2,c
  2126   0015BC  EFE2  F00A         	goto	u3031
  2127   0015C0  EFE4  F00A         	goto	u3030
  2128   0015C4                     u3031:
  2129   0015C4  EFE7  F00A         	goto	l4006
  2130   0015C8                     u3030:
  2131   0015C8                     
  2132                           ; BSR set to: 0
  2133   0015C8  9AF1               	bcf	241,5,c	;volatile
  2134   0015CA  EF39  F00B         	goto	l4022
  2135   0015CE                     l4006:
  2136                           
  2137                           ; BSR set to: 0
  2138   0015CE  EE20 F003          	lfsr	2,3
  2139   0015D2  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2140   0015D4  26D9               	addwf	fsr2l,f,c
  2141   0015D6  5181               	movf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2142   0015D8  22DA               	addwfc	fsr2h,f,c
  2143   0015DA  04DE               	decf	postinc2,w,c
  2144   0015DC  A4D8               	btfss	status,2,c
  2145   0015DE  EFF3  F00A         	goto	u3041
  2146   0015E2  EFF5  F00A         	goto	u3040
  2147   0015E6                     u3041:
  2148   0015E6  EF39  F00B         	goto	l4022
  2149   0015EA                     u3040:
  2150   0015EA                     
  2151                           ; BSR set to: 0
  2152   0015EA  8AF1               	bsf	241,5,c	;volatile
  2153   0015EC  EF39  F00B         	goto	l4022
  2154   0015F0                     l4010:
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 217:                 if(INTERRUPT_FALLING_ED
      +                          GE == int_obj->edge){ (INTCON2bits.INTEDG2 = 0); }
  2158   0015F0  EE20 F003          	lfsr	2,3
  2159   0015F4  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2160   0015F6  26D9               	addwf	fsr2l,f,c
  2161   0015F8  5181               	movf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2162   0015FA  22DA               	addwfc	fsr2h,f,c
  2163   0015FC  50DF               	movf	indf2,w,c
  2164   0015FE  A4D8               	btfss	status,2,c
  2165   001600  EF04  F00B         	goto	u3051
  2166   001604  EF06  F00B         	goto	u3050
  2167   001608                     u3051:
  2168   001608  EF09  F00B         	goto	l4014
  2169   00160C                     u3050:
  2170   00160C                     
  2171                           ; BSR set to: 0
  2172   00160C  98F1               	bcf	241,4,c	;volatile
  2173   00160E  EF39  F00B         	goto	l4022
  2174   001612                     l4014:
  2175                           
  2176                           ; BSR set to: 0
  2177   001612  EE20 F003          	lfsr	2,3
  2178   001616  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2179   001618  26D9               	addwf	fsr2l,f,c
  2180   00161A  5181               	movf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2181   00161C  22DA               	addwfc	fsr2h,f,c
  2182   00161E  04DE               	decf	postinc2,w,c
  2183   001620  A4D8               	btfss	status,2,c
  2184   001622  EF15  F00B         	goto	u3061
  2185   001626  EF17  F00B         	goto	u3060
  2186   00162A                     u3061:
  2187   00162A  EF39  F00B         	goto	l4022
  2188   00162E                     u3060:
  2189   00162E                     
  2190                           ; BSR set to: 0
  2191   00162E  88F1               	bsf	241,4,c	;volatile
  2192   001630  EF39  F00B         	goto	l4022
  2193   001634                     l4020:
  2194                           
  2195                           ; BSR set to: 0
  2196   001634  EE20 F004          	lfsr	2,4
  2197   001638  5180               	movf	Interrupt_INTx_Edge_Init@int_obj& (0+255),w,b
  2198   00163A  26D9               	addwf	fsr2l,f,c
  2199   00163C  5181               	movf	(Interrupt_INTx_Edge_Init@int_obj+1)& (0+255),w,b
  2200   00163E  22DA               	addwfc	fsr2h,f,c
  2201   001640  50DF               	movf	indf2,w,c
  2202   001642  6F82               	movwf	??_Interrupt_INTx_Edge_Init& (0+255),b
  2203   001644  6B83               	clrf	(??_Interrupt_INTx_Edge_Init+1)& (0+255),b
  2204                           
  2205                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2206                           ; Switch size 1, requested type "simple"
  2207                           ; Number of cases is 1, Range of values is 0 to 0
  2208                           ; switch strategies available:
  2209                           ; Name         Instructions Cycles
  2210                           ; simple_byte            4     3 (average)
  2211                           ;	Chosen strategy is simple_byte
  2212   001646  5183               	movf	(??_Interrupt_INTx_Edge_Init+1)& (0+255),w,b
  2213   001648  0A00               	xorlw	0	; case 0
  2214   00164A  B4D8               	btfsc	status,2,c
  2215   00164C  EF2A  F00B         	goto	l4866
  2216   001650  EFB0  F00A         	goto	l3992
  2217   001654                     l4866:
  2218                           
  2219                           ; BSR set to: 0
  2220                           ; Switch size 1, requested type "simple"
  2221                           ; Number of cases is 3, Range of values is 0 to 2
  2222                           ; switch strategies available:
  2223                           ; Name         Instructions Cycles
  2224                           ; simple_byte           10     6 (average)
  2225                           ;	Chosen strategy is simple_byte
  2226   001654  5182               	movf	??_Interrupt_INTx_Edge_Init& (0+255),w,b
  2227   001656  0A00               	xorlw	0	; case 0
  2228   001658  B4D8               	btfsc	status,2,c
  2229   00165A  EFB4  F00A         	goto	l3994
  2230   00165E  0A01               	xorlw	1	; case 1
  2231   001660  B4D8               	btfsc	status,2,c
  2232   001662  EFD6  F00A         	goto	l4002
  2233   001666  0A03               	xorlw	3	; case 2
  2234   001668  B4D8               	btfsc	status,2,c
  2235   00166A  EFF8  F00A         	goto	l4010
  2236   00166E  EFB0  F00A         	goto	l3992
  2237   001672                     l561:
  2238   001672                     l4022:
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 224:     return ret;
  2242   001672  5184               	movf	Interrupt_INTx_Edge_Init@ret& (0+255),w,b
  2243   001674                     
  2244                           ; BSR set to: 0
  2245   001674  0012               	return		;funcret
  2246   001676                     __end_of_Interrupt_INTx_Edge_Init:
  2247                           	callstack 0
  2248                           
  2249 ;; *************** function _Interrupt_INTx_Disable *****************
  2250 ;; Defined at:
  2251 ;;		line 153 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  int_obj         2    0[BANK0 ] PTR const struct .
  2254 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  ret             1    4[BANK0 ] unsigned char 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      unsigned char 
  2259 ;; Registers used:
  2260 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2266 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;Total ram usage:        5 bytes
  2271 ;; Hardware stack levels used: 1
  2272 ;; Hardware stack levels required when called: 5
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_Interrupt_INTx_Init
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text13
  2281   0019AE                     __ptext13:
  2282                           	callstack 0
  2283   0019AE                     _Interrupt_INTx_Disable:
  2284                           	callstack 24
  2285   0019AE                     
  2286                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 154:     Std_ReturnType ret = (Std_ReturnTyp
      +                          e)0x01;
  2287   0019AE  0E01               	movlw	1
  2288   0019B0  0100               	movlb	0	; () banked
  2289   0019B2  6F84               	movwf	Interrupt_INTx_Disable@ret& (0+255),b
  2290   0019B4                     
  2291                           ; BSR set to: 0
  2292                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 155:     if(((void*)0) == int_obj){
  2293   0019B4  5180               	movf	Interrupt_INTx_Disable@int_obj& (0+255),w,b
  2294   0019B6  1181               	iorwf	(Interrupt_INTx_Disable@int_obj+1)& (0+255),w,b
  2295   0019B8  A4D8               	btfss	status,2,c
  2296   0019BA  EFE1  F00C         	goto	u2981
  2297   0019BE  EFE3  F00C         	goto	u2980
  2298   0019C2                     u2981:
  2299   0019C2  EFF0  F00C         	goto	l3956
  2300   0019C6                     u2980:
  2301   0019C6                     l3952:
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 156:         ret = (Std_ReturnType)0x00;
  2305   0019C6  0E00               	movlw	0
  2306   0019C8  6F84               	movwf	Interrupt_INTx_Disable@ret& (0+255),b
  2307                           
  2308                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 157:     }
  2309   0019CA  EF0F  F00D         	goto	l3958
  2310   0019CE                     l545:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 161:                 (INTCONbits.INT0IE = 0)
      +                          ;
  2314   0019CE  98F2               	bcf	242,4,c	;volatile
  2315                           
  2316                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 162:                 break;
  2317   0019D0  EF0F  F00D         	goto	l3958
  2318   0019D4                     l547:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 164:                 (INTCON3bits.INT1IE = 0
      +                          );
  2322   0019D4  96F0               	bcf	240,3,c	;volatile
  2323                           
  2324                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 165:                 break;
  2325   0019D6  EF0F  F00D         	goto	l3958
  2326   0019DA                     l548:
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 167:                 (INTCON3bits.INT2IE = 0
      +                          );
  2330   0019DA  98F0               	bcf	240,4,c	;volatile
  2331                           
  2332                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 168:                 break;
  2333   0019DC  EF0F  F00D         	goto	l3958
  2334   0019E0                     l3956:
  2335                           
  2336                           ; BSR set to: 0
  2337   0019E0  EE20 F004          	lfsr	2,4
  2338   0019E4  5180               	movf	Interrupt_INTx_Disable@int_obj& (0+255),w,b
  2339   0019E6  26D9               	addwf	fsr2l,f,c
  2340   0019E8  5181               	movf	(Interrupt_INTx_Disable@int_obj+1)& (0+255),w,b
  2341   0019EA  22DA               	addwfc	fsr2h,f,c
  2342   0019EC  50DF               	movf	indf2,w,c
  2343   0019EE  6F82               	movwf	??_Interrupt_INTx_Disable& (0+255),b
  2344   0019F0  6B83               	clrf	(??_Interrupt_INTx_Disable+1)& (0+255),b
  2345                           
  2346                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2347                           ; Switch size 1, requested type "simple"
  2348                           ; Number of cases is 1, Range of values is 0 to 0
  2349                           ; switch strategies available:
  2350                           ; Name         Instructions Cycles
  2351                           ; simple_byte            4     3 (average)
  2352                           ;	Chosen strategy is simple_byte
  2353   0019F2  5183               	movf	(??_Interrupt_INTx_Disable+1)& (0+255),w,b
  2354   0019F4  0A00               	xorlw	0	; case 0
  2355   0019F6  B4D8               	btfsc	status,2,c
  2356   0019F8  EF00  F00D         	goto	l4868
  2357   0019FC  EFE3  F00C         	goto	l3952
  2358   001A00                     l4868:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ; Switch size 1, requested type "simple"
  2362                           ; Number of cases is 3, Range of values is 0 to 2
  2363                           ; switch strategies available:
  2364                           ; Name         Instructions Cycles
  2365                           ; simple_byte           10     6 (average)
  2366                           ;	Chosen strategy is simple_byte
  2367   001A00  5182               	movf	??_Interrupt_INTx_Disable& (0+255),w,b
  2368   001A02  0A00               	xorlw	0	; case 0
  2369   001A04  B4D8               	btfsc	status,2,c
  2370   001A06  EFE7  F00C         	goto	l545
  2371   001A0A  0A01               	xorlw	1	; case 1
  2372   001A0C  B4D8               	btfsc	status,2,c
  2373   001A0E  EFEA  F00C         	goto	l547
  2374   001A12  0A03               	xorlw	3	; case 2
  2375   001A14  B4D8               	btfsc	status,2,c
  2376   001A16  EFED  F00C         	goto	l548
  2377   001A1A  EFE3  F00C         	goto	l3952
  2378   001A1E                     l3958:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 172:     return ret;
  2382   001A1E  5184               	movf	Interrupt_INTx_Disable@ret& (0+255),w,b
  2383   001A20                     
  2384                           ; BSR set to: 0
  2385   001A20  0012               	return		;funcret
  2386   001A22                     __end_of_Interrupt_INTx_Disable:
  2387                           	callstack 0
  2388                           
  2389 ;; *************** function _Interrupt_INTx_Clear_Flag *****************
  2390 ;; Defined at:
  2391 ;;		line 237 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  int_obj         2    0[BANK0 ] PTR const struct .
  2394 ;;		 -> int2_obj(6), int1_obj(6), int0_obj(6), 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  ret             1    4[BANK0 ] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      unsigned char 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:        5 bytes
  2411 ;; Hardware stack levels used: 1
  2412 ;; Hardware stack levels required when called: 5
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_Interrupt_INTx_Init
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text14
  2421   001A22                     __ptext14:
  2422                           	callstack 0
  2423   001A22                     _Interrupt_INTx_Clear_Flag:
  2424                           	callstack 24
  2425   001A22                     
  2426                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 238:     Std_ReturnType ret = (Std_ReturnTyp
      +                          e)0x01;
  2427   001A22  0E01               	movlw	1
  2428   001A24  0100               	movlb	0	; () banked
  2429   001A26  6F84               	movwf	Interrupt_INTx_Clear_Flag@ret& (0+255),b
  2430   001A28                     
  2431                           ; BSR set to: 0
  2432                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 239:     if(((void*)0) == int_obj){
  2433   001A28  5180               	movf	Interrupt_INTx_Clear_Flag@int_obj& (0+255),w,b
  2434   001A2A  1181               	iorwf	(Interrupt_INTx_Clear_Flag@int_obj+1)& (0+255),w,b
  2435   001A2C  A4D8               	btfss	status,2,c
  2436   001A2E  EF1B  F00D         	goto	u2991
  2437   001A32  EF1D  F00D         	goto	u2990
  2438   001A36                     u2991:
  2439   001A36  EF2A  F00D         	goto	l3976
  2440   001A3A                     u2990:
  2441   001A3A                     l3972:
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 240:         ret = (Std_ReturnType)0x00;
  2445   001A3A  0E00               	movlw	0
  2446   001A3C  6F84               	movwf	Interrupt_INTx_Clear_Flag@ret& (0+255),b
  2447                           
  2448                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 241:     }
  2449   001A3E  EF49  F00D         	goto	l3978
  2450   001A42                     l584:
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 245:                 (INTCONbits.INT0IF = 0)
      +                          ;
  2454   001A42  92F2               	bcf	242,1,c	;volatile
  2455                           
  2456                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 246:                 break;
  2457   001A44  EF49  F00D         	goto	l3978
  2458   001A48                     l586:
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 248:                 (INTCON3bits.INT1IF = 0
      +                          );
  2462   001A48  90F0               	bcf	240,0,c	;volatile
  2463                           
  2464                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 249:                 break;
  2465   001A4A  EF49  F00D         	goto	l3978
  2466   001A4E                     l587:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 251:                 (INTCON3bits.INT2IF = 0
      +                          );
  2470   001A4E  92F0               	bcf	240,1,c	;volatile
  2471                           
  2472                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 252:                 break;
  2473   001A50  EF49  F00D         	goto	l3978
  2474   001A54                     l3976:
  2475                           
  2476                           ; BSR set to: 0
  2477   001A54  EE20 F004          	lfsr	2,4
  2478   001A58  5180               	movf	Interrupt_INTx_Clear_Flag@int_obj& (0+255),w,b
  2479   001A5A  26D9               	addwf	fsr2l,f,c
  2480   001A5C  5181               	movf	(Interrupt_INTx_Clear_Flag@int_obj+1)& (0+255),w,b
  2481   001A5E  22DA               	addwfc	fsr2h,f,c
  2482   001A60  50DF               	movf	indf2,w,c
  2483   001A62  6F82               	movwf	??_Interrupt_INTx_Clear_Flag& (0+255),b
  2484   001A64  6B83               	clrf	(??_Interrupt_INTx_Clear_Flag+1)& (0+255),b
  2485                           
  2486                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2487                           ; Switch size 1, requested type "simple"
  2488                           ; Number of cases is 1, Range of values is 0 to 0
  2489                           ; switch strategies available:
  2490                           ; Name         Instructions Cycles
  2491                           ; simple_byte            4     3 (average)
  2492                           ;	Chosen strategy is simple_byte
  2493   001A66  5183               	movf	(??_Interrupt_INTx_Clear_Flag+1)& (0+255),w,b
  2494   001A68  0A00               	xorlw	0	; case 0
  2495   001A6A  B4D8               	btfsc	status,2,c
  2496   001A6C  EF3A  F00D         	goto	l4870
  2497   001A70  EF1D  F00D         	goto	l3972
  2498   001A74                     l4870:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ; Switch size 1, requested type "simple"
  2502                           ; Number of cases is 3, Range of values is 0 to 2
  2503                           ; switch strategies available:
  2504                           ; Name         Instructions Cycles
  2505                           ; simple_byte           10     6 (average)
  2506                           ;	Chosen strategy is simple_byte
  2507   001A74  5182               	movf	??_Interrupt_INTx_Clear_Flag& (0+255),w,b
  2508   001A76  0A00               	xorlw	0	; case 0
  2509   001A78  B4D8               	btfsc	status,2,c
  2510   001A7A  EF21  F00D         	goto	l584
  2511   001A7E  0A01               	xorlw	1	; case 1
  2512   001A80  B4D8               	btfsc	status,2,c
  2513   001A82  EF24  F00D         	goto	l586
  2514   001A86  0A03               	xorlw	3	; case 2
  2515   001A88  B4D8               	btfsc	status,2,c
  2516   001A8A  EF27  F00D         	goto	l587
  2517   001A8E  EF1D  F00D         	goto	l3972
  2518   001A92                     l3978:
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 256:     return ret;
  2522   001A92  5184               	movf	Interrupt_INTx_Clear_Flag@ret& (0+255),w,b
  2523   001A94                     
  2524                           ; BSR set to: 0
  2525   001A94  0012               	return		;funcret
  2526   001A96                     __end_of_Interrupt_INTx_Clear_Flag:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function _InterruptManager *****************
  2530 ;; Defined at:
  2531 ;;		line 24 in file "MCAL/INTERRUPT/mcal_interrupt_manager.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;Total ram usage:        6 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 4
  2552 ;; This function calls:
  2553 ;;		_INT0_ISR
  2554 ;;		_INT1_ISR
  2555 ;;		_INT2_ISR
  2556 ;;		_RB4_ISR
  2557 ;;		_RB5_ISR
  2558 ;;		_RB6_ISR
  2559 ;;		_RB7_ISR
  2560 ;; This function is called by:
  2561 ;;		Interrupt level 2
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	intcode
  2566   000008                     __pintcode:
  2567                           	callstack 0
  2568   000008                     _InterruptManager:
  2569                           	callstack 23
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;incstack = 0
  2573   000008  826D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2574   00000A  ED0B  F008         	call	int_func,f	;refresh shadow registers
  2575                           
  2576                           	psect	intcode_body
  2577   001016                     __pintcode_body:
  2578                           	callstack 23
  2579   001016                     int_func:
  2580                           	callstack 23
  2581   001016  0006               	pop		; remove dummy address from shadow register refresh
  2582   001018  CFFA F067          	movff	pclath,??_InterruptManager
  2583   00101C  CFFB F068          	movff	pclatu,??_InterruptManager+1
  2584   001020  CFD9 F069          	movff	fsr2l,??_InterruptManager+2
  2585   001024  CFDA F06A          	movff	fsr2h,??_InterruptManager+3
  2586   001028  CFF3 F06B          	movff	prodl,??_InterruptManager+4
  2587   00102C  CFF4 F06C          	movff	prodh,??_InterruptManager+5
  2588   001030                     
  2589                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 26:     if((1 == INTCONbits.INT0IE) && (1 == I
      +                          NTCONbits.INT0IF)){
  2590   001030  A8F2               	btfss	242,4,c	;volatile
  2591   001032  EF1D  F008         	goto	i2u242_41
  2592   001036  EF1F  F008         	goto	i2u242_40
  2593   00103A                     i2u242_41:
  2594   00103A  EF28  F008         	goto	i2l708
  2595   00103E                     i2u242_40:
  2596   00103E  A2F2               	btfss	242,1,c	;volatile
  2597   001040  EF24  F008         	goto	i2u243_41
  2598   001044  EF26  F008         	goto	i2u243_40
  2599   001048                     i2u243_41:
  2600   001048  EF28  F008         	goto	i2l708
  2601   00104C                     i2u243_40:
  2602   00104C                     
  2603                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 27:         INT0_ISR();
  2604   00104C  EC20  F00E         	call	_INT0_ISR	;wreg free
  2605   001050                     i2l708:
  2606                           
  2607                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 30:     if((1 == INTCON3bits.INT1E) && (1 == I
      +                          NTCON3bits.INT1F)){
  2608   001050  A6F0               	btfss	240,3,c	;volatile
  2609   001052  EF2D  F008         	goto	i2u244_41
  2610   001056  EF2F  F008         	goto	i2u244_40
  2611   00105A                     i2u244_41:
  2612   00105A  EF38  F008         	goto	i2l710
  2613   00105E                     i2u244_40:
  2614   00105E  A0F0               	btfss	240,0,c	;volatile
  2615   001060  EF34  F008         	goto	i2u245_41
  2616   001064  EF36  F008         	goto	i2u245_40
  2617   001068                     i2u245_41:
  2618   001068  EF38  F008         	goto	i2l710
  2619   00106C                     i2u245_40:
  2620   00106C                     
  2621                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 31:         INT1_ISR();
  2622   00106C  EC09  F00E         	call	_INT1_ISR	;wreg free
  2623   001070                     i2l710:
  2624                           
  2625                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 34:     if((1 == INTCON3bits.INT2IE) && (1 == 
      +                          INTCON3bits.INT2IF)){
  2626   001070  A8F0               	btfss	240,4,c	;volatile
  2627   001072  EF3D  F008         	goto	i2u246_41
  2628   001076  EF3F  F008         	goto	i2u246_40
  2629   00107A                     i2u246_41:
  2630   00107A  EF48  F008         	goto	i2l712
  2631   00107E                     i2u246_40:
  2632   00107E  A2F0               	btfss	240,1,c	;volatile
  2633   001080  EF44  F008         	goto	i2u247_41
  2634   001084  EF46  F008         	goto	i2u247_40
  2635   001088                     i2u247_41:
  2636   001088  EF48  F008         	goto	i2l712
  2637   00108C                     i2u247_40:
  2638   00108C                     
  2639                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 35:         INT2_ISR();
  2640   00108C  ECF2  F00D         	call	_INT2_ISR	;wreg free
  2641   001090                     i2l712:
  2642                           
  2643                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 41:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2644   001090  A6F2               	btfss	242,3,c	;volatile
  2645   001092  EF4D  F008         	goto	i2u248_41
  2646   001096  EF4F  F008         	goto	i2u248_40
  2647   00109A                     i2u248_41:
  2648   00109A  EF6A  F008         	goto	i2l714
  2649   00109E                     i2u248_40:
  2650   00109E  A0F2               	btfss	242,0,c	;volatile
  2651   0010A0  EF54  F008         	goto	i2u249_41
  2652   0010A4  EF56  F008         	goto	i2u249_40
  2653   0010A8                     i2u249_41:
  2654   0010A8  EF6A  F008         	goto	i2l714
  2655   0010AC                     i2u249_40:
  2656   0010AC  A881               	btfss	129,4,c	;volatile
  2657   0010AE  EF5B  F008         	goto	i2u250_41
  2658   0010B2  EF5D  F008         	goto	i2u250_40
  2659   0010B6                     i2u250_41:
  2660   0010B6  EF6A  F008         	goto	i2l714
  2661   0010BA                     i2u250_40:
  2662   0010BA  0422               	decf	_RB4_Flag^0,w,c	;volatile
  2663   0010BC  A4D8               	btfss	status,2,c
  2664   0010BE  EF63  F008         	goto	i2u251_41
  2665   0010C2  EF65  F008         	goto	i2u251_40
  2666   0010C6                     i2u251_41:
  2667   0010C6  EF6A  F008         	goto	i2l714
  2668   0010CA                     i2u251_40:
  2669   0010CA                     
  2670                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 42:        (PORTBbits.RB4 == gpio_high) && (RB
      +                          4_Flag == 1)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 43:         RB4_Flag = 0;
  2671   0010CA  0E00               	movlw	0
  2672   0010CC  6E22               	movwf	_RB4_Flag^0,c	;volatile
  2673   0010CE                     
  2674                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 44:         RB4_ISR(0);
  2675   0010CE  0E00               	movlw	0
  2676   0010D0  ECA0  F00E         	call	_RB4_ISR
  2677   0010D4                     i2l714:
  2678                           
  2679                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 47:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2680   0010D4  A6F2               	btfss	242,3,c	;volatile
  2681   0010D6  EF6F  F008         	goto	i2u252_41
  2682   0010DA  EF71  F008         	goto	i2u252_40
  2683   0010DE                     i2u252_41:
  2684   0010DE  EF8C  F008         	goto	i2l716
  2685   0010E2                     i2u252_40:
  2686   0010E2  A0F2               	btfss	242,0,c	;volatile
  2687   0010E4  EF76  F008         	goto	i2u253_41
  2688   0010E8  EF78  F008         	goto	i2u253_40
  2689   0010EC                     i2u253_41:
  2690   0010EC  EF8C  F008         	goto	i2l716
  2691   0010F0                     i2u253_40:
  2692   0010F0  B881               	btfsc	129,4,c	;volatile
  2693   0010F2  EF7D  F008         	goto	i2u254_41
  2694   0010F6  EF7F  F008         	goto	i2u254_40
  2695   0010FA                     i2u254_41:
  2696   0010FA  EF8C  F008         	goto	i2l716
  2697   0010FE                     i2u254_40:
  2698   0010FE  5022               	movf	_RB4_Flag^0,w,c	;volatile
  2699   001100  A4D8               	btfss	status,2,c
  2700   001102  EF85  F008         	goto	i2u255_41
  2701   001106  EF87  F008         	goto	i2u255_40
  2702   00110A                     i2u255_41:
  2703   00110A  EF8C  F008         	goto	i2l716
  2704   00110E                     i2u255_40:
  2705   00110E                     
  2706                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 48:        (PORTBbits.RB4 == gpio_low) && (RB4
      +                          _Flag == 0)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 49:         RB4_Flag = 1;
  2707   00110E  0E01               	movlw	1
  2708   001110  6E22               	movwf	_RB4_Flag^0,c	;volatile
  2709   001112                     
  2710                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 50:         RB4_ISR(1);
  2711   001112  0E01               	movlw	1
  2712   001114  ECA0  F00E         	call	_RB4_ISR
  2713   001118                     i2l716:
  2714                           
  2715                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 53:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2716   001118  A6F2               	btfss	242,3,c	;volatile
  2717   00111A  EF91  F008         	goto	i2u256_41
  2718   00111E  EF93  F008         	goto	i2u256_40
  2719   001122                     i2u256_41:
  2720   001122  EFAE  F008         	goto	i2l718
  2721   001126                     i2u256_40:
  2722   001126  A0F2               	btfss	242,0,c	;volatile
  2723   001128  EF98  F008         	goto	i2u257_41
  2724   00112C  EF9A  F008         	goto	i2u257_40
  2725   001130                     i2u257_41:
  2726   001130  EFAE  F008         	goto	i2l718
  2727   001134                     i2u257_40:
  2728   001134  AA81               	btfss	129,5,c	;volatile
  2729   001136  EF9F  F008         	goto	i2u258_41
  2730   00113A  EFA1  F008         	goto	i2u258_40
  2731   00113E                     i2u258_41:
  2732   00113E  EFAE  F008         	goto	i2l718
  2733   001142                     i2u258_40:
  2734   001142  0421               	decf	_RB5_Flag^0,w,c	;volatile
  2735   001144  A4D8               	btfss	status,2,c
  2736   001146  EFA7  F008         	goto	i2u259_41
  2737   00114A  EFA9  F008         	goto	i2u259_40
  2738   00114E                     i2u259_41:
  2739   00114E  EFAE  F008         	goto	i2l718
  2740   001152                     i2u259_40:
  2741   001152                     
  2742                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 54:        (PORTBbits.RB5 == gpio_high) && (RB
      +                          5_Flag == 1)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 55:         RB5_Flag = 0;
  2743   001152  0E00               	movlw	0
  2744   001154  6E21               	movwf	_RB5_Flag^0,c	;volatile
  2745   001156                     
  2746                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 56:         RB5_ISR(0);
  2747   001156  0E00               	movlw	0
  2748   001158  EC93  F00E         	call	_RB5_ISR
  2749   00115C                     i2l718:
  2750                           
  2751                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 59:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2752   00115C  A6F2               	btfss	242,3,c	;volatile
  2753   00115E  EFB3  F008         	goto	i2u260_41
  2754   001162  EFB5  F008         	goto	i2u260_40
  2755   001166                     i2u260_41:
  2756   001166  EFD0  F008         	goto	i2l720
  2757   00116A                     i2u260_40:
  2758   00116A  A0F2               	btfss	242,0,c	;volatile
  2759   00116C  EFBA  F008         	goto	i2u261_41
  2760   001170  EFBC  F008         	goto	i2u261_40
  2761   001174                     i2u261_41:
  2762   001174  EFD0  F008         	goto	i2l720
  2763   001178                     i2u261_40:
  2764   001178  BA81               	btfsc	129,5,c	;volatile
  2765   00117A  EFC1  F008         	goto	i2u262_41
  2766   00117E  EFC3  F008         	goto	i2u262_40
  2767   001182                     i2u262_41:
  2768   001182  EFD0  F008         	goto	i2l720
  2769   001186                     i2u262_40:
  2770   001186  5021               	movf	_RB5_Flag^0,w,c	;volatile
  2771   001188  A4D8               	btfss	status,2,c
  2772   00118A  EFC9  F008         	goto	i2u263_41
  2773   00118E  EFCB  F008         	goto	i2u263_40
  2774   001192                     i2u263_41:
  2775   001192  EFD0  F008         	goto	i2l720
  2776   001196                     i2u263_40:
  2777   001196                     
  2778                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 60:        (PORTBbits.RB5 == gpio_low) && (RB5
      +                          _Flag == 0)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 61:         RB5_Flag = 1;
  2779   001196  0E01               	movlw	1
  2780   001198  6E21               	movwf	_RB5_Flag^0,c	;volatile
  2781   00119A                     
  2782                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 62:         RB5_ISR(1);
  2783   00119A  0E01               	movlw	1
  2784   00119C  EC93  F00E         	call	_RB5_ISR
  2785   0011A0                     i2l720:
  2786                           
  2787                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 65:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2788   0011A0  A6F2               	btfss	242,3,c	;volatile
  2789   0011A2  EFD5  F008         	goto	i2u264_41
  2790   0011A6  EFD7  F008         	goto	i2u264_40
  2791   0011AA                     i2u264_41:
  2792   0011AA  EFF2  F008         	goto	i2l722
  2793   0011AE                     i2u264_40:
  2794   0011AE  A0F2               	btfss	242,0,c	;volatile
  2795   0011B0  EFDC  F008         	goto	i2u265_41
  2796   0011B4  EFDE  F008         	goto	i2u265_40
  2797   0011B8                     i2u265_41:
  2798   0011B8  EFF2  F008         	goto	i2l722
  2799   0011BC                     i2u265_40:
  2800   0011BC  AC81               	btfss	129,6,c	;volatile
  2801   0011BE  EFE3  F008         	goto	i2u266_41
  2802   0011C2  EFE5  F008         	goto	i2u266_40
  2803   0011C6                     i2u266_41:
  2804   0011C6  EFF2  F008         	goto	i2l722
  2805   0011CA                     i2u266_40:
  2806   0011CA  0420               	decf	_RB6_Flag^0,w,c	;volatile
  2807   0011CC  A4D8               	btfss	status,2,c
  2808   0011CE  EFEB  F008         	goto	i2u267_41
  2809   0011D2  EFED  F008         	goto	i2u267_40
  2810   0011D6                     i2u267_41:
  2811   0011D6  EFF2  F008         	goto	i2l722
  2812   0011DA                     i2u267_40:
  2813   0011DA                     
  2814                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 66:        (PORTBbits.RB6 == gpio_high) && (RB
      +                          6_Flag == 1)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 67:         RB6_Flag = 0;
  2815   0011DA  0E00               	movlw	0
  2816   0011DC  6E20               	movwf	_RB6_Flag^0,c	;volatile
  2817   0011DE                     
  2818                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 68:         RB6_ISR(0);
  2819   0011DE  0E00               	movlw	0
  2820   0011E0  EC86  F00E         	call	_RB6_ISR
  2821   0011E4                     i2l722:
  2822                           
  2823                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 71:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2824   0011E4  A6F2               	btfss	242,3,c	;volatile
  2825   0011E6  EFF7  F008         	goto	i2u268_41
  2826   0011EA  EFF9  F008         	goto	i2u268_40
  2827   0011EE                     i2u268_41:
  2828   0011EE  EF14  F009         	goto	i2l724
  2829   0011F2                     i2u268_40:
  2830   0011F2  A0F2               	btfss	242,0,c	;volatile
  2831   0011F4  EFFE  F008         	goto	i2u269_41
  2832   0011F8  EF00  F009         	goto	i2u269_40
  2833   0011FC                     i2u269_41:
  2834   0011FC  EF14  F009         	goto	i2l724
  2835   001200                     i2u269_40:
  2836   001200  BC81               	btfsc	129,6,c	;volatile
  2837   001202  EF05  F009         	goto	i2u270_41
  2838   001206  EF07  F009         	goto	i2u270_40
  2839   00120A                     i2u270_41:
  2840   00120A  EF14  F009         	goto	i2l724
  2841   00120E                     i2u270_40:
  2842   00120E  5020               	movf	_RB6_Flag^0,w,c	;volatile
  2843   001210  A4D8               	btfss	status,2,c
  2844   001212  EF0D  F009         	goto	i2u271_41
  2845   001216  EF0F  F009         	goto	i2u271_40
  2846   00121A                     i2u271_41:
  2847   00121A  EF14  F009         	goto	i2l724
  2848   00121E                     i2u271_40:
  2849   00121E                     
  2850                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 72:        (PORTBbits.RB6 == gpio_low) && (RB6
      +                          _Flag == 0)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 73:         RB6_Flag = 1;
  2851   00121E  0E01               	movlw	1
  2852   001220  6E20               	movwf	_RB6_Flag^0,c	;volatile
  2853   001222                     
  2854                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 74:         RB6_ISR(1);
  2855   001222  0E01               	movlw	1
  2856   001224  EC86  F00E         	call	_RB6_ISR
  2857   001228                     i2l724:
  2858                           
  2859                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 77:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2860   001228  A6F2               	btfss	242,3,c	;volatile
  2861   00122A  EF19  F009         	goto	i2u272_41
  2862   00122E  EF1B  F009         	goto	i2u272_40
  2863   001232                     i2u272_41:
  2864   001232  EF36  F009         	goto	i2l726
  2865   001236                     i2u272_40:
  2866   001236  A0F2               	btfss	242,0,c	;volatile
  2867   001238  EF20  F009         	goto	i2u273_41
  2868   00123C  EF22  F009         	goto	i2u273_40
  2869   001240                     i2u273_41:
  2870   001240  EF36  F009         	goto	i2l726
  2871   001244                     i2u273_40:
  2872   001244  AE81               	btfss	129,7,c	;volatile
  2873   001246  EF27  F009         	goto	i2u274_41
  2874   00124A  EF29  F009         	goto	i2u274_40
  2875   00124E                     i2u274_41:
  2876   00124E  EF36  F009         	goto	i2l726
  2877   001252                     i2u274_40:
  2878   001252  041F               	decf	_RB7_Flag^0,w,c	;volatile
  2879   001254  A4D8               	btfss	status,2,c
  2880   001256  EF2F  F009         	goto	i2u275_41
  2881   00125A  EF31  F009         	goto	i2u275_40
  2882   00125E                     i2u275_41:
  2883   00125E  EF36  F009         	goto	i2l726
  2884   001262                     i2u275_40:
  2885   001262                     
  2886                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 78:        (PORTBbits.RB7 == gpio_high) && (RB
      +                          7_Flag == 1)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 79:         RB7_Flag = 0;
  2887   001262  0E00               	movlw	0
  2888   001264  6E1F               	movwf	_RB7_Flag^0,c	;volatile
  2889   001266                     
  2890                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 80:         RB7_ISR(0);
  2891   001266  0E00               	movlw	0
  2892   001268  EC79  F00E         	call	_RB7_ISR
  2893   00126C                     i2l726:
  2894                           
  2895                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 83:     if((1 == INTCONbits.RBIE) && (1 == INT
      +                          CONbits.RBIF) &&
  2896   00126C  A6F2               	btfss	242,3,c	;volatile
  2897   00126E  EF3B  F009         	goto	i2u276_41
  2898   001272  EF3D  F009         	goto	i2u276_40
  2899   001276                     i2u276_41:
  2900   001276  EF58  F009         	goto	i2l729
  2901   00127A                     i2u276_40:
  2902   00127A  A0F2               	btfss	242,0,c	;volatile
  2903   00127C  EF42  F009         	goto	i2u277_41
  2904   001280  EF44  F009         	goto	i2u277_40
  2905   001284                     i2u277_41:
  2906   001284  EF58  F009         	goto	i2l729
  2907   001288                     i2u277_40:
  2908   001288  BE81               	btfsc	129,7,c	;volatile
  2909   00128A  EF49  F009         	goto	i2u278_41
  2910   00128E  EF4B  F009         	goto	i2u278_40
  2911   001292                     i2u278_41:
  2912   001292  EF58  F009         	goto	i2l729
  2913   001296                     i2u278_40:
  2914   001296  501F               	movf	_RB7_Flag^0,w,c	;volatile
  2915   001298  A4D8               	btfss	status,2,c
  2916   00129A  EF51  F009         	goto	i2u279_41
  2917   00129E  EF53  F009         	goto	i2u279_40
  2918   0012A2                     i2u279_41:
  2919   0012A2  EF58  F009         	goto	i2l729
  2920   0012A6                     i2u279_40:
  2921   0012A6                     
  2922                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 84:        (PORTBbits.RB7 == gpio_low) && (RB7
      +                          _Flag == 0)){;MCAL/INTERRUPT/mcal_interrupt_manager.c: 85:         RB7_Flag = 1;
  2923   0012A6  0E01               	movlw	1
  2924   0012A8  6E1F               	movwf	_RB7_Flag^0,c	;volatile
  2925   0012AA                     
  2926                           ;MCAL/INTERRUPT/mcal_interrupt_manager.c: 86:         RB7_ISR(1);
  2927   0012AA  0E01               	movlw	1
  2928   0012AC  EC79  F00E         	call	_RB7_ISR
  2929   0012B0                     i2l729:
  2930   0012B0  C06C  FFF4         	movff	??_InterruptManager+5,prodh
  2931   0012B4  C06B  FFF3         	movff	??_InterruptManager+4,prodl
  2932   0012B8  C06A  FFDA         	movff	??_InterruptManager+3,fsr2h
  2933   0012BC  C069  FFD9         	movff	??_InterruptManager+2,fsr2l
  2934   0012C0  C068  FFFB         	movff	??_InterruptManager+1,pclatu
  2935   0012C4  C067  FFFA         	movff	??_InterruptManager,pclath
  2936   0012C8  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2937   0012CA  0011               	retfie		f
  2938   0012CC                     __end_of_InterruptManager:
  2939                           	callstack 0
  2940                           
  2941 ;; *************** function _RB7_ISR *****************
  2942 ;; Defined at:
  2943 ;;		line 383 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  RB7_Source      1    wreg     unsigned char 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  RB7_Source      1    0[COMRAM] unsigned char 
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;Total ram usage:        1 bytes
  2962 ;; Hardware stack levels used: 1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		_InterruptManager
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text16
  2971   001CF2                     __ptext16:
  2972                           	callstack 0
  2973   001CF2                     _RB7_ISR:
  2974                           	callstack 26
  2975                           
  2976                           ;incstack = 0
  2977                           ;RB7_ISR@RB7_Source stored from wreg
  2978   001CF2  6E5B               	movwf	RB7_ISR@RB7_Source^0,c
  2979   001CF4                     
  2980                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 384:     (INTCONbits.RBIF = 0);
  2981   001CF4  90F2               	bcf	242,0,c	;volatile
  2982   001CF6                     
  2983                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 387:     if(0 == RB7_Source){
  2984   001CF6  505B               	movf	RB7_ISR@RB7_Source^0,w,c
  2985   001CF8  A4D8               	btfss	status,2,c
  2986   001CFA  EF81  F00E         	goto	i2u56_41
  2987   001CFE  EF83  F00E         	goto	i2u56_40
  2988   001D02                     i2u56_41:
  2989   001D02  EF85  F00E         	goto	i2l1946
  2990   001D06                     i2u56_40:
  2991   001D06  EF85  F00E         	goto	i2l674
  2992   001D0A                     i2l1946:
  2993   001D0A                     i2l674:
  2994   001D0A  0012               	return		;funcret
  2995   001D0C                     __end_of_RB7_ISR:
  2996                           	callstack 0
  2997                           
  2998 ;; *************** function _RB6_ISR *****************
  2999 ;; Defined at:
  3000 ;;		line 369 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  RB6_Source      1    wreg     unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  RB6_Source      1    0[COMRAM] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;Total ram usage:        1 bytes
  3019 ;; Hardware stack levels used: 1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_InterruptManager
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text17
  3028   001D0C                     __ptext17:
  3029                           	callstack 0
  3030   001D0C                     _RB6_ISR:
  3031                           	callstack 26
  3032                           
  3033                           ;incstack = 0
  3034                           ;RB6_ISR@RB6_Source stored from wreg
  3035   001D0C  6E5B               	movwf	RB6_ISR@RB6_Source^0,c
  3036   001D0E                     
  3037                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 370:     (INTCONbits.RBIF = 0);
  3038   001D0E  90F2               	bcf	242,0,c	;volatile
  3039   001D10                     
  3040                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 373:     if(0 == RB6_Source){
  3041   001D10  505B               	movf	RB6_ISR@RB6_Source^0,w,c
  3042   001D12  A4D8               	btfss	status,2,c
  3043   001D14  EF8E  F00E         	goto	i2u55_41
  3044   001D18  EF90  F00E         	goto	i2u55_40
  3045   001D1C                     i2u55_41:
  3046   001D1C  EF92  F00E         	goto	i2l1932
  3047   001D20                     i2u55_40:
  3048   001D20  EF92  F00E         	goto	i2l663
  3049   001D24                     i2l1932:
  3050   001D24                     i2l663:
  3051   001D24  0012               	return		;funcret
  3052   001D26                     __end_of_RB6_ISR:
  3053                           	callstack 0
  3054                           
  3055 ;; *************** function _RB5_ISR *****************
  3056 ;; Defined at:
  3057 ;;		line 355 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  RB5_Source      1    wreg     unsigned char 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  RB5_Source      1    0[COMRAM] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;Total ram usage:        1 bytes
  3076 ;; Hardware stack levels used: 1
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_InterruptManager
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text18
  3085   001D26                     __ptext18:
  3086                           	callstack 0
  3087   001D26                     _RB5_ISR:
  3088                           	callstack 26
  3089                           
  3090                           ;incstack = 0
  3091                           ;RB5_ISR@RB5_Source stored from wreg
  3092   001D26  6E5B               	movwf	RB5_ISR@RB5_Source^0,c
  3093   001D28                     
  3094                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 356:     (INTCONbits.RBIF = 0);
  3095   001D28  90F2               	bcf	242,0,c	;volatile
  3096   001D2A                     
  3097                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 359:     if(0 == RB5_Source){
  3098   001D2A  505B               	movf	RB5_ISR@RB5_Source^0,w,c
  3099   001D2C  A4D8               	btfss	status,2,c
  3100   001D2E  EF9B  F00E         	goto	i2u54_41
  3101   001D32  EF9D  F00E         	goto	i2u54_40
  3102   001D36                     i2u54_41:
  3103   001D36  EF9F  F00E         	goto	i2l1918
  3104   001D3A                     i2u54_40:
  3105   001D3A  EF9F  F00E         	goto	i2l652
  3106   001D3E                     i2l1918:
  3107   001D3E                     i2l652:
  3108   001D3E  0012               	return		;funcret
  3109   001D40                     __end_of_RB5_ISR:
  3110                           	callstack 0
  3111                           
  3112 ;; *************** function _RB4_ISR *****************
  3113 ;; Defined at:
  3114 ;;		line 341 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  RB4_Source      1    wreg     unsigned char 
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;  RB4_Source      1    0[COMRAM] unsigned char 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:        1 bytes
  3133 ;; Hardware stack levels used: 1
  3134 ;; This function calls:
  3135 ;;		Nothing
  3136 ;; This function is called by:
  3137 ;;		_InterruptManager
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text19
  3142   001D40                     __ptext19:
  3143                           	callstack 0
  3144   001D40                     _RB4_ISR:
  3145                           	callstack 26
  3146                           
  3147                           ;incstack = 0
  3148                           ;RB4_ISR@RB4_Source stored from wreg
  3149   001D40  6E5B               	movwf	RB4_ISR@RB4_Source^0,c
  3150   001D42                     
  3151                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 342:     (INTCONbits.RBIF = 0);
  3152   001D42  90F2               	bcf	242,0,c	;volatile
  3153   001D44                     
  3154                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 345:     if(0 == RB4_Source){
  3155   001D44  505B               	movf	RB4_ISR@RB4_Source^0,w,c
  3156   001D46  A4D8               	btfss	status,2,c
  3157   001D48  EFA8  F00E         	goto	i2u53_41
  3158   001D4C  EFAA  F00E         	goto	i2u53_40
  3159   001D50                     i2u53_41:
  3160   001D50  EFAC  F00E         	goto	i2l1904
  3161   001D54                     i2u53_40:
  3162   001D54  EFAC  F00E         	goto	i2l641
  3163   001D58                     i2l1904:
  3164   001D58                     i2l641:
  3165   001D58  0012               	return		;funcret
  3166   001D5A                     __end_of_RB4_ISR:
  3167                           	callstack 0
  3168                           
  3169 ;; *************** function _INT2_ISR *****************
  3170 ;; Defined at:
  3171 ;;		line 334 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;		None
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;		None
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;Total ram usage:        0 bytes
  3190 ;; Hardware stack levels used: 1
  3191 ;; Hardware stack levels required when called: 3
  3192 ;; This function calls:
  3193 ;;		Absolute function
  3194 ;;		_Int0_APP_ISR
  3195 ;;		_Int1_APP_ISR
  3196 ;;		_Int2_APP_ISR
  3197 ;; This function is called by:
  3198 ;;		_InterruptManager
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text20
  3203   001BE4                     __ptext20:
  3204                           	callstack 0
  3205   001BE4                     _INT2_ISR:
  3206                           	callstack 23
  3207   001BE4                     
  3208                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 335:     (INTCON3bits.INT2IF = 0);
  3209   001BE4  92F0               	bcf	240,1,c	;volatile
  3210   001BE6                     
  3211                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 337:     if(INT2_InterruptHandler){ INT2_Int
      +                          erruptHandler(); }
  3212   001BE6  504E               	movf	_INT2_InterruptHandler^0,w,c
  3213   001BE8  104F               	iorwf	(_INT2_InterruptHandler+1)^0,w,c
  3214   001BEA  B4D8               	btfsc	status,2,c
  3215   001BEC  EFFA  F00D         	goto	i2u204_41
  3216   001BF0  EFFC  F00D         	goto	i2u204_40
  3217   001BF4                     i2u204_41:
  3218   001BF4  EF08  F00E         	goto	i2l630
  3219   001BF8                     i2u204_40:
  3220   001BF8  D802               	call	i2u205_48
  3221   001BFA  EF08  F00E         	goto	i2u205_49
  3222   001BFE                     i2u205_48:
  3223   001BFE  0005               	push	
  3224   001C00  6EFA               	movwf	pclath,c
  3225   001C02  504E               	movf	_INT2_InterruptHandler^0,w,c
  3226   001C04  6EFD               	movwf	tosl,c
  3227   001C06  504F               	movf	(_INT2_InterruptHandler+1)^0,w,c
  3228   001C08  6EFE               	movwf	tosh,c
  3229   001C0A  6AFF               	clrf	tosu,c
  3230   001C0C  50FA               	movf	pclath,w,c
  3231   001C0E  0012               	return		;indir
  3232   001C10                     i2u205_49:
  3233   001C10                     i2l630:
  3234   001C10  0012               	return		;funcret
  3235   001C12                     __end_of_INT2_ISR:
  3236                           	callstack 0
  3237                           
  3238 ;; *************** function _INT1_ISR *****************
  3239 ;; Defined at:
  3240 ;;		line 328 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;		None
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;Total ram usage:        0 bytes
  3259 ;; Hardware stack levels used: 1
  3260 ;; Hardware stack levels required when called: 3
  3261 ;; This function calls:
  3262 ;;		Absolute function
  3263 ;;		_Int0_APP_ISR
  3264 ;;		_Int1_APP_ISR
  3265 ;;		_Int2_APP_ISR
  3266 ;; This function is called by:
  3267 ;;		_InterruptManager
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text21
  3272   001C12                     __ptext21:
  3273                           	callstack 0
  3274   001C12                     _INT1_ISR:
  3275                           	callstack 23
  3276   001C12                     
  3277                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 329:     (INTCON3bits.INT1IF = 0);
  3278   001C12  90F0               	bcf	240,0,c	;volatile
  3279   001C14                     
  3280                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 331:     if(INT1_InterruptHandler){ INT1_Int
      +                          erruptHandler(); }
  3281   001C14  5050               	movf	_INT1_InterruptHandler^0,w,c
  3282   001C16  1051               	iorwf	(_INT1_InterruptHandler+1)^0,w,c
  3283   001C18  B4D8               	btfsc	status,2,c
  3284   001C1A  EF11  F00E         	goto	i2u202_41
  3285   001C1E  EF13  F00E         	goto	i2u202_40
  3286   001C22                     i2u202_41:
  3287   001C22  EF1F  F00E         	goto	i2l625
  3288   001C26                     i2u202_40:
  3289   001C26  D802               	call	i2u203_48
  3290   001C28  EF1F  F00E         	goto	i2u203_49
  3291   001C2C                     i2u203_48:
  3292   001C2C  0005               	push	
  3293   001C2E  6EFA               	movwf	pclath,c
  3294   001C30  5050               	movf	_INT1_InterruptHandler^0,w,c
  3295   001C32  6EFD               	movwf	tosl,c
  3296   001C34  5051               	movf	(_INT1_InterruptHandler+1)^0,w,c
  3297   001C36  6EFE               	movwf	tosh,c
  3298   001C38  6AFF               	clrf	tosu,c
  3299   001C3A  50FA               	movf	pclath,w,c
  3300   001C3C  0012               	return		;indir
  3301   001C3E                     i2u203_49:
  3302   001C3E                     i2l625:
  3303   001C3E  0012               	return		;funcret
  3304   001C40                     __end_of_INT1_ISR:
  3305                           	callstack 0
  3306                           
  3307 ;; *************** function _INT0_ISR *****************
  3308 ;; Defined at:
  3309 ;;		line 322 in file "MCAL/INTERRUPT/mcal_exrternal_interrupt.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;		None
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;		None
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;Total ram usage:        0 bytes
  3328 ;; Hardware stack levels used: 1
  3329 ;; Hardware stack levels required when called: 3
  3330 ;; This function calls:
  3331 ;;		Absolute function
  3332 ;;		_Int0_APP_ISR
  3333 ;;		_Int1_APP_ISR
  3334 ;;		_Int2_APP_ISR
  3335 ;; This function is called by:
  3336 ;;		_InterruptManager
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text22
  3341   001C40                     __ptext22:
  3342                           	callstack 0
  3343   001C40                     _INT0_ISR:
  3344                           	callstack 23
  3345   001C40                     
  3346                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 323:     (INTCONbits.INT0IF = 0);
  3347   001C40  92F2               	bcf	242,1,c	;volatile
  3348   001C42                     
  3349                           ;MCAL/INTERRUPT/mcal_exrternal_interrupt.c: 325:     if(INT0_InterruptHandler){ INT0_Int
      +                          erruptHandler(); }
  3350   001C42  5052               	movf	_INT0_InterruptHandler^0,w,c
  3351   001C44  1053               	iorwf	(_INT0_InterruptHandler+1)^0,w,c
  3352   001C46  B4D8               	btfsc	status,2,c
  3353   001C48  EF28  F00E         	goto	i2u200_41
  3354   001C4C  EF2A  F00E         	goto	i2u200_40
  3355   001C50                     i2u200_41:
  3356   001C50  EF36  F00E         	goto	i2l620
  3357   001C54                     i2u200_40:
  3358   001C54  D802               	call	i2u201_48
  3359   001C56  EF36  F00E         	goto	i2u201_49
  3360   001C5A                     i2u201_48:
  3361   001C5A  0005               	push	
  3362   001C5C  6EFA               	movwf	pclath,c
  3363   001C5E  5052               	movf	_INT0_InterruptHandler^0,w,c
  3364   001C60  6EFD               	movwf	tosl,c
  3365   001C62  5053               	movf	(_INT0_InterruptHandler+1)^0,w,c
  3366   001C64  6EFE               	movwf	tosh,c
  3367   001C66  6AFF               	clrf	tosu,c
  3368   001C68  50FA               	movf	pclath,w,c
  3369   001C6A  0012               	return		;indir
  3370   001C6C                     i2u201_49:
  3371   001C6C                     i2l620:
  3372   001C6C  0012               	return		;funcret
  3373   001C6E                     __end_of_INT0_ISR:
  3374                           	callstack 0
  3375                           
  3376 ;; *************** function _Int1_APP_ISR *****************
  3377 ;; Defined at:
  3378 ;;		line 19 in file "app.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;		None
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;		None
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  1    wreg      void 
  3385 ;; Registers used:
  3386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;Total ram usage:        0 bytes
  3397 ;; Hardware stack levels used: 1
  3398 ;; Hardware stack levels required when called: 2
  3399 ;; This function calls:
  3400 ;;		_led_toggle
  3401 ;; This function is called by:
  3402 ;;		_INT0_ISR
  3403 ;;		_INT1_ISR
  3404 ;;		_INT2_ISR
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text23
  3409   001D5A                     __ptext23:
  3410                           	callstack 0
  3411   001D5A                     _Int1_APP_ISR:
  3412                           	callstack 23
  3413   001D5A                     
  3414                           ;app.c: 20:     led_toggle(&led2);
  3415   001D5A  0E36               	movlw	low _led2
  3416   001D5C  6E63               	movwf	led_toggle@my_led^0,c
  3417   001D5E  0E00               	movlw	high _led2
  3418   001D60  6E64               	movwf	(led_toggle@my_led+1)^0,c
  3419   001D62  EC9C  F00C         	call	_led_toggle	;wreg free
  3420   001D66  0012               	return		;funcret
  3421   001D68                     __end_of_Int1_APP_ISR:
  3422                           	callstack 0
  3423                           
  3424 ;; *************** function _Int0_APP_ISR *****************
  3425 ;; Defined at:
  3426 ;;		line 16 in file "app.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;Total ram usage:        0 bytes
  3445 ;; Hardware stack levels used: 1
  3446 ;; Hardware stack levels required when called: 2
  3447 ;; This function calls:
  3448 ;;		_led_toggle
  3449 ;; This function is called by:
  3450 ;;		_INT0_ISR
  3451 ;;		_INT1_ISR
  3452 ;;		_INT2_ISR
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text24
  3457   001D68                     __ptext24:
  3458                           	callstack 0
  3459   001D68                     _Int0_APP_ISR:
  3460                           	callstack 23
  3461   001D68                     
  3462                           ;app.c: 17:     led_toggle(&led1);
  3463   001D68  0E37               	movlw	low _led1
  3464   001D6A  6E63               	movwf	led_toggle@my_led^0,c
  3465   001D6C  0E00               	movlw	high _led1
  3466   001D6E  6E64               	movwf	(led_toggle@my_led+1)^0,c
  3467   001D70  EC9C  F00C         	call	_led_toggle	;wreg free
  3468   001D74  0012               	return		;funcret
  3469   001D76                     __end_of_Int0_APP_ISR:
  3470                           	callstack 0
  3471                           
  3472 ;; *************** function _Int2_APP_ISR *****************
  3473 ;; Defined at:
  3474 ;;		line 22 in file "app.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used: 1
  3494 ;; Hardware stack levels required when called: 2
  3495 ;; This function calls:
  3496 ;;		_led_toggle
  3497 ;; This function is called by:
  3498 ;;		_INT0_ISR
  3499 ;;		_INT1_ISR
  3500 ;;		_INT2_ISR
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text25
  3505   001D76                     __ptext25:
  3506                           	callstack 0
  3507   001D76                     _Int2_APP_ISR:
  3508                           	callstack 23
  3509   001D76                     
  3510                           ;app.c: 23:     led_toggle(&led3);
  3511   001D76  0E35               	movlw	low _led3
  3512   001D78  6E63               	movwf	led_toggle@my_led^0,c
  3513   001D7A  0E00               	movlw	high _led3
  3514   001D7C  6E64               	movwf	(led_toggle@my_led+1)^0,c
  3515   001D7E  EC9C  F00C         	call	_led_toggle	;wreg free
  3516   001D82  0012               	return		;funcret
  3517   001D84                     __end_of_Int2_APP_ISR:
  3518                           	callstack 0
  3519                           
  3520 ;; *************** function _led_toggle *****************
  3521 ;; Defined at:
  3522 ;;		line 37 in file "ECU_L/LED/led.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  my_led          2    8[COMRAM] PTR const struct .
  3525 ;;		 -> led3(1), led2(1), led1(1), 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  my_pin          1   11[COMRAM] struct .
  3528 ;;  ret             1    0        unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      unsigned char 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;Total ram usage:        4 bytes
  3543 ;; Hardware stack levels used: 1
  3544 ;; Hardware stack levels required when called: 1
  3545 ;; This function calls:
  3546 ;;		_gpio_pin_logic_toggle
  3547 ;; This function is called by:
  3548 ;;		_Int0_APP_ISR
  3549 ;;		_Int1_APP_ISR
  3550 ;;		_Int2_APP_ISR
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text26
  3555   001938                     __ptext26:
  3556                           	callstack 0
  3557   001938                     _led_toggle:
  3558                           	callstack 23
  3559   001938                     
  3560                           ;ECU_L/LED/led.c: 39:     pin_config_t my_pin = {my_led->led_port, my_led->led_pin, gpio
      +                          _output, my_led->led_status};
  3561   001938  C057  F066         	movff	led_toggle@F3060,led_toggle@my_pin
  3562   00193C  C063  FFD9         	movff	led_toggle@my_led,fsr2l
  3563   001940  C064  FFDA         	movff	led_toggle@my_led+1,fsr2h
  3564   001944  50DF               	movf	223,w,c
  3565   001946  0B07               	andlw	7
  3566   001948  6E65               	movwf	??_led_toggle^0,c
  3567   00194A  5066               	movf	led_toggle@my_pin^0,w,c
  3568   00194C  1865               	xorwf	??_led_toggle^0,w,c
  3569   00194E  0BF8               	andlw	-8
  3570   001950  1865               	xorwf	??_led_toggle^0,w,c
  3571   001952  6E66               	movwf	led_toggle@my_pin^0,c
  3572   001954  C063  FFD9         	movff	led_toggle@my_led,fsr2l
  3573   001958  C064  FFDA         	movff	led_toggle@my_led+1,fsr2h
  3574   00195C  30DF               	rrcf	223,w,c
  3575   00195E  32E8               	rrcf	wreg,f,c
  3576   001960  32E8               	rrcf	wreg,f,c
  3577   001962  0B07               	andlw	7
  3578   001964  6E65               	movwf	??_led_toggle^0,c
  3579   001966  4665               	rlncf	??_led_toggle^0,f,c
  3580   001968  4665               	rlncf	??_led_toggle^0,f,c
  3581   00196A  4665               	rlncf	??_led_toggle^0,f,c
  3582   00196C  5066               	movf	led_toggle@my_pin^0,w,c
  3583   00196E  1865               	xorwf	??_led_toggle^0,w,c
  3584   001970  0BC7               	andlw	-57
  3585   001972  1865               	xorwf	??_led_toggle^0,w,c
  3586   001974  6E66               	movwf	led_toggle@my_pin^0,c
  3587   001976  9C66               	bcf	led_toggle@my_pin^0,6,c
  3588   001978  C063  FFD9         	movff	led_toggle@my_led,fsr2l
  3589   00197C  C064  FFDA         	movff	led_toggle@my_led+1,fsr2h
  3590   001980  ACDF               	btfss	indf2,6,c
  3591   001982  D002               	bra	i2u167_45
  3592   001984  8E66               	bsf	led_toggle@my_pin^0,7,c
  3593   001986  D001               	bra	i2u167_47
  3594   001988                     i2u167_45:
  3595   001988  9E66               	bcf	led_toggle@my_pin^0,7,c
  3596   00198A                     i2u167_47:
  3597   00198A                     
  3598                           ;ECU_L/LED/led.c: 40:     if(my_led == ((void*)0)){
  3599   00198A  5063               	movf	led_toggle@my_led^0,w,c
  3600   00198C  1064               	iorwf	(led_toggle@my_led+1)^0,w,c
  3601   00198E  A4D8               	btfss	status,2,c
  3602   001990  EFCC  F00C         	goto	i2u168_41
  3603   001994  EFCE  F00C         	goto	i2u168_40
  3604   001998                     i2u168_41:
  3605   001998  EFD0  F00C         	goto	i2l2780
  3606   00199C                     i2u168_40:
  3607   00199C                     
  3608                           ;ECU_L/LED/led.c: 42:     }
  3609   00199C  EFD6  F00C         	goto	i2l294
  3610   0019A0                     i2l2780:
  3611   0019A0  0E66               	movlw	low led_toggle@my_pin
  3612   0019A2  6E5B               	movwf	gpio_pin_logic_toggle@my_pin^0,c
  3613   0019A4  0E00               	movlw	high led_toggle@my_pin
  3614   0019A6  6E5C               	movwf	(gpio_pin_logic_toggle@my_pin+1)^0,c
  3615   0019A8  EC94  F00B         	call	_gpio_pin_logic_toggle	;wreg free
  3616   0019AC                     i2l294:
  3617   0019AC  0012               	return		;funcret
  3618   0019AE                     __end_of_led_toggle:
  3619                           	callstack 0
  3620                           
  3621 ;; *************** function _gpio_pin_logic_toggle *****************
  3622 ;; Defined at:
  3623 ;;		line 69 in file "MCAL/GPIO/gpio.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  my_pin          2    0[COMRAM] PTR const struct .
  3626 ;;		 -> led_toggle@my_pin(1), 
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  ret             1    7[COMRAM] unsigned char 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      unsigned char 
  3631 ;; Registers used:
  3632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3638 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;Total ram usage:        8 bytes
  3643 ;; Hardware stack levels used: 1
  3644 ;; This function calls:
  3645 ;;		Nothing
  3646 ;; This function is called by:
  3647 ;;		_led_toggle
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text27
  3652   001728                     __ptext27:
  3653                           	callstack 0
  3654   001728                     _gpio_pin_logic_toggle:
  3655                           	callstack 23
  3656   001728                     
  3657                           ;MCAL/GPIO/gpio.c: 70:     Std_ReturnType ret = (Std_ReturnType)0x01;
  3658   001728  0E01               	movlw	1
  3659   00172A  6E62               	movwf	gpio_pin_logic_toggle@ret^0,c
  3660   00172C                     
  3661                           ;MCAL/GPIO/gpio.c: 71:     if ((((void*)0) == my_pin) || (my_pin->pin) > 7){
  3662   00172C  505B               	movf	gpio_pin_logic_toggle@my_pin^0,w,c
  3663   00172E  105C               	iorwf	(gpio_pin_logic_toggle@my_pin+1)^0,w,c
  3664   001730  B4D8               	btfsc	status,2,c
  3665   001732  EF9D  F00B         	goto	i2u154_41
  3666   001736  EF9F  F00B         	goto	i2u154_40
  3667   00173A                     i2u154_41:
  3668   00173A  EFB0  F00B         	goto	i2l2708
  3669   00173E                     i2u154_40:
  3670   00173E  C05B  FFD9         	movff	gpio_pin_logic_toggle@my_pin,fsr2l
  3671   001742  C05C  FFDA         	movff	gpio_pin_logic_toggle@my_pin+1,fsr2h
  3672   001746  30DF               	rrcf	223,w,c
  3673   001748  32E8               	rrcf	wreg,f,c
  3674   00174A  32E8               	rrcf	wreg,f,c
  3675   00174C  0B07               	andlw	7
  3676   00174E  6E5D               	movwf	??_gpio_pin_logic_toggle^0,c
  3677   001750  0E07               	movlw	7
  3678   001752  645D               	cpfsgt	??_gpio_pin_logic_toggle^0,c
  3679   001754  EFAE  F00B         	goto	i2u155_41
  3680   001758  EFB0  F00B         	goto	i2u155_40
  3681   00175C                     i2u155_41:
  3682   00175C  EFB4  F00B         	goto	i2l2710
  3683   001760                     i2u155_40:
  3684   001760                     i2l2708:
  3685                           
  3686                           ;MCAL/GPIO/gpio.c: 72:         ret = (Std_ReturnType)0x00;
  3687   001760  0E00               	movlw	0
  3688   001762  6E62               	movwf	gpio_pin_logic_toggle@ret^0,c
  3689                           
  3690                           ;MCAL/GPIO/gpio.c: 73:     }
  3691   001764  EFE0  F00B         	goto	i2l2712
  3692   001768                     i2l2710:
  3693                           
  3694                           ;MCAL/GPIO/gpio.c: 75:         (*lat_regs[my_pin->port] ^=(1<<my_pin->pin));
  3695   001768  C05B  FFD9         	movff	gpio_pin_logic_toggle@my_pin,fsr2l
  3696   00176C  C05C  FFDA         	movff	gpio_pin_logic_toggle@my_pin+1,fsr2h
  3697   001770  30DF               	rrcf	223,w,c
  3698   001772  32E8               	rrcf	wreg,f,c
  3699   001774  32E8               	rrcf	wreg,f,c
  3700   001776  0B07               	andlw	7
  3701   001778  6E5D               	movwf	??_gpio_pin_logic_toggle^0,c
  3702   00177A  0E01               	movlw	1
  3703   00177C  6E5E               	movwf	(??_gpio_pin_logic_toggle+1)^0,c
  3704   00177E  2A5D               	incf	??_gpio_pin_logic_toggle^0,f,c
  3705   001780  EFC4  F00B         	goto	i2u156_44
  3706   001784                     i2u156_45:
  3707   001784  90D8               	bcf	status,0,c
  3708   001786  365E               	rlcf	(??_gpio_pin_logic_toggle+1)^0,f,c
  3709   001788                     i2u156_44:
  3710   001788  2E5D               	decfsz	??_gpio_pin_logic_toggle^0,f,c
  3711   00178A  EFC2  F00B         	goto	i2u156_45
  3712   00178E  C05B  FFD9         	movff	gpio_pin_logic_toggle@my_pin,fsr2l
  3713   001792  C05C  FFDA         	movff	gpio_pin_logic_toggle@my_pin+1,fsr2h
  3714   001796  50DF               	movf	223,w,c
  3715   001798  0B07               	andlw	7
  3716   00179A  6E5F               	movwf	(??_gpio_pin_logic_toggle+2)^0,c
  3717   00179C  505F               	movf	(??_gpio_pin_logic_toggle+2)^0,w,c
  3718   00179E  0D02               	mullw	2
  3719   0017A0  0E01               	movlw	low _lat_regs
  3720   0017A2  24F3               	addwf	243,w,c
  3721   0017A4  6ED9               	movwf	fsr2l,c
  3722   0017A6  0E00               	movlw	high _lat_regs
  3723   0017A8  20F4               	addwfc	prodh,w,c
  3724   0017AA  6EDA               	movwf	fsr2h,c
  3725   0017AC  CFDE F060          	movff	postinc2,??_gpio_pin_logic_toggle+3
  3726   0017B0  CFDD F061          	movff	postdec2,??_gpio_pin_logic_toggle+4
  3727   0017B4  C060  FFD9         	movff	??_gpio_pin_logic_toggle+3,fsr2l
  3728   0017B8  C061  FFDA         	movff	??_gpio_pin_logic_toggle+4,fsr2h
  3729   0017BC  505E               	movf	(??_gpio_pin_logic_toggle+1)^0,w,c
  3730   0017BE  1ADF               	xorwf	indf2,f,c
  3731   0017C0                     i2l2712:
  3732                           
  3733                           ;MCAL/GPIO/gpio.c: 77:     return ret;
  3734   0017C0  5062               	movf	gpio_pin_logic_toggle@ret^0,w,c
  3735   0017C2  0012               	return		;funcret
  3736   0017C4                     __end_of_gpio_pin_logic_toggle:
  3737                           	callstack 0
  3738                           
  3739                           	psect	text28
  3740   000000                     __ptext28:
  3741                           	callstack 0
  3742   000000                     
  3743                           	psect	rparam
  3744   000000                     
  3745                           	psect	temp
  3746   00006D                     btemp:
  3747                           	callstack 0
  3748   00006D                     	ds	1
  3749   000000                     int$flags	set	btemp
  3750   000000                     wtemp8	set	btemp+1
  3751   000000                     ttemp5	set	btemp+1
  3752   000000                     ttemp6	set	btemp+4
  3753   000000                     ttemp7	set	btemp+8
  3754                           
  3755                           	psect	idloc
  3756                           
  3757                           ;Config register IDLOC0 @ 0x200000
  3758                           ;	unspecified, using default values
  3759   200000                     	org	2097152
  3760   200000  FF                 	db	255
  3761                           
  3762                           ;Config register IDLOC1 @ 0x200001
  3763                           ;	unspecified, using default values
  3764   200001                     	org	2097153
  3765   200001  FF                 	db	255
  3766                           
  3767                           ;Config register IDLOC2 @ 0x200002
  3768                           ;	unspecified, using default values
  3769   200002                     	org	2097154
  3770   200002  FF                 	db	255
  3771                           
  3772                           ;Config register IDLOC3 @ 0x200003
  3773                           ;	unspecified, using default values
  3774   200003                     	org	2097155
  3775   200003  FF                 	db	255
  3776                           
  3777                           ;Config register IDLOC4 @ 0x200004
  3778                           ;	unspecified, using default values
  3779   200004                     	org	2097156
  3780   200004  FF                 	db	255
  3781                           
  3782                           ;Config register IDLOC5 @ 0x200005
  3783                           ;	unspecified, using default values
  3784   200005                     	org	2097157
  3785   200005  FF                 	db	255
  3786                           
  3787                           ;Config register IDLOC6 @ 0x200006
  3788                           ;	unspecified, using default values
  3789   200006                     	org	2097158
  3790   200006  FF                 	db	255
  3791                           
  3792                           ;Config register IDLOC7 @ 0x200007
  3793                           ;	unspecified, using default values
  3794   200007                     	org	2097159
  3795   200007  FF                 	db	255
  3796                           
  3797                           	psect	config
  3798                           
  3799                           ; Padding undefined space
  3800   300000                     	org	3145728
  3801   300000  FF                 	db	255
  3802                           
  3803                           ;Config register CONFIG1H @ 0x300001
  3804                           ;	unspecified, using default values
  3805                           ;	Oscillator Selection bits
  3806                           ;	OSC = 0x7, unprogrammed default
  3807                           ;	Fail-Safe Clock Monitor Enable bit
  3808                           ;	FCMEN = 0x0, unprogrammed default
  3809                           ;	Internal/External Oscillator Switchover bit
  3810                           ;	IESO = 0x0, unprogrammed default
  3811   300001                     	org	3145729
  3812   300001  07                 	db	7
  3813                           
  3814                           ;Config register CONFIG2L @ 0x300002
  3815                           ;	unspecified, using default values
  3816                           ;	Power-up Timer Enable bit
  3817                           ;	PWRT = 0x1, unprogrammed default
  3818                           ;	Brown-out Reset Enable bits
  3819                           ;	BOREN = 0x3, unprogrammed default
  3820                           ;	Brown Out Reset Voltage bits
  3821                           ;	BORV = 0x3, unprogrammed default
  3822   300002                     	org	3145730
  3823   300002  1F                 	db	31
  3824                           
  3825                           ;Config register CONFIG2H @ 0x300003
  3826                           ;	unspecified, using default values
  3827                           ;	Watchdog Timer Enable bit
  3828                           ;	WDT = 0x1, unprogrammed default
  3829                           ;	Watchdog Timer Postscale Select bits
  3830                           ;	WDTPS = 0xF, unprogrammed default
  3831   300003                     	org	3145731
  3832   300003  1F                 	db	31
  3833                           
  3834                           ; Padding undefined space
  3835   300004                     	org	3145732
  3836   300004  FF                 	db	255
  3837                           
  3838                           ;Config register CONFIG3H @ 0x300005
  3839                           ;	unspecified, using default values
  3840                           ;	CCP2 MUX bit
  3841                           ;	CCP2MX = 0x1, unprogrammed default
  3842                           ;	PORTB A/D Enable bit
  3843                           ;	PBADEN = 0x1, unprogrammed default
  3844                           ;	Low-Power Timer1 Oscillator Enable bit
  3845                           ;	LPT1OSC = 0x0, unprogrammed default
  3846                           ;	MCLR Pin Enable bit
  3847                           ;	MCLRE = 0x1, unprogrammed default
  3848   300005                     	org	3145733
  3849   300005  83                 	db	131
  3850                           
  3851                           ;Config register CONFIG4L @ 0x300006
  3852                           ;	unspecified, using default values
  3853                           ;	Stack Full/Underflow Reset Enable bit
  3854                           ;	STVREN = 0x1, unprogrammed default
  3855                           ;	Single-Supply ICSP Enable bit
  3856                           ;	LVP = 0x1, unprogrammed default
  3857                           ;	Extended Instruction Set Enable bit
  3858                           ;	XINST = 0x0, unprogrammed default
  3859                           ;	Background Debugger Enable bit
  3860                           ;	DEBUG = 0x1, unprogrammed default
  3861   300006                     	org	3145734
  3862   300006  85                 	db	133
  3863                           
  3864                           ; Padding undefined space
  3865   300007                     	org	3145735
  3866   300007  FF                 	db	255
  3867                           
  3868                           ;Config register CONFIG5L @ 0x300008
  3869                           ;	unspecified, using default values
  3870                           ;	Code Protection bit
  3871                           ;	CP0 = 0x1, unprogrammed default
  3872                           ;	Code Protection bit
  3873                           ;	CP1 = 0x1, unprogrammed default
  3874                           ;	Code Protection bit
  3875                           ;	CP2 = 0x1, unprogrammed default
  3876                           ;	Code Protection bit
  3877                           ;	CP3 = 0x1, unprogrammed default
  3878   300008                     	org	3145736
  3879   300008  0F                 	db	15
  3880                           
  3881                           ;Config register CONFIG5H @ 0x300009
  3882                           ;	unspecified, using default values
  3883                           ;	Boot Block Code Protection bit
  3884                           ;	CPB = 0x1, unprogrammed default
  3885                           ;	Data EEPROM Code Protection bit
  3886                           ;	CPD = 0x1, unprogrammed default
  3887   300009                     	org	3145737
  3888   300009  C0                 	db	192
  3889                           
  3890                           ;Config register CONFIG6L @ 0x30000A
  3891                           ;	unspecified, using default values
  3892                           ;	Write Protection bit
  3893                           ;	WRT0 = 0x1, unprogrammed default
  3894                           ;	Write Protection bit
  3895                           ;	WRT1 = 0x1, unprogrammed default
  3896                           ;	Write Protection bit
  3897                           ;	WRT2 = 0x1, unprogrammed default
  3898                           ;	Write Protection bit
  3899                           ;	WRT3 = 0x1, unprogrammed default
  3900   30000A                     	org	3145738
  3901   30000A  0F                 	db	15
  3902                           
  3903                           ;Config register CONFIG6H @ 0x30000B
  3904                           ;	unspecified, using default values
  3905                           ;	Configuration Register Write Protection bit
  3906                           ;	WRTC = 0x1, unprogrammed default
  3907                           ;	Boot Block Write Protection bit
  3908                           ;	WRTB = 0x1, unprogrammed default
  3909                           ;	Data EEPROM Write Protection bit
  3910                           ;	WRTD = 0x1, unprogrammed default
  3911   30000B                     	org	3145739
  3912   30000B  E0                 	db	224
  3913                           
  3914                           ;Config register CONFIG7L @ 0x30000C
  3915                           ;	unspecified, using default values
  3916                           ;	Table Read Protection bit
  3917                           ;	EBTR0 = 0x1, unprogrammed default
  3918                           ;	Table Read Protection bit
  3919                           ;	EBTR1 = 0x1, unprogrammed default
  3920                           ;	Table Read Protection bit
  3921                           ;	EBTR2 = 0x1, unprogrammed default
  3922                           ;	Table Read Protection bit
  3923                           ;	EBTR3 = 0x1, unprogrammed default
  3924   30000C                     	org	3145740
  3925   30000C  0F                 	db	15
  3926                           
  3927                           ;Config register CONFIG7H @ 0x30000D
  3928                           ;	unspecified, using default values
  3929                           ;	Boot Block Table Read Protection bit
  3930                           ;	EBTRB = 0x1, unprogrammed default
  3931   30000D                     	org	3145741
  3932   30000D  40                 	db	64
  3933                           tosu	equ	0xFFF
  3934                           tosh	equ	0xFFE
  3935                           tosl	equ	0xFFD
  3936                           stkptr	equ	0xFFC
  3937                           pclatu	equ	0xFFB
  3938                           pclath	equ	0xFFA
  3939                           pcl	equ	0xFF9
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           indf0	equ	0xFEF
  3947                           postinc0	equ	0xFEE
  3948                           postdec0	equ	0xFED
  3949                           preinc0	equ	0xFEC
  3950                           plusw0	equ	0xFEB
  3951                           fsr0h	equ	0xFEA
  3952                           fsr0l	equ	0xFE9
  3953                           wreg	equ	0xFE8
  3954                           indf1	equ	0xFE7
  3955                           postinc1	equ	0xFE6
  3956                           postdec1	equ	0xFE5
  3957                           preinc1	equ	0xFE4
  3958                           plusw1	equ	0xFE3
  3959                           fsr1h	equ	0xFE2
  3960                           fsr1l	equ	0xFE1
  3961                           bsr	equ	0xFE0
  3962                           indf2	equ	0xFDF
  3963                           postinc2	equ	0xFDE
  3964                           postdec2	equ	0xFDD
  3965                           preinc2	equ	0xFDC
  3966                           plusw2	equ	0xFDB
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    16
    Data        55
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     18     108
    BANK0           128     17      17
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S1818$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S1818$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    Interrupt_INTx_SetInterruptHandler@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    Interrupt_INTx_SetInterruptHandler@int_obj	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    Interrupt_INTx_Clear_Flag@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    Interrupt_INTx_Clear_Flag@int_obj	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), 

    Interrupt_INTx_Pin_Init@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    Interrupt_INTx_Pin_Init@int_obj	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), 

    Interrupt_INTx_Edge_Init@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    Interrupt_INTx_Edge_Init@int_obj	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), 

    Interrupt_INTx_Disable@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    Interrupt_INTx_Disable@int_obj	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), 

    Interrupt_INTx_Enable@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    Interrupt_INTx_Enable@int_obj	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), 

    RB7_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB7_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB6_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB6_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB5_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB5_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB4_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB4_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S891$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@int_obj.EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    S891$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@int_obj.EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Init@int_obj	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), 

    int2_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    int1_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    S751$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    int0_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Int2_APP_ISR(), Int1_APP_ISR(), Int0_APP_ISR(), 

    gpio_pin_initialize@my_pin	PTR const struct . size(2) Largest target is 1
		 -> relay_initialize@rel_pin(COMRAM[1]), led_init@my_pin(BANK0[1]), 

    gpio_pin_logic_toggle@my_pin	PTR const struct . size(2) Largest target is 1
		 -> led_toggle@my_pin(COMRAM[1]), 

    gpio_pin_logic_write@my_pin	PTR const struct . size(2) Largest target is 1
		 -> relay_turn_off@rel_pin(COMRAM[1]), relay_turn_on@rel_pin(COMRAM[1]), relay_initialize@rel_pin(COMRAM[1]), led_turn_off@my_pin(COMRAM[1]), 
		 -> led_turn_on@my_pin(COMRAM[1]), led_init@my_pin(BANK0[1]), 

    gpio_pin_direction_init@my_pin	PTR const struct . size(2) Largest target is 6
		 -> int2_obj(COMRAM[6]), int1_obj(COMRAM[6]), int0_obj(COMRAM[6]), relay_initialize@rel_pin(COMRAM[1]), 
		 -> led_init@my_pin(BANK0[1]), 

    lat_regs	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATE(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATB(BITBIGSFRlh[1]), 
		 -> LATA(BITBIGSFRll[1]), 

    port_regs	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTE(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), 
		 -> PORTA(BITBIGSFRll[1]), 

    tris_regs	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISE(BITBIGSFRhll[1]), TRISD(BITBIGSFRhll[1]), TRISC(BITBIGSFRhll[1]), TRISB(BITBIGSFRhll[1]), 
		 -> TRISA(BITBIGSFRll[1]), 

    led_toggle@my_led	PTR const struct . size(2) Largest target is 1
		 -> led3(COMRAM[1]), led2(COMRAM[1]), led1(COMRAM[1]), 

    led_init@my_led	PTR const struct . size(2) Largest target is 1
		 -> led3(COMRAM[1]), led2(COMRAM[1]), led1(COMRAM[1]), 

    sp__memset	PTR void  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptManager in COMRAM

    _Int2_APP_ISR->_led_toggle
    _Int1_APP_ISR->_led_toggle
    _Int0_APP_ISR->_led_toggle
    _led_toggle->_gpio_pin_logic_toggle

Critical Paths under _main in BANK0

    _main->_led_init
    _led_init->_gpio_pin_initialize
    _gpio_pin_initialize->_gpio_pin_logic_write
    _Interrupt_INTx_Init->_Interrupt_INTx_Pin_Init
    _Interrupt_INTx_SetInterruptHandler->_INT0_SetInterruptHandler
    _Interrupt_INTx_SetInterruptHandler->_INT1_SetInterruptHandler
    _Interrupt_INTx_SetInterruptHandler->_INT2_SetInterruptHandler
    _Interrupt_INTx_Pin_Init->_gpio_pin_direction_init

Critical Paths under _InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12235
                _Interrupt_INTx_Init
                           _led_init
 ---------------------------------------------------------------------------------
 (1) _led_init                                             5     3      2    8553
                                             13 BANK0      4     2      2
                _gpio_pin_initialize
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_initialize                                  3     1      2    8061
                                             10 BANK0      3     1      2
            _gpio_pin_direction_init
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_logic_write                                10     7      3    5837
                                              0 BANK0     10     7      3
 ---------------------------------------------------------------------------------
 (1) _Interrupt_INTx_Init                                  3     1      2    3682
                                             12 BANK0      3     1      2
          _Interrupt_INTx_Clear_Flag
             _Interrupt_INTx_Disable
           _Interrupt_INTx_Edge_Init
              _Interrupt_INTx_Enable
            _Interrupt_INTx_Pin_Init
 _Interrupt_INTx_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _Interrupt_INTx_SetInterruptHandler                   5     3      2     861
                                              3 BANK0      5     3      2
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _Interrupt_INTx_Pin_Init                              3     1      2    1349
                                              9 BANK0      3     1      2
            _gpio_pin_direction_init
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_direction_init                              9     7      2    1157
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) _Interrupt_INTx_Enable                                5     3      2     192
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Interrupt_INTx_Edge_Init                             5     3      2     378
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Interrupt_INTx_Disable                               5     3      2     192
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Interrupt_INTx_Clear_Flag                            5     3      2     192
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _InterruptManager                                     6     6      0    5007
                                             12 COMRAM     6     6      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                            _RB4_ISR
                            _RB5_ISR
                            _RB6_ISR
                            _RB7_ISR
 ---------------------------------------------------------------------------------
 (5) _RB7_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB6_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB5_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB4_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _INT2_ISR                                             0     0      0    1629
                   Absolute function *
                       _Int0_APP_ISR *
                       _Int1_APP_ISR *
                       _Int2_APP_ISR *
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0    1629
                   Absolute function *
                       _Int0_APP_ISR *
                       _Int1_APP_ISR *
                       _Int2_APP_ISR *
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0    1629
                   Absolute function *
                       _Int0_APP_ISR *
                       _Int1_APP_ISR *
                       _Int2_APP_ISR *
 ---------------------------------------------------------------------------------
 (6) _Int2_APP_ISR                                         0     0      0     543
                         _led_toggle
 ---------------------------------------------------------------------------------
 (6) _Int1_APP_ISR                                         0     0      0     543
                         _led_toggle
 ---------------------------------------------------------------------------------
 (6) _Int0_APP_ISR                                         0     0      0     543
                         _led_toggle
 ---------------------------------------------------------------------------------
 (7) _led_toggle                                           5     3      2     543
                                              8 COMRAM     4     2      2
              _gpio_pin_logic_toggle
 ---------------------------------------------------------------------------------
 (8) _gpio_pin_logic_toggle                                8     6      2     188
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupt_INTx_Init
     _Interrupt_INTx_Clear_Flag
     _Interrupt_INTx_Disable
     _Interrupt_INTx_Edge_Init
     _Interrupt_INTx_Enable
     _Interrupt_INTx_Pin_Init
       _gpio_pin_direction_init
     _Interrupt_INTx_SetInterruptHandler
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
   _led_init
     _gpio_pin_initialize
       _gpio_pin_direction_init
       _gpio_pin_logic_write

 _InterruptManager (ROOT)
   _INT0_ISR
     Absolute function(Fake) *
     _Int0_APP_ISR *
       _led_toggle
         _gpio_pin_logic_toggle
     _Int1_APP_ISR *
       _led_toggle
     _Int2_APP_ISR *
       _led_toggle
   _INT1_ISR
     Absolute function(Fake) *
     _Int0_APP_ISR *
     _Int1_APP_ISR *
     _Int2_APP_ISR *
   _INT2_ISR
     Absolute function(Fake) *
     _Int0_APP_ISR *
     _Int1_APP_ISR *
     _Int2_APP_ISR *
   _RB4_ISR
   _RB5_ISR
   _RB6_ISR
   _RB7_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      41        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      11       5       13.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     12      6C       1       85.7%
BITBIGSFRhll        59      0       0      38        0.0%
BITBIGSFRhh          D      0       0      37        0.0%
BITBIGSFRlh          4      0       0      39        0.0%
BITBIGSFRll          4      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7D      26        0.0%
DATA                 0      0      7D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Aug 08 05:34:15 2023

                        ??_InterruptManager 0067                                         l405 1B40  
                                       l273 18BC                                         l604 1C98  
                                       l516 1936                                         l550 1A20  
                                       l534 17E4                                         l367 1414  
                                       l615 1726                                         l536 17EE  
                                       l545 19CE                                         l561 1672  
                                       l537 17F8                                         l386 1546  
                                       l466 1AEA                                         l547 19D4  
                                       l539 1842                                         l467 1AEA  
                                       l548 19DA                                         l573 1674  
                                       l584 1A42                                         l586 1A48  
                                       l578 1BE2                                         l594 1CF0  
                                       l587 1A4E                                         l589 1A94  
                                       l599 1CC4                  ??_INT0_SetInterruptHandler 006D  
                    ??_gpio_pin_logic_write 0083                   _RB5_InterruptHandler_HIGH 0048  
                                       prod 000FF3                                         tosl 000FFD  
                                       wreg 000FE8                       relay_initialize@F3039 0056  
                gpio_pin_logic_write@my_pin 0080                             __end_of_RB4_ISR 1D5A  
                           __end_of_RB5_ISR 1D40                             __end_of_RB6_ISR 1D26  
                           __end_of_RB7_ISR 1D0C                                        l4000 15A6  
                                      l4010 15F0                                        l4002 15AC  
                                      l4012 160C                                        l4004 15C8  
                                      l4020 1634                                        l4014 1612  
                                      l4006 15CE                                        l4022 1672  
                                      l4030 1BB0                                        l4016 162E  
                                      l4008 15EA                                        l4032 1BB0  
                                      l4034 1BC4                                        l4050 16AE  
                                      l4042 1676                                        l4036 1BCC  
                                      l4052 16CA                                        l4044 1676  
                                      l4070 17DC                                        l4038 1BE0  
                                      l4046 168A                                        l4048 1692  
                                      l4056 16E6                                        l4074 1802  
                                      l4066 17C4                                        l4058 1724  
                                      l4170 1862                                        l4076 1840  
                                      l4068 17CA                                        l4180 18B0  
                                      l4172 1884                                        l4164 1844  
                                      l4190 18D6                                        l4174 1886  
                                      l4166 1844                                        l4192 1906  
                                      l4184 18BE                                        l4176 189A  
                                      l4168 1848                                        l3810 12E4  
                                      l4194 1916                                        l4186 18BE  
                                      l4178 18AC                                        l3820 13D0  
                                      l3812 1306                                        l4196 1926  
                                      l4188 18D2                                        l3814 130E  
                                      l3822 1412                                        l3806 12CC  
                                      l3830 1CC6                                        l3816 1372  
                                      l3808 12D2                                        l3832 1CCC  
                                      l3834 1CDE                                        l3850 1CC2  
                                      l3842 1C9A                                        l3836 1CE6  
                                      l3844 1CA0                                        l3860 1C8E  
                                      l3950 19B4                                        l3838 1CEE  
                                      l3846 1CB2                                        l3862 1C96  
                                      l3854 1C6E                                        l3790 1458  
                                      l3782 1416                                        l3870 1B06  
                                      l4654 1A96                                        l3952 19C6  
                                      l3848 1CBA                                        l3856 1C74  
                                      l3792 14BC                                        l3784 141C  
                                      l3872 1B0E                                        l3970 1A28  
                                      l3858 1C86                                        l3786 142E  
                                      l3874 1B3E                                        l3866 1AF2  
                                      l3972 1A3A                                        l3956 19E0  
                                      l3948 19AE                                        l4860 1706  
                                      l3796 151A                                        l3788 1450  
                                      l3868 1AF2                                        l4870 1A74  
                                      l3958 1A1E                                        l3990 154E  
                                      l4862 13FC                                        l3798 1544  
                                      l3976 1A54                                        l3968 1A22  
                                      l3992 1560                                        l4864 1822  
                                      l3978 1A92                                        l4866 1654  
                                      l3994 1568                                        l4858 152E  
                                      l4868 1A00                                        l3996 1584  
                                      l3988 1548                                        l3998 158A  
                                      STR_1 1011                                        u3000 1560  
                                      u3001 155C                                        u3010 1584  
                                      u3011 1580                                        u3020 15A6  
                                      u3021 15A2                                        _LATA 000F89  
                                      u3030 15C8                                        _LATB 000F8A  
                                      u3031 15C4                                        _LATC 000F8B  
                                      u3040 15EA                                        u3200 18D2  
                                      _LATD 000F8C                                        u3041 15E6  
                                      u3201 18CE                                        _LATE 000F8D  
                                      u3050 160C                                        u3051 1608  
                                      u3060 162E                                        u3061 162A  
                                      u3070 1BC4                                        u3071 1BC0  
                                      u3080 168A                                        u3081 1686  
                                      u3090 17DC                                        u3091 17D8  
                                      u3190 18AC                                        u3191 18A8  
                                      u2800 142E                                        u2801 142A  
                                      u3185 1896                                        u2810 1450  
                                      u2811 144C                                        u3187 189A  
                                      u2900 1CDE                                        u2901 1CDA  
                                      u2910 1CB2                                        u2911 1CAE  
                                      u2840 12E4                                        u2920 1C86  
                                      u2824 1478                                        u2841 12E0  
                                      u2921 1C82                                        u2825 1474  
                                      u2850 1306                                        u2834 14DC  
                                      u2930 1B06                                        u2851 1302  
                                      u2835 14D8                                        u2931 1B02  
                                      u2880 13E8                                        u2864 132E  
                                      u2881 13E2                                        u2865 132A  
                                      u2890 13EA                                        u2874 1392  
                                      u2875 138E                                        u2980 19C6  
                                      u2981 19C2                                        u2990 1A3A  
                                      u2991 1A36                     ??_gpio_pin_logic_toggle 005D  
                  _RB4_InterruptHandler_LOW 004A                                        _led1 0037  
                                      _led2 0036                                        _led3 0035  
                                      _main 1A96                    _RB7_InterruptHandler_LOW 003E  
                                      fsr2h 000FDA                                        indf2 000FDF  
                                      fsr1l 000FE1                                        fsr2l 000FD9  
                  ?_gpio_pin_direction_init 0080                                        btemp 006D  
                 ?_INT2_SetInterruptHandler 0080                                        prodh 000FF4  
                                      prodl 000FF3                                        start 000E  
                              ___param_bank 000000                        __end_of_Int0_APP_ISR 1D76  
                      __end_of_Int1_APP_ISR 1D68                            __end_of_INT0_ISR 1C6E  
                          __end_of_INT1_ISR 1C40                            __end_of_INT2_ISR 1C12  
                      __end_of_Int2_APP_ISR 1D84                   ?_Interrupt_INTx_Edge_Init 0080  
                                     ?_main 005B                                       i2l400 17C2  
                                     i2l452 1D66                                       i2l620 1C6C  
                                     i2l294 19AC                                       i2l630 1C10  
                                     i2l710 1070                                       i2l455 1D82  
                                     i2l720 11A0                                       i2l712 1090  
                                     i2l449 1D74                                       i2l625 1C3E  
                                     i2l641 1D58                                       i2l722 11E4  
                                     i2l714 10D4                                       i2l652 1D3E  
                                     i2l724 1228                                       i2l716 1118  
                                     i2l708 1050                                       i2l726 126C  
                                     i2l718 115C                                       i2l663 1D24  
                                     i2l729 12B0                                       i2l674 1D0A  
                       relay_turn_off@F3049 0054                                       _PORTA 000F80  
                                     _PORTB 000F81                                       _PORTC 000F82  
                                     _PORTD 000F83                                       _PORTE 000F84  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                    Interrupt_INTx_Enable@ret 0084  
                  _INT1_SetInterruptHandler 1C9A                                       pclath 000FFA  
                                     pclatu 000FFB                                       tablat 000FF5  
                                     ttemp5 006E                                       ttemp6 0071  
                                     ttemp7 0075                                       status 000FD8  
                                     wtemp8 006E                      _Interrupt_INTx_Disable 19AE  
 Interrupt_INTx_SetInterruptHandler@int_obj 0083                             __initialization 1B7A  
                              __end_of_main 1AF2                 INT1_SetInterruptHandler@ret 0082  
                                    ??_main 006D                               __activetblptr 000003  
                          led_turn_on@F3050 0059                                   ??_RB4_ISR 005B  
                                 ??_RB5_ISR 005B                                   ??_RB6_ISR 005B  
                                 ??_RB7_ISR 005B                                      i2l3160 1C12  
                                    i2l3154 1C40                                      i2l3162 1C14  
                                    i2l3170 1BF8                                      i2l3156 1C42  
                                    i2l3164 1C26                                      i2l2710 1768  
                                    i2l2702 1728                                      i2l3158 1C54  
                                    i2l3166 1BE4                                      i2l1910 1D28  
                                    i2l2712 17C0                                      i2l2704 172C  
                                    i2l3168 1BE6                                      i2l1904 1D58  
                                    i2l1912 1D2A                                      i2l2706 173E  
              Interrupt_INTx_Enable@int_obj 0080                                      i2l2708 1760  
                                    i2l1932 1D24                                      i2l1924 1D0E  
                                    i2l1940 1CF6                                      i2l3700 1152  
                                    i2l2902 1D68                                      i2l1918 1D3E  
                                    i2l1926 1D10                                      i2l3710 1196  
                                    i2l3702 1156                                      i2l2904 1D5A  
                                    i2l3720 11DA                                      i2l3712 119A  
                                    i2l3704 116A                                      i2l2770 1954  
                                    i2l2906 1D76                                      i2l1946 1D0A  
                                    i2l1938 1CF4                                      i2l3730 121E  
                                    i2l3722 11DE                                      i2l3714 11AE  
                                    i2l3706 1178                                      i2l2780 19A0  
                                    i2l2772 1976                                      i2l2764 1938  
                                    i2l3740 1262                                      i2l3732 1222  
                                    i2l3724 11F2                                      i2l3716 11BC  
                                    i2l3708 1186                                      i2l3660 1030  
                                    i2l2774 1978                                      i2l2766 1938  
                                    i2l3750 12A6                                      i2l3742 1266  
                                    i2l3734 1236                                      i2l3726 1200  
                                    i2l3718 11CA                                      i2l3670 107E  
                                    i2l3662 103E                                      i2l2776 198A  
                                    i2l2768 193C                                      i2l1896 1D42  
                                    i2l3752 12AA                                      i2l3744 127A  
                                    i2l3736 1244                                      i2l3728 120E  
                                    i2l3680 10CA                                      i2l3672 108C  
                                    i2l3664 104C                                      i2l2778 199C  
                                    i2l1898 1D44                                      i2l3746 1288  
                                    i2l3738 1252                                      i2l3690 110E  
                                    i2l3682 10CE                                      i2l3674 109E  
                                    i2l3666 105E                                      i2l3748 1296  
                                    i2l3692 1112                                      i2l3684 10E2  
                                    i2l3676 10AC                                      i2l3668 106C  
                                    i2l3694 1126                                      i2l3686 10F0  
                                    i2l3678 10BA                                      i2l3696 1134  
                                    i2l3688 10FE                                      i2l3698 1142  
                ?_Interrupt_INTx_Clear_Flag 0080                            __end_of_led_init 18BE  
                                    clear_0 1BA0                                      isa$std 000001  
                 gpio_pin_logic_write@logic 0082               __end_of_Interrupt_INTx_Enable 1844  
                             led_init@F3045 005A                                __pdataCOMRAM 0001  
                              __mediumconst 0000                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
  INT2_SetInterruptHandler@InterruptHandler 0080    INT1_SetInterruptHandler@InterruptHandler 0080  
  INT0_SetInterruptHandler@InterruptHandler 0080                                  __accesstop 0080  
                   __end_of__initialization 1BA6                                   ?_INT0_ISR 005B  
                                 ?_INT1_ISR 005B                                   ?_INT2_ISR 005B  
                             ___rparam_used 000001           __end_of_Interrupt_INTx_Clear_Flag 1A96  
                   _Interrupt_INTx_Pin_Init 1BB0                           RB5_ISR@RB5_Source 005B  
                            __pcstackCOMRAM 005B            __end_of_INT2_SetInterruptHandler 1C9A  
               __end_of_Interrupt_INTx_Init 1938                                _Int0_APP_ISR 1D68  
                              _Int1_APP_ISR 1D5A                                _Int2_APP_ISR 1D76  
                     _INT0_InterruptHandler 0052                                  ??_INT0_ISR 0067  
                                ??_INT1_ISR 0067                                  ??_INT2_ISR 0067  
             __end_of_gpio_pin_logic_toggle 17C4            __end_of_Interrupt_INTx_Edge_Init 1676  
                         led_turn_off@F3055 0058                             led_toggle@F3060 0057  
__end_of_Interrupt_INTx_SetInterruptHandler 1728        ??_Interrupt_INTx_SetInterruptHandler 0085  
       ?_Interrupt_INTx_SetInterruptHandler 0083          _Interrupt_INTx_SetInterruptHandler 1676  
                         RB7_ISR@RB7_Source 005B                  ??_INT1_SetInterruptHandler 006D  
                                   _RB4_ISR 1D40                                     _RB5_ISR 1D26  
                                   _RB6_ISR 1D0C                                     _RB7_ISR 1CF2  
                 _RB6_InterruptHandler_HIGH 0044                                     i2u53_40 1D54  
                                   i2u53_41 1D50                                     i2u54_40 1D3A  
                                   i2u54_41 1D36                                     i2u55_40 1D20  
                                   i2u55_41 1D1C                                     i2u56_40 1D06  
                                   i2u56_41 1D02                                   ?_led_init 008D  
                                _btn_values 1001                     ?_Interrupt_INTx_Disable 0080  
                                _led_toggle 1938                    _RB6_InterruptHandler_LOW 0042  
                 ??_Interrupt_INTx_Pin_Init 006D                   ?_INT0_SetInterruptHandler 0080  
                                   __Hparam 0000                                     __Lparam 0000  
                       _gpio_pin_initialize 1AF2                                __psmallconst 1000  
                                   __pcinit 1B7A                                     __ramtop 1000  
                                   __ptext0 1A96                                     __ptext1 1844  
                                   __ptext2 1AF2                                     __ptext3 1416  
                                   __ptext4 18BE                                     __ptext5 1676  
                                   __ptext6 1C6E                                     __ptext7 1C9A  
                                   __ptext8 1CC6                                     __ptext9 1BB0  
                      ?_gpio_pin_initialize 008A              __end_of_Interrupt_INTx_Disable 1A22  
                            __pintcode_body 1016                                  ??_led_init 008F  
                      end_of_initialization 1BA6                    _INT2_SetInterruptHandler 1C6E  
                                   int_func 1016                 ??_Interrupt_INTx_Clear_Flag 0082  
                                   postdec1 000FE5                                     postdec2 000FDD  
                  _Interrupt_INTx_Edge_Init 1548                                     postinc0 000FEE  
                                   postinc2 000FDE                       _INT1_InterruptHandler 0050  
                                 _PORTBbits 000F81                            _InterruptManager 0008  
               INT2_SetInterruptHandler@ret 0082                              led_init@my_led 008D  
                            led_init@my_pin 0090                       ??_gpio_pin_initialize 006D  
                               ?_led_toggle 0063                 Interrupt_INTx_Edge_Init@ret 0084  
                        relay_turn_on@F3044 0055                      Interrupt_INTx_Init@ret 008E  
             convert_uint16_to_string@F3195 0038                     _gpio_pin_direction_init 12CC  
                             __pidataCOMRAM 1B42               Interrupt_INTx_Disable@int_obj 0080  
                 _Interrupt_INTx_Clear_Flag 1A22                       _Interrupt_INTx_Enable 17C4  
                       start_initialization 1B7A                                    ?_RB4_ISR 005B  
                                  ?_RB5_ISR 005B                                    ?_RB6_ISR 005B  
                                  ?_RB7_ISR 005B                                 __pbssCOMRAM 0038  
          __end_of_INT0_SetInterruptHandler 1CF2                               __pcstackBANK0 0080  
                     _INT2_InterruptHandler 004E                __end_of_gpio_pin_logic_write 1548  
                     _gpio_pin_logic_toggle 1728                   ??_gpio_pin_direction_init 0082  
                                 __pintcode 0008                 gpio_pin_logic_toggle@my_pin 005B  
                    ?_Interrupt_INTx_Enable 0080                                 __smallconst 1000  
                 _RB4_InterruptHandler_HIGH 004C                  ??_INT2_SetInterruptHandler 006D  
                 gpio_pin_initialize@my_pin 008A                   _RB7_InterruptHandler_HIGH 0040  
           Interrupt_INTx_Edge_Init@int_obj 0080                  ??_Interrupt_INTx_Edge_Init 0082  
                  _RB5_InterruptHandler_LOW 0046                                    _INT0_ISR 1C40  
                                  _INT1_ISR 1C12                                    _INT2_ISR 1BE4  
                                  _RB4_Flag 0022                                    _RB5_Flag 0021  
                                  _RB6_Flag 0020                                    _RB7_Flag 001F  
                         RB4_ISR@RB4_Source 005B                   ?_INT1_SetInterruptHandler 0080  
                  __end_of_InterruptManager 12CC                                    i2u200_40 1C54  
                                  i2u200_41 1C50                                    i2u201_48 1C5A  
                                  i2u202_40 1C26                                    i2u201_49 1C6C  
                                  i2u202_41 1C22                                    i2u203_48 1C2C  
                                  i2u204_40 1BF8                                    i2u203_49 1C3E  
                                  i2u204_41 1BF4                                    i2u205_48 1BFE  
                                  i2u205_49 1C10                                    i2u154_40 173E  
                                  i2u250_40 10BA                                    i2u242_40 103E  
                                  i2u154_41 173A                                    i2u250_41 10B6  
                                  i2u242_41 103A                                    i2u155_40 1760  
                                  i2u251_40 10CA                                    i2u243_40 104C  
                                  i2u155_41 175C                                    i2u251_41 10C6  
                                  i2u243_41 1048                                    i2u260_40 116A  
                                  i2u252_40 10E2                                    i2u244_40 105E  
                                  i2u260_41 1166                                    i2u252_41 10DE  
                                  i2u244_41 105A                                    i2u156_44 1788  
                                  i2u156_45 1784                                    i2u261_40 1178  
                                  i2u253_40 10F0                                    i2u245_40 106C  
                                  i2u261_41 1174                                    i2u253_41 10EC  
                                  i2u245_41 1068                                    i2u270_40 120E  
                                  i2u262_40 1186                                    i2u254_40 10FE  
                                  i2u246_40 107E                                    i2u270_41 120A  
                                  i2u262_41 1182                                    i2u254_41 10FA  
                                  i2u246_41 107A                                    i2u271_40 121E  
                                  i2u263_40 1196                                    i2u255_40 110E  
                                  i2u247_40 108C                                    i2u271_41 121A  
                                  i2u263_41 1192                                    i2u255_41 110A  
                                  i2u247_41 1088                                    i2u167_45 1988  
                                  i2u167_47 198A                                    i2u168_40 199C  
                                  i2u272_40 1236                                    i2u264_40 11AE  
                                  i2u256_40 1126                                    i2u248_40 109E  
                                  i2u168_41 1998                                    i2u272_41 1232  
                                  i2u264_41 11AA                                    i2u256_41 1122  
                                  i2u248_41 109A                                    i2u273_40 1244  
                                  i2u265_40 11BC                                    i2u257_40 1134  
                                  i2u249_40 10AC                                    i2u273_41 1240  
                                  i2u265_41 11B8                                    i2u257_41 1130  
                                  i2u249_41 10A8                                    i2u274_40 1252  
                                  i2u266_40 11CA                                    i2u258_40 1142  
                                  i2u274_41 124E                                    i2u266_41 11C6  
                                  i2u258_41 113E                                    i2u275_40 1262  
                                  i2u267_40 11DA                                    i2u259_40 1152  
                                  i2u275_41 125E                                    i2u267_41 11D6  
                                  i2u259_41 114E                                    i2u276_40 127A  
                                  i2u268_40 11F2                                    i2u276_41 1276  
                                  i2u268_41 11EE                                    i2u277_40 1288  
                                  i2u269_40 1200                                    i2u277_41 1284  
                                  i2u269_41 11FC                                    i2u278_40 1296  
                                  i2u278_41 1292                                    i2u279_40 12A6  
                                  i2u279_41 12A2              Interrupt_INTx_Pin_Init@int_obj 0089  
                          led_toggle@my_led 0063                            led_toggle@my_pin 0066  
                                 _port_regs 000B                             fp__Int0_APP_ISR 0000  
                                 _tris_regs 0015                             fp__Int1_APP_ISR 0000  
                    gpio_pin_initialize@ret 008C             __end_of_gpio_pin_direction_init 1416  
                  gpio_pin_logic_toggle@ret 0062                             fp__Int2_APP_ISR 0000  
                               _INTCON2bits 000FF1                                 _INTCON3bits 000FF0  
                                 copy_data0 1B8E                    ?_Interrupt_INTx_Pin_Init 0089  
                  _INT0_SetInterruptHandler 1CC6                                ??_led_toggle 0065  
                    ?_gpio_pin_logic_toggle 005B                                    __Hrparam 0000  
                                  __Lrparam 0000                 INT0_SetInterruptHandler@ret 0082  
                         RB6_ISR@RB6_Source 005B                   Interrupt_INTx_Disable@ret 0084  
                Interrupt_INTx_Init@int_obj 008C                 __end_of_gpio_pin_initialize 1B42  
                        __end_of_btn_values 1011                          __end_of_led_toggle 19AE  
                      _gpio_pin_logic_write 1416                                    __ptext10 12CC  
                                  __ptext11 17C4                                    __ptext20 1BE4  
                                  __ptext12 1548                                    __ptext21 1C12  
                                  __ptext13 19AE                                    __ptext22 1C40  
                                  __ptext14 1A22                                    __ptext23 1D5A  
                                  __ptext24 1D68                                    __ptext16 1CF2  
                                  __ptext25 1D76                                    __ptext17 1D0C  
                                  __ptext26 1938                                    __ptext18 1D26  
                                  __ptext27 1728                                    __ptext19 1D40  
                                  __ptext28 0000                               ?_Int0_APP_ISR 005B  
                                  _int0_obj 002F                                    _int1_obj 0029  
                                  _int2_obj 0023                               ?_Int1_APP_ISR 005B  
                                  _led_init 1844                               ?_Int2_APP_ISR 005B  
          Interrupt_INTx_Clear_Flag@int_obj 0080                                    _lat_regs 0001  
                                  isa$xinst 000000                                    int$flags 006D  
                  ??_Interrupt_INTx_Disable 0082                         _Interrupt_INTx_Init 18BE  
                                _INTCONbits 000FF2             __end_of_Interrupt_INTx_Pin_Init 1BE4  
                     ?_gpio_pin_logic_write 0080                              ??_Int0_APP_ISR 0067  
                            ??_Int1_APP_ISR 0067                     gpio_pin_logic_write@ret 0089  
                            ??_Int2_APP_ISR 0067                                    intlevel2 0000  
              Interrupt_INTx_Clear_Flag@ret 0084                        ?_Interrupt_INTx_Init 008C  
     Interrupt_INTx_SetInterruptHandler@ret 0087                  Interrupt_INTx_Pin_Init@ret 008B  
                   ??_Interrupt_INTx_Enable 0082               gpio_pin_direction_init@my_pin 0080  
          __end_of_INT1_SetInterruptHandler 1CC6                  gpio_pin_direction_init@ret 0088  
                     ??_Interrupt_INTx_Init 006D                           ?_InterruptManager 005B  
