

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Aug 04 21:00:55 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Version 2.40
    24                           ; Generated 17/11/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4620 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000000                     
    59                           	psect	idataCOMRAM
    60   00FB46                     __pidataCOMRAM:
    61                           	callstack 0
    62                           
    63                           ;initializer for _lat_regs
    64   00FB46  89                 	db	137
    65   00FB47  0F                 	db	15
    66   00FB48  8A                 	db	138
    67   00FB49  0F                 	db	15
    68   00FB4A  8B                 	db	139
    69   00FB4B  0F                 	db	15
    70   00FB4C  8C                 	db	140
    71   00FB4D  0F                 	db	15
    72   00FB4E  8D                 	db	141
    73   00FB4F  0F                 	db	15
    74                           
    75                           ;initializer for _port_regs
    76   00FB50  80                 	db	128
    77   00FB51  0F                 	db	15
    78   00FB52  81                 	db	129
    79   00FB53  0F                 	db	15
    80   00FB54  82                 	db	130
    81   00FB55  0F                 	db	15
    82   00FB56  83                 	db	131
    83   00FB57  0F                 	db	15
    84   00FB58  84                 	db	132
    85   00FB59  0F                 	db	15
    86                           
    87                           ;initializer for _tris_regs
    88   00FB5A  92                 	db	146
    89   00FB5B  0F                 	db	15
    90   00FB5C  93                 	db	147
    91   00FB5D  0F                 	db	15
    92   00FB5E  94                 	db	148
    93   00FB5F  0F                 	db	15
    94   00FB60  95                 	db	149
    95   00FB61  0F                 	db	15
    96   00FB62  96                 	db	150
    97   00FB63  0F                 	db	15
    98                           
    99                           ;initializer for _btn_low
   100   00FB64  C9                 	db	201
   101   00FB65  01                 	db	1
   102   00FB66  01                 	db	1
   103                           
   104                           ;initializer for _btn_high
   105   00FB67  41                 	db	65
   106   00FB68  01                 	db	1
   107   00FB69  00                 	db	0
   108                           
   109                           ;initializer for _dcmotor2
   110   00FB6A  13                 	db	19
   111   00FB6B  1B                 	db	27
   112                           
   113                           ;initializer for _dcmotor1
   114   00FB6C  03                 	db	3
   115   00FB6D  0B                 	db	11
   116   000000                     _LATA	set	3977
   117   000000                     _PORTE	set	3972
   118   000000                     _PORTD	set	3971
   119   000000                     _PORTC	set	3970
   120   000000                     _PORTB	set	3969
   121   000000                     _PORTA	set	3968
   122   000000                     _TRISA	set	3986
   123   000000                     _TRISE	set	3990
   124   000000                     _TRISD	set	3989
   125   000000                     _TRISC	set	3988
   126   000000                     _TRISB	set	3987
   127   000000                     _LATE	set	3981
   128   000000                     _LATD	set	3980
   129   000000                     _LATC	set	3979
   130   000000                     _LATB	set	3978
   131                           
   132                           ; #config settings
   133                           
   134                           	psect	cinit
   135   00FB6E                     __pcinit:
   136                           	callstack 0
   137   00FB6E                     start_initialization:
   138                           	callstack 0
   139   00FB6E                     __initialization:
   140                           	callstack 0
   141                           
   142                           ; Initialize objects allocated to COMRAM (40 bytes)
   143                           ; load TBLPTR registers with __pidataCOMRAM
   144   00FB6E  0E46               	movlw	low __pidataCOMRAM
   145   00FB70  6EF6               	movwf	tblptrl,c
   146   00FB72  0EFB               	movlw	high __pidataCOMRAM
   147   00FB74  6EF7               	movwf	tblptrh,c
   148   00FB76  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   149   00FB78  6EF8               	movwf	tblptru,c
   150   00FB7A  EE00  F001         	lfsr	0,__pdataCOMRAM
   151   00FB7E  EE10 F028          	lfsr	1,40
   152   00FB82                     copy_data0:
   153   00FB82  0009               	tblrd		*+
   154   00FB84  CFF5 FFEE          	movff	tablat,postinc0
   155   00FB88  50E5               	movf	postdec1,w,c
   156   00FB8A  50E1               	movf	fsr1l,w,c
   157   00FB8C  E1FA               	bnz	copy_data0
   158                           
   159                           ; Clear objects allocated to COMRAM (7 bytes)
   160   00FB8E  EE00  F03B         	lfsr	0,__pbssCOMRAM
   161   00FB92  0E07               	movlw	7
   162   00FB94                     clear_0:
   163   00FB94  6AEE               	clrf	postinc0,c
   164   00FB96  06E8               	decf	wreg,f,c
   165   00FB98  E1FD               	bnz	clear_0
   166   00FB9A                     end_of_initialization:
   167                           	callstack 0
   168   00FB9A                     __end_of__initialization:
   169                           	callstack 0
   170   00FB9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   171   00FB9C  6EF8               	movwf	tblptru,c
   172   00FB9E  0100               	movlb	0
   173   00FBA0  EF73  F07E         	goto	_main	;jump to C main() function
   174                           
   175                           	psect	bssCOMRAM
   176   00003B                     __pbssCOMRAM:
   177                           	callstack 0
   178   00003B                     relay_turn_off@F3049:
   179                           	callstack 0
   180   00003B                     	ds	1
   181   00003C                     relay_turn_on@F3044:
   182                           	callstack 0
   183   00003C                     	ds	1
   184   00003D                     relay_initialize@F3039:
   185                           	callstack 0
   186   00003D                     	ds	1
   187   00003E                     led_toggle@F3060:
   188                           	callstack 0
   189   00003E                     	ds	1
   190   00003F                     led_turn_off@F3055:
   191                           	callstack 0
   192   00003F                     	ds	1
   193   000040                     led_turn_on@F3050:
   194                           	callstack 0
   195   000040                     	ds	1
   196   000041                     led_init@F3045:
   197                           	callstack 0
   198   000041                     	ds	1
   199                           
   200                           	psect	dataCOMRAM
   201   000001                     __pdataCOMRAM:
   202                           	callstack 0
   203   000001                     _lat_regs:
   204                           	callstack 0
   205   000001                     	ds	10
   206   00000B                     _port_regs:
   207                           	callstack 0
   208   00000B                     	ds	10
   209   000015                     _tris_regs:
   210                           	callstack 0
   211   000015                     	ds	10
   212   00001F                     _btn_low:
   213                           	callstack 0
   214   00001F                     	ds	3
   215   000022                     _btn_high:
   216                           	callstack 0
   217   000022                     	ds	3
   218   000025                     _dcmotor2:
   219                           	callstack 0
   220   000025                     	ds	2
   221   000027                     _dcmotor1:
   222                           	callstack 0
   223   000027                     	ds	2
   224                           
   225                           	psect	cstackCOMRAM
   226   000029                     __pcstackCOMRAM:
   227                           	callstack 0
   228   000029                     gpio_pin_direction_init@my_pin:
   229                           	callstack 0
   230   000029                     gpio_pin_logic_write@my_pin:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x0
   234   000029                     	ds	2
   235   00002B                     ??_gpio_pin_direction_init:
   236   00002B                     gpio_pin_logic_write@logic:
   237                           	callstack 0
   238                           
   239                           ; 1 bytes @ 0x2
   240   00002B                     	ds	1
   241   00002C                     ??_gpio_pin_logic_write:
   242                           
   243                           ; 1 bytes @ 0x3
   244   00002C                     	ds	5
   245   000031                     gpio_pin_direction_init@ret:
   246                           	callstack 0
   247                           
   248                           ; 1 bytes @ 0x8
   249   000031                     	ds	1
   250   000032                     gpio_pin_logic_write@ret:
   251                           	callstack 0
   252                           
   253                           ; 1 bytes @ 0x9
   254   000032                     	ds	1
   255   000033                     gpio_pin_initialize@my_pin:
   256                           	callstack 0
   257   000033                     dc_motor_move_right@my_dcmotor:
   258                           	callstack 0
   259   000033                     dc_motor_move_left@my_dcmotor:
   260                           	callstack 0
   261   000033                     dc_motor_stop@my_dcmotor:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0xA
   265   000033                     	ds	2
   266   000035                     gpio_pin_initialize@ret:
   267                           	callstack 0
   268   000035                     dc_motor_move_right@ret:
   269                           	callstack 0
   270   000035                     dc_motor_move_left@ret:
   271                           	callstack 0
   272   000035                     dc_motor_stop@ret:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0xC
   276   000035                     	ds	1
   277   000036                     dc_motor_initialize@my_dcmotor:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0xD
   281   000036                     	ds	2
   282   000038                     dc_motor_initialize@ret:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0xF
   286   000038                     	ds	1
   287   000039                     ??_main:
   288                           
   289                           ; 1 bytes @ 0x10
   290   000039                     	ds	2
   291                           
   292 ;;
   293 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   294 ;;
   295 ;; *************** function _main *****************
   296 ;; Defined at:
   297 ;;		line 47 in file "app.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;		None
   300 ;; Auto vars:     Size  Location     Type
   301 ;;		None
   302 ;; Return value:  Size  Location     Type
   303 ;;                  2  171[None  ] int 
   304 ;; Registers used:
   305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   306 ;; Tracked objects:
   307 ;;		On entry : 0/0
   308 ;;		On exit  : 0/0
   309 ;;		Unchanged: 0/0
   310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   313 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   314 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   315 ;;Total ram usage:        2 bytes
   316 ;; Hardware stack levels required when called: 3
   317 ;; This function calls:
   318 ;;		_dc_motor_initialize
   319 ;;		_dc_motor_move_left
   320 ;;		_dc_motor_move_right
   321 ;;		_dc_motor_stop
   322 ;; This function is called by:
   323 ;;		Startup code after reset
   324 ;; This function uses a non-reentrant model
   325 ;;
   326                           
   327                           	psect	text0
   328   00FCE6                     __ptext0:
   329                           	callstack 0
   330   00FCE6                     _main:
   331                           	callstack 28
   332   00FCE6                     
   333                           ;app.c: 48:     dc_motor_initialize(&dcmotor1);
   334   00FCE6  0E27               	movlw	low _dcmotor1
   335   00FCE8  6E36               	movwf	dc_motor_initialize@my_dcmotor^0,c
   336   00FCEA  0E00               	movlw	high _dcmotor1
   337   00FCEC  6E37               	movwf	(dc_motor_initialize@my_dcmotor+1)^0,c
   338   00FCEE  ECD2  F07D         	call	_dc_motor_initialize	;wreg free
   339                           
   340                           ;app.c: 49:     dc_motor_initialize(&dcmotor2);
   341   00FCF2  0E25               	movlw	low _dcmotor2
   342   00FCF4  6E36               	movwf	dc_motor_initialize@my_dcmotor^0,c
   343   00FCF6  0E00               	movlw	high _dcmotor2
   344   00FCF8  6E37               	movwf	(dc_motor_initialize@my_dcmotor+1)^0,c
   345   00FCFA  ECD2  F07D         	call	_dc_motor_initialize	;wreg free
   346   00FCFE                     l172:
   347                           
   348                           ;app.c: 52:         dc_motor_move_left(&dcmotor1);
   349   00FCFE  0E27               	movlw	low _dcmotor1
   350   00FD00  6E33               	movwf	dc_motor_move_left@my_dcmotor^0,c
   351   00FD02  0E00               	movlw	high _dcmotor1
   352   00FD04  6E34               	movwf	(dc_motor_move_left@my_dcmotor+1)^0,c
   353   00FD06  ECEE  F07D         	call	_dc_motor_move_left	;wreg free
   354                           
   355                           ;app.c: 53:         dc_motor_move_left(&dcmotor2);
   356   00FD0A  0E25               	movlw	low _dcmotor2
   357   00FD0C  6E33               	movwf	dc_motor_move_left@my_dcmotor^0,c
   358   00FD0E  0E00               	movlw	high _dcmotor2
   359   00FD10  6E34               	movwf	(dc_motor_move_left@my_dcmotor+1)^0,c
   360   00FD12  ECEE  F07D         	call	_dc_motor_move_left	;wreg free
   361   00FD16                     
   362                           ;app.c: 54:         _delay((unsigned long)((2000)*(4000000UL/4000.0)));
   363   00FD16  0E0B               	movlw	11
   364   00FD18  6E3A               	movwf	(??_main+1)^0,c
   365   00FD1A  0E26               	movlw	38
   366   00FD1C  6E39               	movwf	??_main^0,c
   367   00FD1E  0E5E               	movlw	94
   368   00FD20                     u727:
   369   00FD20  2EE8               	decfsz	wreg,f,c
   370   00FD22  D7FE               	bra	u727
   371   00FD24  2E39               	decfsz	??_main^0,f,c
   372   00FD26  D7FC               	bra	u727
   373   00FD28  2E3A               	decfsz	(??_main+1)^0,f,c
   374   00FD2A  D7FA               	bra	u727
   375   00FD2C                     
   376                           ;app.c: 55:         dc_motor_move_right(&dcmotor1);
   377   00FD2C  0E27               	movlw	low _dcmotor1
   378   00FD2E  6E33               	movwf	dc_motor_move_right@my_dcmotor^0,c
   379   00FD30  0E00               	movlw	high _dcmotor1
   380   00FD32  6E34               	movwf	(dc_motor_move_right@my_dcmotor+1)^0,c
   381   00FD34  EC0E  F07E         	call	_dc_motor_move_right	;wreg free
   382   00FD38                     
   383                           ;app.c: 56:         dc_motor_stop(&dcmotor2);
   384   00FD38  0E25               	movlw	low _dcmotor2
   385   00FD3A  6E33               	movwf	dc_motor_stop@my_dcmotor^0,c
   386   00FD3C  0E00               	movlw	high _dcmotor2
   387   00FD3E  6E34               	movwf	(dc_motor_stop@my_dcmotor+1)^0,c
   388   00FD40  EC2E  F07E         	call	_dc_motor_stop	;wreg free
   389   00FD44                     
   390                           ;app.c: 57:         _delay((unsigned long)((2000)*(4000000UL/4000.0)));
   391   00FD44  0E0B               	movlw	11
   392   00FD46  6E3A               	movwf	(??_main+1)^0,c
   393   00FD48  0E26               	movlw	38
   394   00FD4A  6E39               	movwf	??_main^0,c
   395   00FD4C  0E5E               	movlw	94
   396   00FD4E                     u737:
   397   00FD4E  2EE8               	decfsz	wreg,f,c
   398   00FD50  D7FE               	bra	u737
   399   00FD52  2E39               	decfsz	??_main^0,f,c
   400   00FD54  D7FC               	bra	u737
   401   00FD56  2E3A               	decfsz	(??_main+1)^0,f,c
   402   00FD58  D7FA               	bra	u737
   403                           
   404                           ;app.c: 58:         dc_motor_move_right(&dcmotor2);
   405   00FD5A  0E25               	movlw	low _dcmotor2
   406   00FD5C  6E33               	movwf	dc_motor_move_right@my_dcmotor^0,c
   407   00FD5E  0E00               	movlw	high _dcmotor2
   408   00FD60  6E34               	movwf	(dc_motor_move_right@my_dcmotor+1)^0,c
   409   00FD62  EC0E  F07E         	call	_dc_motor_move_right	;wreg free
   410                           
   411                           ;app.c: 59:         dc_motor_stop(&dcmotor1);
   412   00FD66  0E27               	movlw	low _dcmotor1
   413   00FD68  6E33               	movwf	dc_motor_stop@my_dcmotor^0,c
   414   00FD6A  0E00               	movlw	high _dcmotor1
   415   00FD6C  6E34               	movwf	(dc_motor_stop@my_dcmotor+1)^0,c
   416   00FD6E  EC2E  F07E         	call	_dc_motor_stop	;wreg free
   417   00FD72                     
   418                           ;app.c: 60:         _delay((unsigned long)((2000)*(4000000UL/4000.0)));
   419   00FD72  0E0B               	movlw	11
   420   00FD74  6E3A               	movwf	(??_main+1)^0,c
   421   00FD76  0E26               	movlw	38
   422   00FD78  6E39               	movwf	??_main^0,c
   423   00FD7A  0E5E               	movlw	94
   424   00FD7C                     u747:
   425   00FD7C  2EE8               	decfsz	wreg,f,c
   426   00FD7E  D7FE               	bra	u747
   427   00FD80  2E39               	decfsz	??_main^0,f,c
   428   00FD82  D7FC               	bra	u747
   429   00FD84  2E3A               	decfsz	(??_main+1)^0,f,c
   430   00FD86  D7FA               	bra	u747
   431   00FD88  EF7F  F07E         	goto	l172
   432   00FD8C  EF00  F000         	goto	start
   433   00FD90                     __end_of_main:
   434                           	callstack 0
   435                           
   436 ;; *************** function _dc_motor_stop *****************
   437 ;; Defined at:
   438 ;;		line 36 in file "ECU_L/DC_MOTOR/dcmotor.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;  my_dcmotor      2   10[COMRAM] PTR const struct .
   441 ;;		 -> dcmotor2(2), dcmotor1(2), 
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  ret             1   12[COMRAM] unsigned char 
   444 ;; Return value:  Size  Location     Type
   445 ;;                  1    wreg      unsigned char 
   446 ;; Registers used:
   447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   448 ;; Tracked objects:
   449 ;;		On entry : 0/0
   450 ;;		On exit  : 0/0
   451 ;;		Unchanged: 0/0
   452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;Total ram usage:        3 bytes
   458 ;; Hardware stack levels used: 1
   459 ;; Hardware stack levels required when called: 1
   460 ;; This function calls:
   461 ;;		_gpio_pin_logic_write
   462 ;; This function is called by:
   463 ;;		_main
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467                           	psect	text1
   468   00FC5C                     __ptext1:
   469                           	callstack 0
   470   00FC5C                     _dc_motor_stop:
   471                           	callstack 29
   472   00FC5C                     
   473                           ;ECU_L/DC_MOTOR/dcmotor.c: 38:     if(((void*)0) == my_dcmotor){
   474   00FC5C  5033               	movf	dc_motor_stop@my_dcmotor^0,w,c
   475   00FC5E  1034               	iorwf	(dc_motor_stop@my_dcmotor+1)^0,w,c
   476   00FC60  A4D8               	btfss	status,2,c
   477   00FC62  EF35  F07E         	goto	u621
   478   00FC66  EF37  F07E         	goto	u620
   479   00FC6A                     u621:
   480   00FC6A  EF39  F07E         	goto	l1393
   481   00FC6E                     u620:
   482   00FC6E                     
   483                           ;ECU_L/DC_MOTOR/dcmotor.c: 40:     }
   484   00FC6E  EF4D  F07E         	goto	l247
   485   00FC72                     l1393:
   486                           
   487                           ;ECU_L/DC_MOTOR/dcmotor.c: 42:         ret = gpio_pin_logic_write(&(my_dcmotor->dcmotorp
      +                          ins[0]), gpio_low);
   488   00FC72  C033  F029         	movff	dc_motor_stop@my_dcmotor,gpio_pin_logic_write@my_pin
   489   00FC76  C034  F02A         	movff	dc_motor_stop@my_dcmotor+1,gpio_pin_logic_write@my_pin+1
   490   00FC7A  0E00               	movlw	0
   491   00FC7C  6E2B               	movwf	gpio_pin_logic_write@logic^0,c
   492   00FC7E  ECC8  F07E         	call	_gpio_pin_logic_write	;wreg free
   493   00FC82  6E35               	movwf	dc_motor_stop@ret^0,c
   494                           
   495                           ;ECU_L/DC_MOTOR/dcmotor.c: 43:         ret = gpio_pin_logic_write(&(my_dcmotor->dcmotorp
      +                          ins[1]), gpio_low);
   496   00FC84  0E01               	movlw	1
   497   00FC86  2433               	addwf	dc_motor_stop@my_dcmotor^0,w,c
   498   00FC88  6E29               	movwf	gpio_pin_logic_write@my_pin^0,c
   499   00FC8A  0E00               	movlw	0
   500   00FC8C  2034               	addwfc	(dc_motor_stop@my_dcmotor+1)^0,w,c
   501   00FC8E  6E2A               	movwf	(gpio_pin_logic_write@my_pin+1)^0,c
   502   00FC90  0E00               	movlw	0
   503   00FC92  6E2B               	movwf	gpio_pin_logic_write@logic^0,c
   504   00FC94  ECC8  F07E         	call	_gpio_pin_logic_write	;wreg free
   505   00FC98  6E35               	movwf	dc_motor_stop@ret^0,c
   506   00FC9A                     l247:
   507   00FC9A  0012               	return		;funcret
   508   00FC9C                     __end_of_dc_motor_stop:
   509                           	callstack 0
   510                           
   511 ;; *************** function _dc_motor_move_right *****************
   512 ;; Defined at:
   513 ;;		line 14 in file "ECU_L/DC_MOTOR/dcmotor.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;  my_dcmotor      2   10[COMRAM] PTR const struct .
   516 ;;		 -> dcmotor2(2), dcmotor1(2), 
   517 ;; Auto vars:     Size  Location     Type
   518 ;;  ret             1   12[COMRAM] unsigned char 
   519 ;; Return value:  Size  Location     Type
   520 ;;                  1    wreg      unsigned char 
   521 ;; Registers used:
   522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   529 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;Total ram usage:        3 bytes
   533 ;; Hardware stack levels used: 1
   534 ;; Hardware stack levels required when called: 1
   535 ;; This function calls:
   536 ;;		_gpio_pin_logic_write
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text2
   543   00FC1C                     __ptext2:
   544                           	callstack 0
   545   00FC1C                     _dc_motor_move_right:
   546                           	callstack 29
   547   00FC1C                     
   548                           ;ECU_L/DC_MOTOR/dcmotor.c: 16:     if(((void*)0) == my_dcmotor){
   549   00FC1C  5033               	movf	dc_motor_move_right@my_dcmotor^0,w,c
   550   00FC1E  1034               	iorwf	(dc_motor_move_right@my_dcmotor+1)^0,w,c
   551   00FC20  A4D8               	btfss	status,2,c
   552   00FC22  EF15  F07E         	goto	u611
   553   00FC26  EF17  F07E         	goto	u610
   554   00FC2A                     u611:
   555   00FC2A  EF19  F07E         	goto	l1383
   556   00FC2E                     u610:
   557   00FC2E                     
   558                           ;ECU_L/DC_MOTOR/dcmotor.c: 18:     }
   559   00FC2E  EF2D  F07E         	goto	l237
   560   00FC32                     l1383:
   561                           
   562                           ;ECU_L/DC_MOTOR/dcmotor.c: 20:         ret = gpio_pin_logic_write(&(my_dcmotor->dcmotorp
      +                          ins[0]), gpio_high);
   563   00FC32  C033  F029         	movff	dc_motor_move_right@my_dcmotor,gpio_pin_logic_write@my_pin
   564   00FC36  C034  F02A         	movff	dc_motor_move_right@my_dcmotor+1,gpio_pin_logic_write@my_pin+1
   565   00FC3A  0E01               	movlw	1
   566   00FC3C  6E2B               	movwf	gpio_pin_logic_write@logic^0,c
   567   00FC3E  ECC8  F07E         	call	_gpio_pin_logic_write	;wreg free
   568   00FC42  6E35               	movwf	dc_motor_move_right@ret^0,c
   569                           
   570                           ;ECU_L/DC_MOTOR/dcmotor.c: 21:         ret = gpio_pin_logic_write(&(my_dcmotor->dcmotorp
      +                          ins[1]), gpio_low);
   571   00FC44  0E01               	movlw	1
   572   00FC46  2433               	addwf	dc_motor_move_right@my_dcmotor^0,w,c
   573   00FC48  6E29               	movwf	gpio_pin_logic_write@my_pin^0,c
   574   00FC4A  0E00               	movlw	0
   575   00FC4C  2034               	addwfc	(dc_motor_move_right@my_dcmotor+1)^0,w,c
   576   00FC4E  6E2A               	movwf	(gpio_pin_logic_write@my_pin+1)^0,c
   577   00FC50  0E00               	movlw	0
   578   00FC52  6E2B               	movwf	gpio_pin_logic_write@logic^0,c
   579   00FC54  ECC8  F07E         	call	_gpio_pin_logic_write	;wreg free
   580   00FC58  6E35               	movwf	dc_motor_move_right@ret^0,c
   581   00FC5A                     l237:
   582   00FC5A  0012               	return		;funcret
   583   00FC5C                     __end_of_dc_motor_move_right:
   584                           	callstack 0
   585                           
   586 ;; *************** function _dc_motor_move_left *****************
   587 ;; Defined at:
   588 ;;		line 25 in file "ECU_L/DC_MOTOR/dcmotor.c"
   589 ;; Parameters:    Size  Location     Type
   590 ;;  my_dcmotor      2   10[COMRAM] PTR const struct .
   591 ;;		 -> dcmotor2(2), dcmotor1(2), 
   592 ;; Auto vars:     Size  Location     Type
   593 ;;  ret             1   12[COMRAM] unsigned char 
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      unsigned char 
   596 ;; Registers used:
   597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   606 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   607 ;;Total ram usage:        3 bytes
   608 ;; Hardware stack levels used: 1
   609 ;; Hardware stack levels required when called: 1
   610 ;; This function calls:
   611 ;;		_gpio_pin_logic_write
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           	psect	text3
   618   00FBDC                     __ptext3:
   619                           	callstack 0
   620   00FBDC                     _dc_motor_move_left:
   621                           	callstack 29
   622   00FBDC                     
   623                           ;ECU_L/DC_MOTOR/dcmotor.c: 27:     if(((void*)0) == my_dcmotor){
   624   00FBDC  5033               	movf	dc_motor_move_left@my_dcmotor^0,w,c
   625   00FBDE  1034               	iorwf	(dc_motor_move_left@my_dcmotor+1)^0,w,c
   626   00FBE0  A4D8               	btfss	status,2,c
   627   00FBE2  EFF5  F07D         	goto	u601
   628   00FBE6  EFF7  F07D         	goto	u600
   629   00FBEA                     u601:
   630   00FBEA  EFF9  F07D         	goto	l1373
   631   00FBEE                     u600:
   632   00FBEE                     
   633                           ;ECU_L/DC_MOTOR/dcmotor.c: 29:     }
   634   00FBEE  EF0D  F07E         	goto	l242
   635   00FBF2                     l1373:
   636                           
   637                           ;ECU_L/DC_MOTOR/dcmotor.c: 31:         ret = gpio_pin_logic_write(&(my_dcmotor->dcmotorp
      +                          ins[0]), gpio_low);
   638   00FBF2  C033  F029         	movff	dc_motor_move_left@my_dcmotor,gpio_pin_logic_write@my_pin
   639   00FBF6  C034  F02A         	movff	dc_motor_move_left@my_dcmotor+1,gpio_pin_logic_write@my_pin+1
   640   00FBFA  0E00               	movlw	0
   641   00FBFC  6E2B               	movwf	gpio_pin_logic_write@logic^0,c
   642   00FBFE  ECC8  F07E         	call	_gpio_pin_logic_write	;wreg free
   643   00FC02  6E35               	movwf	dc_motor_move_left@ret^0,c
   644                           
   645                           ;ECU_L/DC_MOTOR/dcmotor.c: 32:         ret = gpio_pin_logic_write(&(my_dcmotor->dcmotorp
      +                          ins[1]), gpio_high);
   646   00FC04  0E01               	movlw	1
   647   00FC06  2433               	addwf	dc_motor_move_left@my_dcmotor^0,w,c
   648   00FC08  6E29               	movwf	gpio_pin_logic_write@my_pin^0,c
   649   00FC0A  0E00               	movlw	0
   650   00FC0C  2034               	addwfc	(dc_motor_move_left@my_dcmotor+1)^0,w,c
   651   00FC0E  6E2A               	movwf	(gpio_pin_logic_write@my_pin+1)^0,c
   652   00FC10  0E01               	movlw	1
   653   00FC12  6E2B               	movwf	gpio_pin_logic_write@logic^0,c
   654   00FC14  ECC8  F07E         	call	_gpio_pin_logic_write	;wreg free
   655   00FC18  6E35               	movwf	dc_motor_move_left@ret^0,c
   656   00FC1A                     l242:
   657   00FC1A  0012               	return		;funcret
   658   00FC1C                     __end_of_dc_motor_move_left:
   659                           	callstack 0
   660                           
   661 ;; *************** function _dc_motor_initialize *****************
   662 ;; Defined at:
   663 ;;		line 3 in file "ECU_L/DC_MOTOR/dcmotor.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;  my_dcmotor      2   13[COMRAM] PTR const struct .
   666 ;;		 -> dcmotor2(2), dcmotor1(2), 
   667 ;; Auto vars:     Size  Location     Type
   668 ;;  ret             1   15[COMRAM] unsigned char 
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      unsigned char 
   671 ;; Registers used:
   672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   678 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;Total ram usage:        3 bytes
   683 ;; Hardware stack levels used: 1
   684 ;; Hardware stack levels required when called: 2
   685 ;; This function calls:
   686 ;;		_gpio_pin_initialize
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text4
   693   00FBA4                     __ptext4:
   694                           	callstack 0
   695   00FBA4                     _dc_motor_initialize:
   696                           	callstack 28
   697   00FBA4                     
   698                           ;ECU_L/DC_MOTOR/dcmotor.c: 5:     if(((void*)0) == my_dcmotor){
   699   00FBA4  5036               	movf	dc_motor_initialize@my_dcmotor^0,w,c
   700   00FBA6  1037               	iorwf	(dc_motor_initialize@my_dcmotor+1)^0,w,c
   701   00FBA8  A4D8               	btfss	status,2,c
   702   00FBAA  EFD9  F07D         	goto	u591
   703   00FBAE  EFDB  F07D         	goto	u590
   704   00FBB2                     u591:
   705   00FBB2  EFDD  F07D         	goto	l1363
   706   00FBB6                     u590:
   707   00FBB6                     
   708                           ;ECU_L/DC_MOTOR/dcmotor.c: 7:     }
   709   00FBB6  EFED  F07D         	goto	l232
   710   00FBBA                     l1363:
   711                           
   712                           ;ECU_L/DC_MOTOR/dcmotor.c: 9:         ret = gpio_pin_initialize(&(my_dcmotor->dcmotorpin
      +                          s[0]));
   713   00FBBA  C036  F033         	movff	dc_motor_initialize@my_dcmotor,gpio_pin_initialize@my_pin
   714   00FBBE  C037  F034         	movff	dc_motor_initialize@my_dcmotor+1,gpio_pin_initialize@my_pin+1
   715   00FBC2  EC4E  F07E         	call	_gpio_pin_initialize	;wreg free
   716   00FBC6  6E38               	movwf	dc_motor_initialize@ret^0,c
   717                           
   718                           ;ECU_L/DC_MOTOR/dcmotor.c: 10:         ret = gpio_pin_initialize(&(my_dcmotor->dcmotorpi
      +                          ns[1]));
   719   00FBC8  0E01               	movlw	1
   720   00FBCA  2436               	addwf	dc_motor_initialize@my_dcmotor^0,w,c
   721   00FBCC  6E33               	movwf	gpio_pin_initialize@my_pin^0,c
   722   00FBCE  0E00               	movlw	0
   723   00FBD0  2037               	addwfc	(dc_motor_initialize@my_dcmotor+1)^0,w,c
   724   00FBD2  6E34               	movwf	(gpio_pin_initialize@my_pin+1)^0,c
   725   00FBD4  EC4E  F07E         	call	_gpio_pin_initialize	;wreg free
   726   00FBD8  6E38               	movwf	dc_motor_initialize@ret^0,c
   727   00FBDA                     l232:
   728   00FBDA  0012               	return		;funcret
   729   00FBDC                     __end_of_dc_motor_initialize:
   730                           	callstack 0
   731                           
   732 ;; *************** function _gpio_pin_initialize *****************
   733 ;; Defined at:
   734 ;;		line 79 in file "MCAL/GPIO/gpio.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  my_pin          2   10[COMRAM] PTR const struct .
   737 ;;		 -> relay_initialize@rel_pin(1), dcmotor2.dcmotorpins(2), dcmotor2(2), dcmotor1.dcmotorpins(2), 
   738 ;;		 -> dcmotor1(2), led_init@my_pin(1), 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  ret             1   12[COMRAM] unsigned char 
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      unsigned char 
   743 ;; Registers used:
   744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   750 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;Total ram usage:        3 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; Hardware stack levels required when called: 1
   757 ;; This function calls:
   758 ;;		_gpio_pin_direction_init
   759 ;;		_gpio_pin_logic_write
   760 ;; This function is called by:
   761 ;;		_dc_motor_initialize
   762 ;;		_led_init
   763 ;;		_button_inittialze
   764 ;;		_relay_initialize
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text5
   769   00FC9C                     __ptext5:
   770                           	callstack 0
   771   00FC9C                     _gpio_pin_initialize:
   772                           	callstack 28
   773   00FC9C                     
   774                           ;MCAL/GPIO/gpio.c: 81:     if (((void*)0) == my_pin){
   775   00FC9C  5033               	movf	gpio_pin_initialize@my_pin^0,w,c
   776   00FC9E  1034               	iorwf	(gpio_pin_initialize@my_pin+1)^0,w,c
   777   00FCA0  A4D8               	btfss	status,2,c
   778   00FCA2  EF55  F07E         	goto	u581
   779   00FCA6  EF57  F07E         	goto	u580
   780   00FCAA                     u581:
   781   00FCAA  EF5B  F07E         	goto	l1351
   782   00FCAE                     u580:
   783   00FCAE                     
   784                           ;MCAL/GPIO/gpio.c: 82:         ret = (Std_ReturnType)0x00;
   785   00FCAE  0E00               	movlw	0
   786   00FCB0  6E35               	movwf	gpio_pin_initialize@ret^0,c
   787                           
   788                           ;MCAL/GPIO/gpio.c: 83:     }
   789   00FCB2  EF71  F07E         	goto	l1353
   790   00FCB6                     l1351:
   791                           
   792                           ;MCAL/GPIO/gpio.c: 85:         ret = gpio_pin_direction_init(my_pin);
   793   00FCB6  C033  F029         	movff	gpio_pin_initialize@my_pin,gpio_pin_direction_init@my_pin
   794   00FCBA  C034  F02A         	movff	gpio_pin_initialize@my_pin+1,gpio_pin_direction_init@my_pin+1
   795   00FCBE  EC5E  F07F         	call	_gpio_pin_direction_init	;wreg free
   796   00FCC2  6E35               	movwf	gpio_pin_initialize@ret^0,c
   797                           
   798                           ;MCAL/GPIO/gpio.c: 86:         ret = gpio_pin_logic_write(my_pin, my_pin->logic);
   799   00FCC4  C033  F029         	movff	gpio_pin_initialize@my_pin,gpio_pin_logic_write@my_pin
   800   00FCC8  C034  F02A         	movff	gpio_pin_initialize@my_pin+1,gpio_pin_logic_write@my_pin+1
   801   00FCCC  C033  FFD9         	movff	gpio_pin_initialize@my_pin,fsr2l
   802   00FCD0  C034  FFDA         	movff	gpio_pin_initialize@my_pin+1,fsr2h
   803   00FCD4  0E00               	movlw	0
   804   00FCD6  BEDF               	btfsc	indf2,7,c
   805   00FCD8  0E01               	movlw	1
   806   00FCDA  6E2B               	movwf	gpio_pin_logic_write@logic^0,c
   807   00FCDC  ECC8  F07E         	call	_gpio_pin_logic_write	;wreg free
   808   00FCE0  6E35               	movwf	gpio_pin_initialize@ret^0,c
   809   00FCE2                     l1353:
   810                           
   811                           ;MCAL/GPIO/gpio.c: 88:     return ret;
   812   00FCE2  5035               	movf	gpio_pin_initialize@ret^0,w,c
   813   00FCE4  0012               	return		;funcret
   814   00FCE6                     __end_of_gpio_pin_initialize:
   815                           	callstack 0
   816                           
   817 ;; *************** function _gpio_pin_logic_write *****************
   818 ;; Defined at:
   819 ;;		line 41 in file "MCAL/GPIO/gpio.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  my_pin          2    0[COMRAM] PTR const struct .
   822 ;;		 -> relay_turn_off@rel_pin(1), relay_turn_on@rel_pin(1), relay_initialize@rel_pin(1), dcmotor2.dcmotorpins(2), 
   823 ;;		 -> dcmotor2(2), dcmotor1.dcmotorpins(2), dcmotor1(2), led_turn_off@my_pin(1), 
   824 ;;		 -> led_turn_on@my_pin(1), led_init@my_pin(1), 
   825 ;;  logic           1    2[COMRAM] unsigned char 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  ret             1    9[COMRAM] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      unsigned char 
   830 ;; Registers used:
   831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   837 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;Total ram usage:       10 bytes
   842 ;; Hardware stack levels used: 1
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_gpio_pin_initialize
   847 ;;		_dc_motor_move_right
   848 ;;		_dc_motor_move_left
   849 ;;		_dc_motor_stop
   850 ;;		_led_turn_on
   851 ;;		_led_turn_off
   852 ;;		_relay_turn_on
   853 ;;		_relay_turn_off
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text6
   858   00FD90                     __ptext6:
   859                           	callstack 0
   860   00FD90                     _gpio_pin_logic_write:
   861                           	callstack 29
   862   00FD90                     
   863                           ;MCAL/GPIO/gpio.c: 42:     Std_ReturnType ret = (Std_ReturnType)0x01;
   864   00FD90  0E01               	movlw	1
   865   00FD92  6E32               	movwf	gpio_pin_logic_write@ret^0,c
   866   00FD94                     
   867                           ;MCAL/GPIO/gpio.c: 43:     if ((((void*)0) == my_pin) || (my_pin->pin) > 7){
   868   00FD94  5029               	movf	gpio_pin_logic_write@my_pin^0,w,c
   869   00FD96  102A               	iorwf	(gpio_pin_logic_write@my_pin+1)^0,w,c
   870   00FD98  B4D8               	btfsc	status,2,c
   871   00FD9A  EFD1  F07E         	goto	u481
   872   00FD9E  EFD3  F07E         	goto	u480
   873   00FDA2                     u481:
   874   00FDA2  EFE4  F07E         	goto	l1303
   875   00FDA6                     u480:
   876   00FDA6  C029  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   877   00FDAA  C02A  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   878   00FDAE  30DF               	rrcf	223,w,c
   879   00FDB0  32E8               	rrcf	wreg,f,c
   880   00FDB2  32E8               	rrcf	wreg,f,c
   881   00FDB4  0B07               	andlw	7
   882   00FDB6  6E2C               	movwf	??_gpio_pin_logic_write^0,c
   883   00FDB8  0E07               	movlw	7
   884   00FDBA  642C               	cpfsgt	??_gpio_pin_logic_write^0,c
   885   00FDBC  EFE2  F07E         	goto	u491
   886   00FDC0  EFE4  F07E         	goto	u490
   887   00FDC4                     u491:
   888   00FDC4  EF47  F07F         	goto	l1311
   889   00FDC8                     u490:
   890   00FDC8                     l1303:
   891                           
   892                           ;MCAL/GPIO/gpio.c: 44:         ret = (Std_ReturnType)0x00;
   893   00FDC8  0E00               	movlw	0
   894   00FDCA  6E32               	movwf	gpio_pin_logic_write@ret^0,c
   895                           
   896                           ;MCAL/GPIO/gpio.c: 45:     }
   897   00FDCC  EF5C  F07F         	goto	l1313
   898   00FDD0                     l1305:
   899                           
   900                           ;MCAL/GPIO/gpio.c: 49:                 (*lat_regs[my_pin->port] &= ~(1<<my_pin->pin));
   901   00FDD0  C029  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   902   00FDD4  C02A  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   903   00FDD8  30DF               	rrcf	223,w,c
   904   00FDDA  32E8               	rrcf	wreg,f,c
   905   00FDDC  32E8               	rrcf	wreg,f,c
   906   00FDDE  0B07               	andlw	7
   907   00FDE0  6E2C               	movwf	??_gpio_pin_logic_write^0,c
   908   00FDE2  0E01               	movlw	1
   909   00FDE4  6E2D               	movwf	(??_gpio_pin_logic_write+1)^0,c
   910   00FDE6  2A2C               	incf	??_gpio_pin_logic_write^0,f,c
   911   00FDE8  EFF8  F07E         	goto	u504
   912   00FDEC                     u505:
   913   00FDEC  90D8               	bcf	status,0,c
   914   00FDEE  362D               	rlcf	(??_gpio_pin_logic_write+1)^0,f,c
   915   00FDF0                     u504:
   916   00FDF0  2E2C               	decfsz	??_gpio_pin_logic_write^0,f,c
   917   00FDF2  EFF6  F07E         	goto	u505
   918   00FDF6  502D               	movf	(??_gpio_pin_logic_write+1)^0,w,c
   919   00FDF8  0AFF               	xorlw	255
   920   00FDFA  6E2E               	movwf	(??_gpio_pin_logic_write+2)^0,c
   921   00FDFC  C029  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   922   00FE00  C02A  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   923   00FE04  50DF               	movf	223,w,c
   924   00FE06  0B07               	andlw	7
   925   00FE08  6E2F               	movwf	(??_gpio_pin_logic_write+3)^0,c
   926   00FE0A  502F               	movf	(??_gpio_pin_logic_write+3)^0,w,c
   927   00FE0C  0D02               	mullw	2
   928   00FE0E  0E01               	movlw	low _lat_regs
   929   00FE10  24F3               	addwf	243,w,c
   930   00FE12  6ED9               	movwf	fsr2l,c
   931   00FE14  0E00               	movlw	high _lat_regs
   932   00FE16  20F4               	addwfc	prodh,w,c
   933   00FE18  6EDA               	movwf	fsr2h,c
   934   00FE1A  CFDE F030          	movff	postinc2,??_gpio_pin_logic_write+4
   935   00FE1E  CFDD F031          	movff	postdec2,??_gpio_pin_logic_write+5
   936   00FE22  C030  FFD9         	movff	??_gpio_pin_logic_write+4,fsr2l
   937   00FE26  C031  FFDA         	movff	??_gpio_pin_logic_write+5,fsr2h
   938   00FE2A  502E               	movf	(??_gpio_pin_logic_write+2)^0,w,c
   939   00FE2C  16DF               	andwf	indf2,f,c
   940                           
   941                           ;MCAL/GPIO/gpio.c: 50:                 break;
   942   00FE2E  EF5C  F07F         	goto	l1313
   943   00FE32                     l1307:
   944                           
   945                           ;MCAL/GPIO/gpio.c: 52:                 (*lat_regs[my_pin->port] |=(1<<my_pin->pin));
   946   00FE32  C029  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   947   00FE36  C02A  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   948   00FE3A  30DF               	rrcf	223,w,c
   949   00FE3C  32E8               	rrcf	wreg,f,c
   950   00FE3E  32E8               	rrcf	wreg,f,c
   951   00FE40  0B07               	andlw	7
   952   00FE42  6E2C               	movwf	??_gpio_pin_logic_write^0,c
   953   00FE44  0E01               	movlw	1
   954   00FE46  6E2D               	movwf	(??_gpio_pin_logic_write+1)^0,c
   955   00FE48  2A2C               	incf	??_gpio_pin_logic_write^0,f,c
   956   00FE4A  EF29  F07F         	goto	u514
   957   00FE4E                     u515:
   958   00FE4E  90D8               	bcf	status,0,c
   959   00FE50  362D               	rlcf	(??_gpio_pin_logic_write+1)^0,f,c
   960   00FE52                     u514:
   961   00FE52  2E2C               	decfsz	??_gpio_pin_logic_write^0,f,c
   962   00FE54  EF27  F07F         	goto	u515
   963   00FE58  C029  FFD9         	movff	gpio_pin_logic_write@my_pin,fsr2l
   964   00FE5C  C02A  FFDA         	movff	gpio_pin_logic_write@my_pin+1,fsr2h
   965   00FE60  50DF               	movf	223,w,c
   966   00FE62  0B07               	andlw	7
   967   00FE64  6E2E               	movwf	(??_gpio_pin_logic_write+2)^0,c
   968   00FE66  502E               	movf	(??_gpio_pin_logic_write+2)^0,w,c
   969   00FE68  0D02               	mullw	2
   970   00FE6A  0E01               	movlw	low _lat_regs
   971   00FE6C  24F3               	addwf	243,w,c
   972   00FE6E  6ED9               	movwf	fsr2l,c
   973   00FE70  0E00               	movlw	high _lat_regs
   974   00FE72  20F4               	addwfc	prodh,w,c
   975   00FE74  6EDA               	movwf	fsr2h,c
   976   00FE76  CFDE F02F          	movff	postinc2,??_gpio_pin_logic_write+3
   977   00FE7A  CFDD F030          	movff	postdec2,??_gpio_pin_logic_write+4
   978   00FE7E  C02F  FFD9         	movff	??_gpio_pin_logic_write+3,fsr2l
   979   00FE82  C030  FFDA         	movff	??_gpio_pin_logic_write+4,fsr2h
   980   00FE86  502D               	movf	(??_gpio_pin_logic_write+1)^0,w,c
   981   00FE88  12DF               	iorwf	indf2,f,c
   982                           
   983                           ;MCAL/GPIO/gpio.c: 53:                 break;
   984   00FE8A  EF5C  F07F         	goto	l1313
   985   00FE8E                     l1311:
   986   00FE8E  502B               	movf	gpio_pin_logic_write@logic^0,w,c
   987   00FE90  6E2C               	movwf	??_gpio_pin_logic_write^0,c
   988   00FE92  6A2D               	clrf	(??_gpio_pin_logic_write+1)^0,c
   989                           
   990                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   991                           ; Switch size 1, requested type "simple"
   992                           ; Number of cases is 1, Range of values is 0 to 0
   993                           ; switch strategies available:
   994                           ; Name         Instructions Cycles
   995                           ; simple_byte            4     3 (average)
   996                           ;	Chosen strategy is simple_byte
   997   00FE94  502D               	movf	(??_gpio_pin_logic_write+1)^0,w,c
   998   00FE96  0A00               	xorlw	0	; case 0
   999   00FE98  B4D8               	btfsc	status,2,c
  1000   00FE9A  EF51  F07F         	goto	l1535
  1001   00FE9E  EFE4  F07E         	goto	l1303
  1002   00FEA2                     l1535:
  1003                           
  1004                           ; Switch size 1, requested type "simple"
  1005                           ; Number of cases is 2, Range of values is 0 to 1
  1006                           ; switch strategies available:
  1007                           ; Name         Instructions Cycles
  1008                           ; simple_byte            7     4 (average)
  1009                           ;	Chosen strategy is simple_byte
  1010   00FEA2  502C               	movf	??_gpio_pin_logic_write^0,w,c
  1011   00FEA4  0A00               	xorlw	0	; case 0
  1012   00FEA6  B4D8               	btfsc	status,2,c
  1013   00FEA8  EFE8  F07E         	goto	l1305
  1014   00FEAC  0A01               	xorlw	1	; case 1
  1015   00FEAE  B4D8               	btfsc	status,2,c
  1016   00FEB0  EF19  F07F         	goto	l1307
  1017   00FEB4  EFE4  F07E         	goto	l1303
  1018   00FEB8                     l1313:
  1019                           
  1020                           ;MCAL/GPIO/gpio.c: 57:     return ret;
  1021   00FEB8  5032               	movf	gpio_pin_logic_write@ret^0,w,c
  1022   00FEBA  0012               	return		;funcret
  1023   00FEBC                     __end_of_gpio_pin_logic_write:
  1024                           	callstack 0
  1025                           
  1026 ;; *************** function _gpio_pin_direction_init *****************
  1027 ;; Defined at:
  1028 ;;		line 13 in file "MCAL/GPIO/gpio.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;  my_pin          2    0[COMRAM] PTR const struct .
  1031 ;;		 -> relay_initialize@rel_pin(1), dcmotor2.dcmotorpins(2), dcmotor2(2), dcmotor1.dcmotorpins(2), 
  1032 ;;		 -> dcmotor1(2), led_init@my_pin(1), 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  ret             1    8[COMRAM] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      unsigned char 
  1037 ;; Registers used:
  1038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;Total ram usage:        9 bytes
  1049 ;; Hardware stack levels used: 1
  1050 ;; This function calls:
  1051 ;;		Nothing
  1052 ;; This function is called by:
  1053 ;;		_gpio_pin_initialize
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text7
  1058   00FEBC                     __ptext7:
  1059                           	callstack 0
  1060   00FEBC                     _gpio_pin_direction_init:
  1061                           	callstack 28
  1062   00FEBC                     
  1063                           ;MCAL/GPIO/gpio.c: 14:     Std_ReturnType ret = (Std_ReturnType)0x01;
  1064   00FEBC  0E01               	movlw	1
  1065   00FEBE  6E31               	movwf	gpio_pin_direction_init@ret^0,c
  1066   00FEC0                     
  1067                           ;MCAL/GPIO/gpio.c: 15:     if(((void*)0) == my_pin || my_pin->pin > 7){
  1068   00FEC0  5029               	movf	gpio_pin_direction_init@my_pin^0,w,c
  1069   00FEC2  102A               	iorwf	(gpio_pin_direction_init@my_pin+1)^0,w,c
  1070   00FEC4  B4D8               	btfsc	status,2,c
  1071   00FEC6  EF67  F07F         	goto	u521
  1072   00FECA  EF69  F07F         	goto	u520
  1073   00FECE                     u521:
  1074   00FECE  EF7A  F07F         	goto	l1327
  1075   00FED2                     u520:
  1076   00FED2  C029  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1077   00FED6  C02A  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1078   00FEDA  30DF               	rrcf	223,w,c
  1079   00FEDC  32E8               	rrcf	wreg,f,c
  1080   00FEDE  32E8               	rrcf	wreg,f,c
  1081   00FEE0  0B07               	andlw	7
  1082   00FEE2  6E2B               	movwf	??_gpio_pin_direction_init^0,c
  1083   00FEE4  0E07               	movlw	7
  1084   00FEE6  642B               	cpfsgt	??_gpio_pin_direction_init^0,c
  1085   00FEE8  EF78  F07F         	goto	u531
  1086   00FEEC  EF7A  F07F         	goto	u530
  1087   00FEF0                     u531:
  1088   00FEF0  EFDD  F07F         	goto	l1335
  1089   00FEF4                     u530:
  1090   00FEF4                     l1327:
  1091                           
  1092                           ;MCAL/GPIO/gpio.c: 16:         ret = (Std_ReturnType)0x00;
  1093   00FEF4  0E00               	movlw	0
  1094   00FEF6  6E31               	movwf	gpio_pin_direction_init@ret^0,c
  1095                           
  1096                           ;MCAL/GPIO/gpio.c: 17:     }
  1097   00FEF8  EFFE  F07F         	goto	l1337
  1098   00FEFC                     l1329:
  1099                           
  1100                           ;MCAL/GPIO/gpio.c: 21:                 (*tris_regs[my_pin->port] &= ~(1<<my_pin->pin));
  1101   00FEFC  C029  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1102   00FF00  C02A  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1103   00FF04  30DF               	rrcf	223,w,c
  1104   00FF06  32E8               	rrcf	wreg,f,c
  1105   00FF08  32E8               	rrcf	wreg,f,c
  1106   00FF0A  0B07               	andlw	7
  1107   00FF0C  6E2B               	movwf	??_gpio_pin_direction_init^0,c
  1108   00FF0E  0E01               	movlw	1
  1109   00FF10  6E2C               	movwf	(??_gpio_pin_direction_init+1)^0,c
  1110   00FF12  2A2B               	incf	??_gpio_pin_direction_init^0,f,c
  1111   00FF14  EF8E  F07F         	goto	u544
  1112   00FF18                     u545:
  1113   00FF18  90D8               	bcf	status,0,c
  1114   00FF1A  362C               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  1115   00FF1C                     u544:
  1116   00FF1C  2E2B               	decfsz	??_gpio_pin_direction_init^0,f,c
  1117   00FF1E  EF8C  F07F         	goto	u545
  1118   00FF22  502C               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  1119   00FF24  0AFF               	xorlw	255
  1120   00FF26  6E2D               	movwf	(??_gpio_pin_direction_init+2)^0,c
  1121   00FF28  C029  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1122   00FF2C  C02A  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1123   00FF30  50DF               	movf	223,w,c
  1124   00FF32  0B07               	andlw	7
  1125   00FF34  6E2E               	movwf	(??_gpio_pin_direction_init+3)^0,c
  1126   00FF36  502E               	movf	(??_gpio_pin_direction_init+3)^0,w,c
  1127   00FF38  0D02               	mullw	2
  1128   00FF3A  0E15               	movlw	low _tris_regs
  1129   00FF3C  24F3               	addwf	243,w,c
  1130   00FF3E  6ED9               	movwf	fsr2l,c
  1131   00FF40  0E00               	movlw	high _tris_regs
  1132   00FF42  20F4               	addwfc	prodh,w,c
  1133   00FF44  6EDA               	movwf	fsr2h,c
  1134   00FF46  CFDE F02F          	movff	postinc2,??_gpio_pin_direction_init+4
  1135   00FF4A  CFDD F030          	movff	postdec2,??_gpio_pin_direction_init+5
  1136   00FF4E  C02F  FFD9         	movff	??_gpio_pin_direction_init+4,fsr2l
  1137   00FF52  C030  FFDA         	movff	??_gpio_pin_direction_init+5,fsr2h
  1138   00FF56  502D               	movf	(??_gpio_pin_direction_init+2)^0,w,c
  1139   00FF58  16DF               	andwf	indf2,f,c
  1140                           
  1141                           ;MCAL/GPIO/gpio.c: 22:                 break;
  1142   00FF5A  EFFE  F07F         	goto	l1337
  1143   00FF5E                     l1331:
  1144                           
  1145                           ;MCAL/GPIO/gpio.c: 24:                 (*tris_regs[my_pin->port] |=(1<<my_pin->pin));
  1146   00FF5E  C029  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1147   00FF62  C02A  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1148   00FF66  30DF               	rrcf	223,w,c
  1149   00FF68  32E8               	rrcf	wreg,f,c
  1150   00FF6A  32E8               	rrcf	wreg,f,c
  1151   00FF6C  0B07               	andlw	7
  1152   00FF6E  6E2B               	movwf	??_gpio_pin_direction_init^0,c
  1153   00FF70  0E01               	movlw	1
  1154   00FF72  6E2C               	movwf	(??_gpio_pin_direction_init+1)^0,c
  1155   00FF74  2A2B               	incf	??_gpio_pin_direction_init^0,f,c
  1156   00FF76  EFBF  F07F         	goto	u554
  1157   00FF7A                     u555:
  1158   00FF7A  90D8               	bcf	status,0,c
  1159   00FF7C  362C               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  1160   00FF7E                     u554:
  1161   00FF7E  2E2B               	decfsz	??_gpio_pin_direction_init^0,f,c
  1162   00FF80  EFBD  F07F         	goto	u555
  1163   00FF84  C029  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1164   00FF88  C02A  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1165   00FF8C  50DF               	movf	223,w,c
  1166   00FF8E  0B07               	andlw	7
  1167   00FF90  6E2D               	movwf	(??_gpio_pin_direction_init+2)^0,c
  1168   00FF92  502D               	movf	(??_gpio_pin_direction_init+2)^0,w,c
  1169   00FF94  0D02               	mullw	2
  1170   00FF96  0E15               	movlw	low _tris_regs
  1171   00FF98  24F3               	addwf	243,w,c
  1172   00FF9A  6ED9               	movwf	fsr2l,c
  1173   00FF9C  0E00               	movlw	high _tris_regs
  1174   00FF9E  20F4               	addwfc	prodh,w,c
  1175   00FFA0  6EDA               	movwf	fsr2h,c
  1176   00FFA2  CFDE F02E          	movff	postinc2,??_gpio_pin_direction_init+3
  1177   00FFA6  CFDD F02F          	movff	postdec2,??_gpio_pin_direction_init+4
  1178   00FFAA  C02E  FFD9         	movff	??_gpio_pin_direction_init+3,fsr2l
  1179   00FFAE  C02F  FFDA         	movff	??_gpio_pin_direction_init+4,fsr2h
  1180   00FFB2  502C               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  1181   00FFB4  12DF               	iorwf	indf2,f,c
  1182                           
  1183                           ;MCAL/GPIO/gpio.c: 25:                 break;
  1184   00FFB6  EFFE  F07F         	goto	l1337
  1185   00FFBA                     l1335:
  1186   00FFBA  C029  FFD9         	movff	gpio_pin_direction_init@my_pin,fsr2l
  1187   00FFBE  C02A  FFDA         	movff	gpio_pin_direction_init@my_pin+1,fsr2h
  1188   00FFC2  BCDF               	btfsc	indf2,6,c
  1189   00FFC4  EFE6  F07F         	goto	u561
  1190   00FFC8  EFE9  F07F         	goto	u560
  1191   00FFCC                     u561:
  1192   00FFCC  0E01               	movlw	1
  1193   00FFCE  EFEA  F07F         	goto	u570
  1194   00FFD2                     u560:
  1195   00FFD2  0E00               	movlw	0
  1196   00FFD4                     u570:
  1197   00FFD4  6E2B               	movwf	??_gpio_pin_direction_init^0,c
  1198   00FFD6  6A2C               	clrf	(??_gpio_pin_direction_init+1)^0,c
  1199                           
  1200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1201                           ; Switch size 1, requested type "simple"
  1202                           ; Number of cases is 1, Range of values is 0 to 0
  1203                           ; switch strategies available:
  1204                           ; Name         Instructions Cycles
  1205                           ; simple_byte            4     3 (average)
  1206                           ;	Chosen strategy is simple_byte
  1207   00FFD8  502C               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  1208   00FFDA  0A00               	xorlw	0	; case 0
  1209   00FFDC  B4D8               	btfsc	status,2,c
  1210   00FFDE  EFF3  F07F         	goto	l1537
  1211   00FFE2  EF7A  F07F         	goto	l1327
  1212   00FFE6                     l1537:
  1213                           
  1214                           ; Switch size 1, requested type "simple"
  1215                           ; Number of cases is 2, Range of values is 0 to 1
  1216                           ; switch strategies available:
  1217                           ; Name         Instructions Cycles
  1218                           ; simple_byte            7     4 (average)
  1219                           ;	Chosen strategy is simple_byte
  1220   00FFE6  502B               	movf	??_gpio_pin_direction_init^0,w,c
  1221   00FFE8  0A00               	xorlw	0	; case 0
  1222   00FFEA  B4D8               	btfsc	status,2,c
  1223   00FFEC  EF7E  F07F         	goto	l1329
  1224   00FFF0  0A01               	xorlw	1	; case 1
  1225   00FFF2  B4D8               	btfsc	status,2,c
  1226   00FFF4  EFAF  F07F         	goto	l1331
  1227   00FFF8  EF7A  F07F         	goto	l1327
  1228   00FFFC                     l1337:
  1229                           
  1230                           ;MCAL/GPIO/gpio.c: 29:     return ret;
  1231   00FFFC  5031               	movf	gpio_pin_direction_init@ret^0,w,c
  1232   00FFFE  0012               	return		;funcret
  1233   010000                     __end_of_gpio_pin_direction_init:
  1234                           	callstack 0
  1235   000000                     
  1236                           	psect	rparam
  1237   000000                     
  1238                           	psect	idloc
  1239                           
  1240                           ;Config register IDLOC0 @ 0x200000
  1241                           ;	unspecified, using default values
  1242   200000                     	org	2097152
  1243   200000  FF                 	db	255
  1244                           
  1245                           ;Config register IDLOC1 @ 0x200001
  1246                           ;	unspecified, using default values
  1247   200001                     	org	2097153
  1248   200001  FF                 	db	255
  1249                           
  1250                           ;Config register IDLOC2 @ 0x200002
  1251                           ;	unspecified, using default values
  1252   200002                     	org	2097154
  1253   200002  FF                 	db	255
  1254                           
  1255                           ;Config register IDLOC3 @ 0x200003
  1256                           ;	unspecified, using default values
  1257   200003                     	org	2097155
  1258   200003  FF                 	db	255
  1259                           
  1260                           ;Config register IDLOC4 @ 0x200004
  1261                           ;	unspecified, using default values
  1262   200004                     	org	2097156
  1263   200004  FF                 	db	255
  1264                           
  1265                           ;Config register IDLOC5 @ 0x200005
  1266                           ;	unspecified, using default values
  1267   200005                     	org	2097157
  1268   200005  FF                 	db	255
  1269                           
  1270                           ;Config register IDLOC6 @ 0x200006
  1271                           ;	unspecified, using default values
  1272   200006                     	org	2097158
  1273   200006  FF                 	db	255
  1274                           
  1275                           ;Config register IDLOC7 @ 0x200007
  1276                           ;	unspecified, using default values
  1277   200007                     	org	2097159
  1278   200007  FF                 	db	255
  1279                           
  1280                           	psect	config
  1281                           
  1282                           ; Padding undefined space
  1283   300000                     	org	3145728
  1284   300000  FF                 	db	255
  1285                           
  1286                           ;Config register CONFIG1H @ 0x300001
  1287                           ;	unspecified, using default values
  1288                           ;	Oscillator Selection bits
  1289                           ;	OSC = 0x7, unprogrammed default
  1290                           ;	Fail-Safe Clock Monitor Enable bit
  1291                           ;	FCMEN = 0x0, unprogrammed default
  1292                           ;	Internal/External Oscillator Switchover bit
  1293                           ;	IESO = 0x0, unprogrammed default
  1294   300001                     	org	3145729
  1295   300001  07                 	db	7
  1296                           
  1297                           ;Config register CONFIG2L @ 0x300002
  1298                           ;	unspecified, using default values
  1299                           ;	Power-up Timer Enable bit
  1300                           ;	PWRT = 0x1, unprogrammed default
  1301                           ;	Brown-out Reset Enable bits
  1302                           ;	BOREN = 0x3, unprogrammed default
  1303                           ;	Brown Out Reset Voltage bits
  1304                           ;	BORV = 0x3, unprogrammed default
  1305   300002                     	org	3145730
  1306   300002  1F                 	db	31
  1307                           
  1308                           ;Config register CONFIG2H @ 0x300003
  1309                           ;	unspecified, using default values
  1310                           ;	Watchdog Timer Enable bit
  1311                           ;	WDT = 0x1, unprogrammed default
  1312                           ;	Watchdog Timer Postscale Select bits
  1313                           ;	WDTPS = 0xF, unprogrammed default
  1314   300003                     	org	3145731
  1315   300003  1F                 	db	31
  1316                           
  1317                           ; Padding undefined space
  1318   300004                     	org	3145732
  1319   300004  FF                 	db	255
  1320                           
  1321                           ;Config register CONFIG3H @ 0x300005
  1322                           ;	unspecified, using default values
  1323                           ;	CCP2 MUX bit
  1324                           ;	CCP2MX = 0x1, unprogrammed default
  1325                           ;	PORTB A/D Enable bit
  1326                           ;	PBADEN = 0x1, unprogrammed default
  1327                           ;	Low-Power Timer1 Oscillator Enable bit
  1328                           ;	LPT1OSC = 0x0, unprogrammed default
  1329                           ;	MCLR Pin Enable bit
  1330                           ;	MCLRE = 0x1, unprogrammed default
  1331   300005                     	org	3145733
  1332   300005  83                 	db	131
  1333                           
  1334                           ;Config register CONFIG4L @ 0x300006
  1335                           ;	unspecified, using default values
  1336                           ;	Stack Full/Underflow Reset Enable bit
  1337                           ;	STVREN = 0x1, unprogrammed default
  1338                           ;	Single-Supply ICSP Enable bit
  1339                           ;	LVP = 0x1, unprogrammed default
  1340                           ;	Extended Instruction Set Enable bit
  1341                           ;	XINST = 0x0, unprogrammed default
  1342                           ;	Background Debugger Enable bit
  1343                           ;	DEBUG = 0x1, unprogrammed default
  1344   300006                     	org	3145734
  1345   300006  85                 	db	133
  1346                           
  1347                           ; Padding undefined space
  1348   300007                     	org	3145735
  1349   300007  FF                 	db	255
  1350                           
  1351                           ;Config register CONFIG5L @ 0x300008
  1352                           ;	unspecified, using default values
  1353                           ;	Code Protection bit
  1354                           ;	CP0 = 0x1, unprogrammed default
  1355                           ;	Code Protection bit
  1356                           ;	CP1 = 0x1, unprogrammed default
  1357                           ;	Code Protection bit
  1358                           ;	CP2 = 0x1, unprogrammed default
  1359                           ;	Code Protection bit
  1360                           ;	CP3 = 0x1, unprogrammed default
  1361   300008                     	org	3145736
  1362   300008  0F                 	db	15
  1363                           
  1364                           ;Config register CONFIG5H @ 0x300009
  1365                           ;	unspecified, using default values
  1366                           ;	Boot Block Code Protection bit
  1367                           ;	CPB = 0x1, unprogrammed default
  1368                           ;	Data EEPROM Code Protection bit
  1369                           ;	CPD = 0x1, unprogrammed default
  1370   300009                     	org	3145737
  1371   300009  C0                 	db	192
  1372                           
  1373                           ;Config register CONFIG6L @ 0x30000A
  1374                           ;	unspecified, using default values
  1375                           ;	Write Protection bit
  1376                           ;	WRT0 = 0x1, unprogrammed default
  1377                           ;	Write Protection bit
  1378                           ;	WRT1 = 0x1, unprogrammed default
  1379                           ;	Write Protection bit
  1380                           ;	WRT2 = 0x1, unprogrammed default
  1381                           ;	Write Protection bit
  1382                           ;	WRT3 = 0x1, unprogrammed default
  1383   30000A                     	org	3145738
  1384   30000A  0F                 	db	15
  1385                           
  1386                           ;Config register CONFIG6H @ 0x30000B
  1387                           ;	unspecified, using default values
  1388                           ;	Configuration Register Write Protection bit
  1389                           ;	WRTC = 0x1, unprogrammed default
  1390                           ;	Boot Block Write Protection bit
  1391                           ;	WRTB = 0x1, unprogrammed default
  1392                           ;	Data EEPROM Write Protection bit
  1393                           ;	WRTD = 0x1, unprogrammed default
  1394   30000B                     	org	3145739
  1395   30000B  E0                 	db	224
  1396                           
  1397                           ;Config register CONFIG7L @ 0x30000C
  1398                           ;	unspecified, using default values
  1399                           ;	Table Read Protection bit
  1400                           ;	EBTR0 = 0x1, unprogrammed default
  1401                           ;	Table Read Protection bit
  1402                           ;	EBTR1 = 0x1, unprogrammed default
  1403                           ;	Table Read Protection bit
  1404                           ;	EBTR2 = 0x1, unprogrammed default
  1405                           ;	Table Read Protection bit
  1406                           ;	EBTR3 = 0x1, unprogrammed default
  1407   30000C                     	org	3145740
  1408   30000C  0F                 	db	15
  1409                           
  1410                           ;Config register CONFIG7H @ 0x30000D
  1411                           ;	unspecified, using default values
  1412                           ;	Boot Block Table Read Protection bit
  1413                           ;	EBTRB = 0x1, unprogrammed default
  1414   30000D                     	org	3145741
  1415   30000D  40                 	db	64
  1416                           tosu	equ	0xFFF
  1417                           tosh	equ	0xFFE
  1418                           tosl	equ	0xFFD
  1419                           stkptr	equ	0xFFC
  1420                           pclatu	equ	0xFFB
  1421                           pclath	equ	0xFFA
  1422                           pcl	equ	0xFF9
  1423                           tblptru	equ	0xFF8
  1424                           tblptrh	equ	0xFF7
  1425                           tblptrl	equ	0xFF6
  1426                           tablat	equ	0xFF5
  1427                           prodh	equ	0xFF4
  1428                           prodl	equ	0xFF3
  1429                           indf0	equ	0xFEF
  1430                           postinc0	equ	0xFEE
  1431                           postdec0	equ	0xFED
  1432                           preinc0	equ	0xFEC
  1433                           plusw0	equ	0xFEB
  1434                           fsr0h	equ	0xFEA
  1435                           fsr0l	equ	0xFE9
  1436                           wreg	equ	0xFE8
  1437                           indf1	equ	0xFE7
  1438                           postinc1	equ	0xFE6
  1439                           postdec1	equ	0xFE5
  1440                           preinc1	equ	0xFE4
  1441                           plusw1	equ	0xFE3
  1442                           fsr1h	equ	0xFE2
  1443                           fsr1l	equ	0xFE1
  1444                           bsr	equ	0xFE0
  1445                           indf2	equ	0xFDF
  1446                           postinc2	equ	0xFDE
  1447                           postdec2	equ	0xFDD
  1448                           preinc2	equ	0xFDC
  1449                           plusw2	equ	0xFDB
  1450                           fsr2h	equ	0xFDA
  1451                           fsr2l	equ	0xFD9
  1452                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        40
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     18      65
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    dc_motor_stop@my_dcmotor	PTR const struct . size(2) Largest target is 2
		 -> dcmotor2(COMRAM[2]), dcmotor1(COMRAM[2]), 

    dc_motor_move_left@my_dcmotor	PTR const struct . size(2) Largest target is 2
		 -> dcmotor2(COMRAM[2]), dcmotor1(COMRAM[2]), 

    dc_motor_move_right@my_dcmotor	PTR const struct . size(2) Largest target is 2
		 -> dcmotor2(COMRAM[2]), dcmotor1(COMRAM[2]), 

    dc_motor_initialize@my_dcmotor	PTR const struct . size(2) Largest target is 2
		 -> dcmotor2(COMRAM[2]), dcmotor1(COMRAM[2]), 

    gpio_pin_initialize@my_pin	PTR const struct . size(2) Largest target is 2
		 -> relay_initialize@rel_pin(COMRAM[1]), dcmotor2.dcmotorpins(COMRAM[2]), dcmotor2(COMRAM[2]), dcmotor1.dcmotorpins(COMRAM[2]), 
		 -> dcmotor1(COMRAM[2]), led_init@my_pin(COMRAM[1]), 

    gpio_pin_logic_write@my_pin	PTR const struct . size(2) Largest target is 2
		 -> relay_turn_off@rel_pin(COMRAM[1]), relay_turn_on@rel_pin(COMRAM[1]), relay_initialize@rel_pin(COMRAM[1]), dcmotor2.dcmotorpins(COMRAM[2]), 
		 -> dcmotor2(COMRAM[2]), dcmotor1.dcmotorpins(COMRAM[2]), dcmotor1(COMRAM[2]), led_turn_off@my_pin(COMRAM[1]), 
		 -> led_turn_on@my_pin(COMRAM[1]), led_init@my_pin(COMRAM[1]), 

    gpio_pin_direction_init@my_pin	PTR const struct . size(2) Largest target is 2
		 -> relay_initialize@rel_pin(COMRAM[1]), dcmotor2.dcmotorpins(COMRAM[2]), dcmotor2(COMRAM[2]), dcmotor1.dcmotorpins(COMRAM[2]), 
		 -> dcmotor1(COMRAM[2]), led_init@my_pin(COMRAM[1]), 

    lat_regs	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATE(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATB(BITBIGSFRlh[1]), 
		 -> LATA(BITBIGSFRll[1]), 

    port_regs	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTE(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), 
		 -> PORTA(BITBIGSFRll[1]), 

    tris_regs	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISE(BITBIGSFRh[1]), TRISD(BITBIGSFRh[1]), TRISC(BITBIGSFRh[1]), TRISB(BITBIGSFRh[1]), 
		 -> TRISA(BITBIGSFRll[1]), 


Critical Paths under _main in COMRAM

    _main->_dc_motor_initialize
    _dc_motor_stop->_gpio_pin_logic_write
    _dc_motor_move_right->_gpio_pin_logic_write
    _dc_motor_move_left->_gpio_pin_logic_write
    _dc_motor_initialize->_gpio_pin_initialize
    _gpio_pin_initialize->_gpio_pin_logic_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9065
                                             16 COMRAM     2     2      0
                _dc_motor_initialize
                 _dc_motor_move_left
                _dc_motor_move_right
                      _dc_motor_stop
 ---------------------------------------------------------------------------------
 (1) _dc_motor_stop                                        3     1      2    2079
                                             10 COMRAM     3     1      2
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_right                                  3     1      2    2079
                                             10 COMRAM     3     1      2
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_left                                   3     1      2    2079
                                             10 COMRAM     3     1      2
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _dc_motor_initialize                                  3     1      2    2828
                                             13 COMRAM     3     1      2
                _gpio_pin_initialize
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_initialize                                  3     1      2    2600
                                             10 COMRAM     3     1      2
            _gpio_pin_direction_init
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_logic_write                                10     7      3    1851
                                              0 COMRAM    10     7      3
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_direction_init                              9     7      2     255
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dc_motor_initialize
     _gpio_pin_initialize
       _gpio_pin_direction_init
       _gpio_pin_logic_write
   _dc_motor_move_left
     _gpio_pin_logic_write
   _dc_motor_move_right
     _gpio_pin_logic_write
   _dc_motor_stop
     _gpio_pin_logic_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      40        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     12      41       1       51.2%
BITBIGSFRh          69      0       0      36        0.0%
BITBIGSFRlh          4      0       0      37        0.0%
BITBIGSFRll          4      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      41      39        0.0%
DATA                 0      0      41       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Aug 04 21:00:55 2023

                             l82 FFFE                              l101 FEBA  
                            l120 FCE4                              l232 FBDA  
                            l242 FC1A                              l172 FCFE  
                            l237 FC5A                              l247 FC9A  
                            u520 FED2                              u504 FDF0  
                            u600 FBEE                              u521 FECE  
                            u505 FDEC                              u601 FBEA  
                            u530 FEF4                              u514 FE52  
                            u610 FC2E                              u531 FEF0  
                            u515 FE4E                              u611 FC2A  
                            u620 FC6E                              u621 FC6A  
                            u560 FFD2                              u544 FF1C  
                            u480 FDA6                              u561 FFCC  
                            u545 FF18                              u481 FDA2  
                            u570 FFD4                              u554 FF7E  
                            u490 FDC8                              u555 FF7A  
                            u491 FDC4                              u580 FCAE  
                            u581 FCAA                              u590 FBB6  
                            u591 FBB2                              u727 FD20  
                            u737 FD4E                              u747 FD7C  
         ??_gpio_pin_logic_write 002C                              prod 000FF3  
                            wreg 000FE8            relay_initialize@F3039 003D  
     gpio_pin_logic_write@my_pin 0029                             l1301 FDA6  
                           l1311 FE8E                             l1303 FDC8  
                           l1321 FEBC                             l1305 FDD0  
                           l1313 FEB8                             l1331 FF5E  
                           l1323 FEC0                             l1307 FE32  
                           l1325 FED2                             l1335 FFBA  
                           l1327 FEF4                             l1351 FCB6  
                           l1329 FEFC                             l1337 FFFC  
                           l1353 FCE2                             l1345 FC9C  
                           l1361 FBB6                             l1347 FC9C  
                           l1363 FBBA                             l1371 FBEE  
                           l1349 FCAE                             l1357 FBA4  
                           l1373 FBF2                             l1381 FC2E  
                           l1461 FD2C                             l1535 FEA2  
                           l1359 FBA4                             l1367 FBDC  
                           l1383 FC32                             l1391 FC6E  
                           l1463 FD38                             l1537 FFE6  
                           l1297 FD90                             l1369 FBDC  
                           l1377 FC1C                             l1393 FC72  
                           l1465 FD44                             l1457 FCE6  
                           l1299 FD94                             l1379 FC1C  
                           l1387 FC5C                             l1467 FD72  
                           l1459 FD16                             l1389 FC5C  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             _main FCE6  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
       ?_gpio_pin_direction_init 0029                             prodl 000FF3  
                           start 0000                     ___param_bank 000000  
         dc_motor_initialize@ret 0038                            ?_main 0029  
            relay_turn_off@F3049 003B                            _PORTA 000F80  
                          _PORTB 000F81                            _PORTC 000F82  
                          _PORTD 000F83                            _PORTE 000F84  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            tablat 000FF5  
                          status 000FD8                  __initialization FB6E  
                   __end_of_main FD90      __end_of_dc_motor_initialize FBDC  
                         ??_main 0039                    __activetblptr 000002  
               led_turn_on@F3050 0040      __end_of_dc_motor_move_right FC5C  
                         clear_0 FB94                           isa$std 000001  
      gpio_pin_logic_write@logic 002B                    led_init@F3045 0041  
                   __pdataCOMRAM 0001                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                     __accesstop 0080          __end_of__initialization FB9A  
                  ___rparam_used 000001    dc_motor_initialize@my_dcmotor 0036  
                 __pcstackCOMRAM 0029                led_turn_off@F3055 003F  
                led_toggle@F3060 003E          dc_motor_stop@my_dcmotor 0033  
                        __Hparam 0000                          __Lparam 0000  
          dc_motor_move_left@ret 0035              _gpio_pin_initialize FC9C  
                        __pcinit FB6E                          __ramtop 1000  
                        __ptext0 FCE6                          __ptext1 FC5C  
                        __ptext2 FC1C                          __ptext3 FBDC  
                        __ptext4 FBA4                          __ptext5 FC9C  
                        __ptext6 FD90                          __ptext7 FEBC  
                        _btn_low 001F             ?_gpio_pin_initialize 0033  
           end_of_initialization FB9A                    __Lmediumconst 0000  
                  _dc_motor_stop FC5C                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE            ??_gpio_pin_initialize 0035  
                 ?_dc_motor_stop 0033               relay_turn_on@F3044 003C  
        _gpio_pin_direction_init FEBC                    __pidataCOMRAM FB46  
            start_initialization FB6E       __end_of_dc_motor_move_left FC1C  
               dc_motor_stop@ret 0035                      __pbssCOMRAM 003B  
                ??_dc_motor_stop 0035     __end_of_gpio_pin_logic_write FEBC  
      ??_gpio_pin_direction_init 002B    dc_motor_move_right@my_dcmotor 0033  
      gpio_pin_initialize@my_pin 0033     dc_motor_move_left@my_dcmotor 0033  
            _dc_motor_initialize FBA4                        _port_regs 000B  
                      _tris_regs 0015           gpio_pin_initialize@ret 0035  
__end_of_gpio_pin_direction_init 0000             ?_dc_motor_initialize 0036  
                      copy_data0 FB82              _dc_motor_move_right FC1C  
                       __Hrparam 0000                         __Lrparam 0000  
           ?_dc_motor_move_right 0033      __end_of_gpio_pin_initialize FCE6  
          ??_dc_motor_initialize 0038             _gpio_pin_logic_write FD90  
                       _dcmotor1 0027                         _dcmotor2 0025  
                       _btn_high 0022           dc_motor_move_right@ret 0035  
                       _lat_regs 0001                         isa$xinst 000000  
          ??_dc_motor_move_right 0035               _dc_motor_move_left FBDC  
          ?_gpio_pin_logic_write 0029          gpio_pin_logic_write@ret 0032  
            ?_dc_motor_move_left 0033             ??_dc_motor_move_left 0035  
  gpio_pin_direction_init@my_pin 0029       gpio_pin_direction_init@ret 0031  
          __end_of_dc_motor_stop FC9C  
